'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (node, opts) {
  opts = opts || [];
  var ctx = createCtx(node);
  var h = node.clientHeight;
  var w = node.clientWidth;
  var duration = opts.duration || 1000;
  var color = opts.color || '#ffffff';
  var rgb = torgb(color);
  var x = h / 2;
  var y = w / 2;
  var r = Math.min(h, w) / 2 - 4;
  var _stop = void 0;
  var start = void 0;
  function step(timestamp) {
    ctx.clearRect(0, 0, w, h);
    if (_stop) return;
    if (!start) start = timestamp;
    if (!node.parentNode) _stop = true;
    var ts = (timestamp - start) % duration;
    ctx.beginPath();
    ctx.strokeStyle = 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', 0.4)';
    ctx.arc(x, y, r, 0, Math.PI * 2);
    ctx.lineWidth = opts.width || 4;
    ctx.lineCap = 'round';
    ctx.stroke();
    var a = -Math.PI / 2 + Math.PI * 2 * ts / duration;
    var e = a + Math.PI / 2;
    ctx.beginPath();
    ctx.strokeStyle = 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', 1)';
    ctx.arc(x, y, r, a, e);
    ctx.stroke();
    (0, _raf2.default)(step);
  }
  (0, _raf2.default)(step);
  return {
    stop: function stop() {
      _stop = true;
    }
  };
};

var _autoscaleCanvas = require('autoscale-canvas');

var _autoscaleCanvas2 = _interopRequireDefault(_autoscaleCanvas);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createCtx(node) {
  var canvas = document.createElement('canvas');
  node.appendChild(canvas);
  var rect = node.getBoundingClientRect();
  var ctx = canvas.getContext('2d');
  canvas.height = rect.height;
  canvas.width = rect.width;
  (0, _autoscaleCanvas2.default)(canvas);
  return ctx;
}

var hex_reg = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
function torgb(hex) {
  if (hex.length == 4) hex = hex.replace(/[^#]/g, function (p) {
    return p + p;
  });
  var result = hex_reg.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
}