{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Xray/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport PageHead from './List/View/pageHead';\nimport Table from '../../components/common/Table/index';\nimport { createForm } from 'rc-form';\nimport { View, Notes, MoreDots, Download, Print, Reminder } from '../../assets/images/pmr/index';\nimport { Edit, Cancel, VerbalOrder } from '../../assets/images/resident-detail/index';\nimport axios from '../../services/api/config';\nimport { connect } from \"react-redux\";\nimport { IMAGING_DIAGNOSTIC_STATUS, X_RAY_FORM_TYPE } from '../../constants/xray';\nimport { X_RAY_TODO_TYPES, TODO_CATEGORY } from '../../constants/todo';\nimport { requisitionRequest, xRayListing, getXrayPDF } from '../../services/api/routes/x_ray';\nimport { getResidents } from '../../services/api/routes/resident';\nimport { imagingDiagnosticsPaginate } from '../../services/api/routes/customer';\nimport NotesModal from '../../components/NotesPopup/List';\nimport ReminderModal from '../../components/ReminderPopup/List';\nimport routes from '../../routes/constant';\nimport UtilService, { selectedBodyParts, isDrOrNp, capitalizeStr, getUserNameWithDesignation } from '../../util/common';\nimport { displayDateTime, displayDate } from '../../util/moment';\nimport ConfirmPopup from '../../components/common/ConfirmPopup';\nimport DetailViewSTL from './List/DetailViewStl';\nimport { Toast, Button } from '../../components/common';\nimport Modal from '../../components/common/Popup/index';\nimport { STATUS } from '../../constants/resident';\n\nconst moment = require('moment');\n\nconst _ = require('lodash');\n\nconst status = {\n  Submitted: 1\n};\nlet residentTimeout;\nlet statusFilters = [];\nObject.keys(IMAGING_DIAGNOSTIC_STATUS).map(k => {\n  return statusFilters.push({\n    text: k,\n    value: IMAGING_DIAGNOSTIC_STATUS[k]\n  });\n});\n\nfunction Xraylist(props) {\n  const {\n    authUser,\n    form\n  } = props;\n  const [loading, setLoading] = useState(false);\n  const [isVisibleAddModal, setIsVisibleAddModal] = useState(false);\n  const [homeAreaId, setHomeAreaId] = useState(undefined);\n  const [isVisibleDetailView, setIsVisibleDetailView] = useState(false);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [residentListing, setResidentListing] = useState([]);\n  const [deleteRec, setDeleteRec] = useState(undefined);\n  const [showCancelPopup, setShowCancelPopup] = useState(false);\n  const [filter, setFilter] = useState({\n    page: 1,\n    limit: 10,\n    find: {}\n  });\n  const [data, setData] = useState([]);\n  const [dateRange, setDateRange] = useState([]);\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [notesModal, setNotesModal] = useState(false);\n  const [reminderFilterOptions, setReminderFilterOptions] = useState({});\n  const [reminderModal, setReminderModal] = useState(false);\n  const [total, setTotal] = useState(0);\n  const [imagingDiagnosticList, setImagingDiagnosticList] = useState([]);\n  const [imagingDetail, setImagingDetail] = useState(null);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [editRec, setEditRec] = useState(undefined);\n  const [imagingType, setImagingType] = useState(X_RAY_FORM_TYPE.X_RAY);\n  const [downloadButton, setDownloadButton] = useState(false);\n  const currentModalData = React.useRef({});\n\n  const submit = () => {\n    props.form.validateFields((error, value) => {\n      console.log(error, value);\n    });\n  };\n\n  useEffect(() => {\n    fetch();\n  }, [filter, filter.filter]);\n  useEffect(() => {\n    fetchImagingDiagnosticList();\n  }, []);\n  useEffect(() => {\n    if (loading) {\n      setLoading(false);\n    }\n  }, [data]);\n\n  const fetchImagingDiagnosticList = () => {\n    axios({ ...imagingDiagnosticsPaginate\n    }).then(({\n      data\n    }) => {\n      if (data.code === 'OK') {\n        setImagingDiagnosticList(data.data.data);\n      }\n    });\n  };\n\n  const modifiedList = list => {\n    let modifiedList = list.map(current => {\n      return selectedBodyParts(current);\n    });\n    return modifiedList;\n  };\n\n  const fetch = () => {\n    let dataReq = {\n      query: { ...filter,\n        find: { ...filter.filter\n        },\n        populate: [{\n          selectedBodyParts: []\n        }, {\n          residentId: []\n        }, {\n          homeAreaId: ['name']\n        }, {\n          requestedBy: []\n        }, {\n          physicianId: [\"mergeLFName\", \"type\", {\n            \"assignedCustomer\": [\"isActive\", \"homeId\", {\n              \"designationId\": [\"name\", \"code\", \"parentId\"]\n            }]\n          }]\n        }]\n      }\n    };\n    setLoading(true);\n    axios({ ...xRayListing,\n      method: 'POST',\n      data: dataReq\n    }).then(({\n      data\n    }) => {\n      if (data.code === 'OK') {\n        let updatedList = modifiedList(data.data.list);\n        setData(updatedList);\n        setTotal(data.data.count);\n        setLoading(false);\n      } else {\n        setLoading(false);\n      }\n    }).catch(err => {\n      setLoading(false);\n    });\n  };\n\n  const handleTableChange = (pagination, tfilter, sorter) => {\n    let tempFilter = filter;\n    tempFilter = { ...tempFilter,\n      page: pagination.current,\n      limit: pagination.pageSize\n    };\n\n    if (tfilter) {\n      var _tempFilter, _tempFilter$filter;\n\n      if (tfilter.status && tfilter.status.length) {\n        if (!tempFilter.filter) {\n          tempFilter['filter'] = {\n            status: {}\n          };\n        }\n\n        tempFilter.filter.status = tfilter.status;\n      } else if ((_tempFilter = tempFilter) === null || _tempFilter === void 0 ? void 0 : (_tempFilter$filter = _tempFilter.filter) === null || _tempFilter$filter === void 0 ? void 0 : _tempFilter$filter.status) {\n        delete tempFilter.filter[\"status\"];\n      }\n    }\n\n    setFilter(tempFilter);\n  };\n\n  const showRequisitionModal = () => {\n    setIsVisibleAddModal(true);\n  };\n\n  const closeRequisitionModal = (redirect, info) => {\n    setIsVisibleAddModal(false);\n\n    if (redirect && info && info.doctorId && info.residentId) {\n      props.history.push({\n        pathname: routes.xRayRequest.path,\n        search: `?doctorId=${info.doctorId}&residentId=${info.residentId}&formType=${info.type}`\n      });\n    }\n  };\n\n  const handleUnitChange = val => {\n    let tempFilter = filter.filter;\n    tempFilter.homeAreaId = val;\n    setFilter(tempFilter);\n  };\n\n  const handleSearch = val => {\n    let tempFilter = _.cloneDeep(filter);\n\n    if (val) {\n      tempFilter.search = {\n        keys: ['name', 'orderNumber'],\n        keyword: val\n      };\n    } else if (tempFilter.hasOwnProperty('search')) {\n      delete tempFilter[\"search\"];\n    }\n\n    tempFilter.page = 1;\n    tempFilter.limit = 10;\n    setFilter(tempFilter);\n  };\n\n  const showDetailView = (status, data) => {\n    if (data && Object.keys(data).length) {\n      let title = '';\n      title = `${data.residentId.mergeLFName}`;\n      title = data.residentInfoId.nhRoom ? `${title}(Room No:${data.residentInfoId.nhRoom})` : title;\n      data.title = title;\n      let requestNo = data.orderNumber + \"(\" + displayDate(data.createdAt) + \")\";\n      data.requestNo = requestNo;\n    }\n\n    setImagingDetail(data);\n    setIsVisibleDetailView(status);\n  };\n\n  const handleRangePickerChange = dateRange => {\n    let tempQuery = { ...filter\n    };\n\n    if (dateRange.length > 0) {\n      tempQuery = { ...tempQuery,\n        between_eq: [{\n          createdAt: [moment(dateRange[0]).startOf('day').toISOString(), moment(dateRange[1]).endOf('day').toISOString()]\n        }]\n      };\n      setDateRange(dateRange);\n    } else {\n      delete tempQuery['createdAt'];\n      setDateRange([]);\n    }\n\n    setFilter({ ...filter,\n      page: 1,\n      ...tempQuery\n    });\n  };\n\n  const handleImagingFilter = val => {\n    let tempFilter = _.cloneDeep(filter);\n\n    if (val) {\n      tempFilter.page = 1;\n      tempFilter.filter = { ...tempFilter.filter,\n        imagingAndDiagnosticId: val\n      };\n    } else if (tempFilter.filter.hasOwnProperty('imagingAndDiagnosticId')) {\n      delete tempFilter.filter[\"imagingAndDiagnosticId\"];\n    }\n\n    setFilter(tempFilter);\n  };\n\n  const handleConfirm = rec => {\n    console.log(\"TCL: handleConfirm\", rec);\n    setShowConfirmModal(true);\n    setEditRec(rec);\n  };\n\n  const closeConfirmModal = () => {\n    setShowConfirmModal(false);\n    setEditRec(null);\n  };\n\n  const handleEdit = rec => {\n    let editData = editRec;\n    let id = editData._id;\n    let type = editData.formType;\n    console.log(\"editData => \", editData);\n    props.history.push({\n      pathname: routes.xRayRequest.path,\n      search: `?isEdit=true&requisitionId=${id}&formType=${type}`\n    });\n  };\n\n  const createNotesModal = record => {\n    let options = {\n      \"query\": {\n        \"find\": {\n          \"xrayId\": record._id\n        },\n        \"populate\": [{\n          addedBy: []\n        }]\n      }\n    };\n    currentModalData.current = { ...record\n    };\n    setNotesFilterOptions(options);\n    setNotesModal(true);\n  };\n\n  const createReminderModal = record => {\n    let options = {\n      \"query\": {\n        \"find\": {\n          \"xRayId\": record._id\n        },\n        \"populate\": [{\n          addedBy: []\n        }]\n      }\n    };\n    currentModalData.current = { ...record\n    };\n    setReminderFilterOptions(options);\n    setReminderModal(true);\n  };\n\n  const confirmCancel = rec => {\n    setShowCancelPopup(true);\n    setDeleteRec(rec);\n  };\n\n  const visibleNotesModal = (visible, record, str, noteCount = undefined) => {\n    setNotesModal(visible);\n    setNotesFilterOptions({});\n\n    if (noteCount != undefined) {\n      setData(oldData => {\n        return oldData.map(d => {\n          if (d._id === currentModalData.current._id) {\n            d['notesCount'] = noteCount;\n            return d;\n          }\n\n          return d;\n        });\n      });\n    }\n\n    if (!visible && str !== 'cancel') fetch();\n  };\n\n  const visibleReminderModal = (visible, record, str, reminderCount = undefined) => {\n    setReminderModal(visible);\n    setReminderFilterOptions({});\n\n    if (reminderCount != undefined) {\n      setData(oldData => {\n        return oldData.map(d => {\n          if (d._id === currentModalData.current._id) {\n            d['reminderCount'] = reminderCount;\n            return d;\n          }\n\n          return d;\n        });\n      });\n    }\n\n    if (!visible && str !== 'cancel') fetch();\n  };\n\n  const handleDelete = () => {\n    let rec = deleteRec;\n    let data;\n\n    if (rec && rec._id) {\n      data = _.cloneDeep(rec);\n    } else {\n      data = _.cloneDeep(editRec);\n    }\n\n    data.id = rec._id;\n    data.residentId = rec.residentId._id;\n    data.homeAreaId = rec.homeAreaId._id;\n    data.physicianId = rec.physicianId._id;\n    data.status = IMAGING_DIAGNOSTIC_STATUS.CANCELLED;\n    data.isCancel = true;\n    data.requestedBy = data.requestedBy._id;\n    setBtnLoading(true);\n    axios({ ...requisitionRequest,\n      data\n    }).then(({\n      data\n    }) => {\n      if (data.code === 'OK') {\n        closeDelete(true);\n        Toast.success(data.message);\n        setShowCancelPopup(false);\n      } else {\n        closeDelete(false);\n      }\n    }).catch(err => {\n      setBtnLoading(false);\n    });\n  };\n\n  const closeDelete = shouldFetch => {\n    setShowConfirmModal(false);\n    setEditRec(null);\n    setBtnLoading(false);\n\n    if (shouldFetch) {\n      fetch();\n    }\n  };\n\n  const downLoadXrayPdf = id => {\n    setDownloadButton(true);\n    axios({ ...getXrayPDF,\n      data: {\n        xrayid: id\n      }\n    }).then(data => {\n      if (data.statusText === \"OK\") {\n        let a = document.createElement('a');\n        a.download = \"x-ray-result.pdf\";\n        a.href = data.data.data[0].path;\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        setDownloadButton(false);\n      } else {\n        Toast.error('Something went wrong ');\n        setDownloadButton(false);\n      }\n    }).catch(error => {\n      setDownloadButton(false);\n    });\n  };\n\n  const getColumns = () => [{\n    title: 'Sr.No',\n    keyword: 'index',\n    dataIndex: 'index',\n    render: (text, record, index) => (filter.page - 1) * filter.limit + (index + 1)\n  }, {\n    title: 'Requisition No.',\n    dataIndex: 'orderNumber',\n    // style:{display:'inline'},\n    render: (text, record) => /*#__PURE__*/React.createElement(React.Fragment, null, text + '  ' || '', record.isVerbalOrder ? /*#__PURE__*/React.createElement(VerbalOrder, {\n      className: \"non_drug\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 41\n      }\n    }) : null)\n  }, {\n    title: 'Resident',\n    dataIndex: 'residentId',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 30\n      }\n    }, text && text.mergeLFName ? text.mergeLFName : '')\n  }, {\n    title: 'Room No',\n    dataIndex: 'residentId',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }\n    }, text && text.room ? text.room : ' ')\n  }, {\n    title: \"Request By\",\n    dataIndex: \"requestedBy\",\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }\n    }, text && text.mergeFLName ? text.mergeFLName : ' ')\n  }, {\n    title: 'Home Area',\n    dataIndex: 'homeAreaId',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }\n    }, text && text.name ? text.name : ' ')\n  }, {\n    title: 'Physician',\n    dataIndex: 'physicianId',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }\n    }, text ? getUserNameWithDesignation(text) : ' ')\n  }, {\n    title: 'HC#',\n    dataIndex: 'residentId',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 17\n      }\n    }, text && text.hc || ' ')\n  }, {\n    title: 'Date',\n    dataIndex: 'createdAt',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 17\n      }\n    }, text ? displayDateTime(text) : '')\n  }, {\n    title: 'Status',\n    dataIndex: 'status',\n    render: text => /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(IMAGING_DIAGNOSTIC_STATUS).map(k => {\n      if (IMAGING_DIAGNOSTIC_STATUS[k] == text) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: \"o_status submitted\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 32\n          }\n        }, capitalizeStr(k));\n      }\n    })),\n    filters: statusFilters,\n    onFilter: (value, record) => {\n      return record.status === value;\n    }\n  }, {\n    title: 'Action',\n    render: (text, record) => {\n      const hasEditPermission = [IMAGING_DIAGNOSTIC_STATUS.SUBMITTED, IMAGING_DIAGNOSTIC_STATUS.SENT].includes(record.status) && [record.requestedBy._id, record.physicianId._id].includes(authUser._id);\n      const hasCancelPermission = record.status !== IMAGING_DIAGNOSTIC_STATUS.CANCELLED && [record.requestedBy._id, record.physicianId._id].includes(authUser._id);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(View, {\n        onClick: () => showDetailView(true, record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 29\n        }\n      }, \"View\")), /*#__PURE__*/React.createElement(\"div\", {\n        onClick: createNotesModal.bind(this, record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Notes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 29\n        }\n      }, \"Notes\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"notes tot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 29\n        }\n      }, record.notesCount)), /*#__PURE__*/React.createElement(\"div\", {\n        onClick: createReminderModal.bind(this, record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Reminder, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 29\n        }\n      }, \"Reminder\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"notes tot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 29\n        }\n      }, record.reminderCount)), record.status === IMAGING_DIAGNOSTIC_STATUS.COMPLETED ? /*#__PURE__*/React.createElement(\"div\", {\n        onClick: downloadButton ? null : () => downLoadXrayPdf(record.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Download, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 37\n        }\n      }, \"Download\")) : null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Print, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 29\n        }\n      }, \"Print\")), (hasCancelPermission || hasEditPermission) && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"more\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(MoreDots, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"more_wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 33\n        }\n      }, hasEditPermission && /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => handleConfirm(record, true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Edit, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 45\n        }\n      }, \"Edit\")), hasCancelPermission && /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => confirmCancel(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Cancel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 45\n        }\n      }, \"Cancel\")))));\n    }\n  }];\n\n  const onShowSizeChange = (current, size) => {\n    let tempFilter = _.cloneDeep(filter);\n\n    tempFilter.limit = size;\n    tempFilter.page = 1;\n    setFilter(tempFilter);\n  };\n\n  const fetchResident = filter => {\n    if (residentTimeout) {\n      clearTimeout(residentTimeout);\n      residentTimeout = null;\n    }\n\n    residentTimeout = setTimeout(() => {\n      axios({ ...getResidents,\n        data: { ...filter\n        }\n      }).then(({\n        data\n      }) => {\n        console.log('data', data);\n\n        if (data.code === 'OK') {\n          if (data.data.data) {\n            setResidentListing(data.data.data);\n          }\n        }\n      });\n    }, 300);\n  };\n\n  const onResidentSearch = name => {\n    if (name) {\n      console.log('name');\n      let filter = {\n        query: {\n          find: {\n            status: STATUS.ACTIVE\n          },\n          search: {\n            keyword: name,\n            keys: [\"firstName\", \"lastName\"]\n          },\n          populate: [{\n            homeAreaId: [\"name\"]\n          }]\n        }\n      };\n      fetchResident(filter);\n    } else {\n      form.setFieldsValue({\n        \"residentId\": undefined\n      });\n    }\n  };\n\n  const handleDoctorChange = (val, forState) => {\n    if (forState === true) {\n      let tempFilter = filter;\n      tempFilter.filter.doctorId = val;\n      setFilter({ ...filter,\n        filter: { ...filter.filter,\n          doctorId: val\n        }\n      });\n    } else {\n      form.setFieldsValue({\n        doctorId: val\n      });\n    }\n  };\n\n  const handleSubmit = () => {\n    const {\n      validateFields\n    } = form;\n    validateFields((err, values) => {\n      if (err) {\n        console.log('err');\n        return;\n      }\n\n      let tempdoctorId = isDrOrNp(authUser) ? authUser._id : values.doctorId;\n      let info = {\n        doctorId: tempdoctorId,\n        residentId: values.residentId,\n        type: imagingType\n      };\n      closeRequisitionModal(true, info);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"xray_wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PageHead, {\n    form: props.form,\n    imagingDiagnosticList: imagingDiagnosticList,\n    handleImagingFilter: handleImagingFilter,\n    total: total,\n    isVisible: isVisibleAddModal,\n    onClose: closeRequisitionModal,\n    onShowRequisitionModal: showRequisitionModal,\n    onRangePickerChange: handleRangePickerChange,\n    onDoctorChange: handleDoctorChange,\n    filter: filter,\n    onSearch: handleSearch,\n    onSubmit: handleSubmit,\n    authUser: authUser,\n    residentListing: residentListing,\n    onTypeChange: type => setImagingType(type),\n    selectedType: imagingType,\n    onResidentSearch: onResidentSearch,\n    onCancel: closeRequisitionModal,\n    dateRange: dateRange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columns: getColumns(),\n    datasource: data,\n    loading: loading // showResult={true}\n    // resultCol=\"result1\"\n    ,\n    onChange: handleTableChange,\n    pagination: {\n      current: filter.page,\n      pageSize: filter.limit,\n      total: total\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 17\n    }\n  }), showConfirmModal && /*#__PURE__*/React.createElement(Modal, {\n    title: /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 32\n      }\n    }, \"Confirm Action\"),\n    visible: showConfirmModal,\n    onCancel: closeConfirmModal,\n    footer: [/*#__PURE__*/React.createElement(Button, {\n      className: \"screen-btn gray-btn\",\n      onClick: handleEdit,\n      type: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 29\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"screen-btn\",\n      htmlType: \"submit\",\n      loading: btnLoading,\n      onClick: handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 29\n      }\n    }, \"Delete\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 25\n    }\n  }, \"Would you like to edit or delete this requistition ?\")), showCancelPopup ? /*#__PURE__*/React.createElement(ConfirmPopup, {\n    title: `Are you sure you want to Cancel this Requisition?`,\n    okText: \"Yes\",\n    visible: showCancelPopup,\n    okType: \"primary\",\n    cancelText: \"No\",\n    onCancel: () => {\n      setShowCancelPopup(false);\n      setDeleteRec(null);\n    },\n    onOk: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 25\n    }\n  }) : null, isVisibleDetailView && /*#__PURE__*/React.createElement(DetailViewSTL, {\n    isVisible: isVisibleDetailView,\n    onCancel: showDetailView,\n    data: imagingDetail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 21\n    }\n  }), notesModal && /*#__PURE__*/React.createElement(NotesModal, {\n    visible: notesModal,\n    filterOptions: notesFilterOptions,\n    onCancel: noteCount => visibleNotesModal(false, null, 'cancel', noteCount),\n    onOk: () => visibleNotesModal(false),\n    isUpsertList: true,\n    modalTitle: `View Note - ${currentModalData.current.orderNumber}`,\n    xRayNumber: currentModalData.current.orderNumber,\n    addData: {\n      residentId: currentModalData.current.residentId._id,\n      xrayId: currentModalData.current._id,\n      category: TODO_CATEGORY.X_RAY\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 25\n    }\n  }), reminderModal && /*#__PURE__*/React.createElement(ReminderModal, {\n    visible: reminderModal,\n    filterOptions: reminderFilterOptions,\n    onCancel: reminderCount => visibleReminderModal(false, null, 'cancel', reminderCount),\n    onOk: () => visibleReminderModal(false),\n    isUpsertList: true,\n    modalTitle: `View Reminder - ${currentModalData.current.orderNumber}`,\n    xRayNumber: currentModalData.current.orderNumber,\n    addData: {\n      residentId: currentModalData.current.residentId._id,\n      xRayId: currentModalData.current._id,\n      category: TODO_CATEGORY.X_RAY\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 25\n    }\n  }))));\n}\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser\n  } = auth;\n  return {\n    authUser\n  };\n};\n\nexport default connect(mapStateToProps)(createForm()(Xraylist));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Xray/index.js"],"names":["React","useState","useEffect","PageHead","Table","createForm","View","Notes","MoreDots","Download","Print","Reminder","Edit","Cancel","VerbalOrder","axios","connect","IMAGING_DIAGNOSTIC_STATUS","X_RAY_FORM_TYPE","X_RAY_TODO_TYPES","TODO_CATEGORY","requisitionRequest","xRayListing","getXrayPDF","getResidents","imagingDiagnosticsPaginate","NotesModal","ReminderModal","routes","UtilService","selectedBodyParts","isDrOrNp","capitalizeStr","getUserNameWithDesignation","displayDateTime","displayDate","ConfirmPopup","DetailViewSTL","Toast","Button","Modal","STATUS","moment","require","_","status","Submitted","residentTimeout","statusFilters","Object","keys","map","k","push","text","value","Xraylist","props","authUser","form","loading","setLoading","isVisibleAddModal","setIsVisibleAddModal","homeAreaId","setHomeAreaId","undefined","isVisibleDetailView","setIsVisibleDetailView","btnLoading","setBtnLoading","residentListing","setResidentListing","deleteRec","setDeleteRec","showCancelPopup","setShowCancelPopup","filter","setFilter","page","limit","find","data","setData","dateRange","setDateRange","notesFilterOptions","setNotesFilterOptions","notesModal","setNotesModal","reminderFilterOptions","setReminderFilterOptions","reminderModal","setReminderModal","total","setTotal","imagingDiagnosticList","setImagingDiagnosticList","imagingDetail","setImagingDetail","showConfirmModal","setShowConfirmModal","editRec","setEditRec","imagingType","setImagingType","X_RAY","downloadButton","setDownloadButton","currentModalData","useRef","submit","validateFields","error","console","log","fetch","fetchImagingDiagnosticList","then","code","modifiedList","list","current","dataReq","query","populate","residentId","requestedBy","physicianId","method","updatedList","count","catch","err","handleTableChange","pagination","tfilter","sorter","tempFilter","pageSize","length","showRequisitionModal","closeRequisitionModal","redirect","info","doctorId","history","pathname","xRayRequest","path","search","type","handleUnitChange","val","handleSearch","cloneDeep","keyword","hasOwnProperty","showDetailView","title","mergeLFName","residentInfoId","nhRoom","requestNo","orderNumber","createdAt","handleRangePickerChange","tempQuery","between_eq","startOf","toISOString","endOf","handleImagingFilter","imagingAndDiagnosticId","handleConfirm","rec","closeConfirmModal","handleEdit","editData","id","_id","formType","createNotesModal","record","options","addedBy","createReminderModal","confirmCancel","visibleNotesModal","visible","str","noteCount","oldData","d","visibleReminderModal","reminderCount","handleDelete","CANCELLED","isCancel","closeDelete","success","message","shouldFetch","downLoadXrayPdf","xrayid","statusText","a","document","createElement","download","href","style","display","body","appendChild","click","removeChild","getColumns","dataIndex","render","index","isVerbalOrder","textTransform","room","mergeFLName","name","hc","filters","onFilter","hasEditPermission","SUBMITTED","SENT","includes","hasCancelPermission","bind","notesCount","COMPLETED","onShowSizeChange","size","fetchResident","clearTimeout","setTimeout","onResidentSearch","ACTIVE","setFieldsValue","handleDoctorChange","forState","handleSubmit","values","tempdoctorId","xrayId","category","xRayId","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PageHead from './List/View/pageHead'\nimport Table from '../../components/common/Table/index'\nimport { createForm } from 'rc-form';\nimport { View, Notes, MoreDots, Download, Print, Reminder } from '../../assets/images/pmr/index';\nimport { Edit, Cancel, VerbalOrder } from '../../assets/images/resident-detail/index'\nimport axios from '../../services/api/config';\nimport { connect } from \"react-redux\";\nimport { IMAGING_DIAGNOSTIC_STATUS, X_RAY_FORM_TYPE } from '../../constants/xray'\nimport { X_RAY_TODO_TYPES, TODO_CATEGORY } from '../../constants/todo'\nimport { requisitionRequest, xRayListing, getXrayPDF } from '../../services/api/routes/x_ray'\nimport { getResidents } from '../../services/api/routes/resident'\nimport { imagingDiagnosticsPaginate } from '../../services/api/routes/customer'\nimport NotesModal from '../../components/NotesPopup/List';\nimport ReminderModal from '../../components/ReminderPopup/List';\nimport routes from '../../routes/constant'\nimport UtilService, { selectedBodyParts, isDrOrNp, capitalizeStr, getUserNameWithDesignation } from '../../util/common'\nimport { displayDateTime, displayDate } from '../../util/moment'\nimport ConfirmPopup from '../../components/common/ConfirmPopup'\nimport DetailViewSTL from './List/DetailViewStl'\nimport { Toast, Button } from '../../components/common'\nimport Modal from '../../components/common/Popup/index'\nimport { STATUS } from '../../constants/resident';\nconst moment = require('moment')\nconst _ = require('lodash')\nconst status = {\n    Submitted: 1\n}\nlet residentTimeout\nlet statusFilters = []\nObject.keys(IMAGING_DIAGNOSTIC_STATUS).map(k => {\n    return statusFilters.push({ text: k, value: IMAGING_DIAGNOSTIC_STATUS[k] })\n})\nfunction Xraylist(props) {\n    const { authUser, form } = props;\n    const [loading, setLoading] = useState(false)\n    const [isVisibleAddModal, setIsVisibleAddModal] = useState(false)\n    const [homeAreaId, setHomeAreaId] = useState(undefined)\n    const [isVisibleDetailView, setIsVisibleDetailView] = useState(false)\n    const [btnLoading, setBtnLoading] = useState(false)\n    const [residentListing, setResidentListing] = useState([])\n    const [deleteRec, setDeleteRec] = useState(undefined)\n    const [showCancelPopup, setShowCancelPopup] = useState(false)\n    const [filter, setFilter] = useState({\n        page: 1,\n        limit: 10,\n        find: {}\n    })\n    const [data, setData] = useState([])\n    const [dateRange, setDateRange] = useState([])\n    const [notesFilterOptions, setNotesFilterOptions] = useState({})\n    const [notesModal, setNotesModal] = useState(false)\n    const [reminderFilterOptions, setReminderFilterOptions] = useState({})\n    const [reminderModal, setReminderModal] = useState(false)\n    const [total, setTotal] = useState(0)\n    const [imagingDiagnosticList, setImagingDiagnosticList] = useState([])\n    const [imagingDetail, setImagingDetail] = useState(null)\n    const [showConfirmModal, setShowConfirmModal] = useState(false)\n    const [editRec, setEditRec] = useState(undefined)\n    const [imagingType, setImagingType] = useState(X_RAY_FORM_TYPE.X_RAY)\n    const [downloadButton, setDownloadButton] = useState(false)\n    const currentModalData = React.useRef({})\n\n    const submit = () => {\n        props.form.validateFields((error, value) => {\n            console.log(error, value);\n        });\n    }\n\n    useEffect(() => {\n        fetch()\n    }, [filter, filter.filter])\n\n    useEffect(() => {\n        fetchImagingDiagnosticList()\n    }, [])\n\n    useEffect(() => {\n        if (loading) {\n            setLoading(false)\n        }\n    }, [data])\n\n\n    const fetchImagingDiagnosticList = () => {\n        axios({ ...imagingDiagnosticsPaginate }).then(({ data }) => {\n            if (data.code === 'OK') {\n                setImagingDiagnosticList(data.data.data)\n            }\n        })\n\n    }\n    const modifiedList = list => {\n        let modifiedList = list.map(current => {\n            return selectedBodyParts(current)\n        })\n        return modifiedList\n    }\n    const fetch = () => {\n        let dataReq = {\n            query: {\n                ...filter,\n                find: { ...filter.filter },\n                populate: [\n                    { selectedBodyParts: [] },\n                    { residentId: [] },\n                    { homeAreaId: ['name'] },\n                    { requestedBy: [] },\n                    {\n                        physicianId: [\n                            \"mergeLFName\",\n                            \"type\",\n                            {\n                                \"assignedCustomer\": [\n                                    \"isActive\",\n                                    \"homeId\",\n                                    {\n                                        \"designationId\": [\n                                            \"name\",\n                                            \"code\",\n                                            \"parentId\"\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n        setLoading(true)\n        axios({ ...xRayListing, method: 'POST', data: dataReq }).then(({ data }) => {\n            if (data.code === 'OK') {\n                let updatedList = modifiedList(data.data.list)\n                setData(updatedList)\n                setTotal(data.data.count)\n                setLoading(false)\n            }\n            else {\n                setLoading(false)\n            }\n        }).catch(err => {\n            setLoading(false)\n        })\n    }\n    const handleTableChange = (pagination, tfilter, sorter) => {\n        let tempFilter = filter\n        tempFilter = {\n            ...tempFilter,\n            page: pagination.current,\n            limit: pagination.pageSize\n        }\n        if (tfilter) {\n            if (tfilter.status && tfilter.status.length) {\n                if (!tempFilter.filter) {\n                    tempFilter['filter'] = { status: {} }\n                }\n                tempFilter.filter.status = tfilter.status\n            }\n            else if (tempFilter?.filter?.status) {\n                delete tempFilter.filter[\"status\"]\n            }\n        }\n        setFilter(tempFilter)\n    }\n    const showRequisitionModal = () => {\n        setIsVisibleAddModal(true)\n    }\n    const closeRequisitionModal = (redirect, info) => {\n        setIsVisibleAddModal(false)\n        if (redirect && info && info.doctorId && info.residentId) {\n            props.history.push({\n                pathname: routes.xRayRequest.path,\n                search: `?doctorId=${info.doctorId}&residentId=${info.residentId}&formType=${info.type}`\n            })\n        }\n    }\n    const handleUnitChange = (val) => {\n        let tempFilter = filter.filter\n        tempFilter.homeAreaId = val\n        setFilter(tempFilter)\n    }\n    const handleSearch = val => {\n        let tempFilter = _.cloneDeep(filter)\n        if (val) {\n            tempFilter.search = {\n                keys: ['name', 'orderNumber'],\n                keyword: val\n            }\n        }\n        else if (tempFilter.hasOwnProperty('search')) {\n            delete tempFilter[\"search\"]\n        }\n        tempFilter.page = 1\n        tempFilter.limit = 10\n        setFilter(tempFilter)\n    }\n    const showDetailView = (status, data) => {\n        if (data && Object.keys(data).length) {\n            let title = ''\n            title = `${data.residentId.mergeLFName}`\n            title = data.residentInfoId.nhRoom ? `${title}(Room No:${data.residentInfoId.nhRoom})` : title\n            data.title = title\n            let requestNo = data.orderNumber + \"(\" + displayDate(data.createdAt) + \")\"\n            data.requestNo = requestNo\n        }\n        setImagingDetail(data)\n        setIsVisibleDetailView(status)\n    }\n    const handleRangePickerChange = dateRange => {\n        let tempQuery = { ...filter }\n        if (dateRange.length > 0) {\n            tempQuery = {\n                ...tempQuery,\n                between_eq: [{\n                    createdAt: [\n                        moment(dateRange[0]).startOf('day').toISOString(),\n                        moment(dateRange[1]).endOf('day').toISOString()\n                    ]\n                }]\n            }\n            setDateRange(dateRange)\n        }\n        else {\n            delete tempQuery['createdAt']\n            setDateRange([])\n        }\n        setFilter({ ...filter, page: 1, ...tempQuery })\n    }\n    const handleImagingFilter = val => {\n        let tempFilter = _.cloneDeep(filter)\n        if (val) {\n            tempFilter.page = 1\n            tempFilter.filter = {\n                ...tempFilter.filter,\n                imagingAndDiagnosticId: val\n            }\n        }\n        else if (tempFilter.filter.hasOwnProperty('imagingAndDiagnosticId')) {\n            delete tempFilter.filter[\"imagingAndDiagnosticId\"]\n        }\n        setFilter(tempFilter)\n    }\n    const handleConfirm = rec => {\n        console.log(\"TCL: handleConfirm\", rec)\n        setShowConfirmModal(true)\n        setEditRec(rec)\n    }\n    const closeConfirmModal = () => {\n        setShowConfirmModal(false)\n        setEditRec(null)\n    }\n    const handleEdit = (rec) => {\n        let editData = editRec\n        let id = editData._id\n        let type = editData.formType;\n        console.log(\"editData => \", editData)\n        props.history.push({\n            pathname: routes.xRayRequest.path,\n            search: `?isEdit=true&requisitionId=${id}&formType=${type}`\n        })\n    }\n    const createNotesModal = record => {\n        let options =\n        {\n            \"query\": {\n                \"find\": { \"xrayId\": record._id },\n                \"populate\": [\n                    { addedBy: [] }\n                ]\n            }\n        }\n        currentModalData.current = { ...record }\n        setNotesFilterOptions(options)\n        setNotesModal(true)\n    };\n    const createReminderModal = record => {\n        let options =\n        {\n            \"query\": {\n                \"find\": { \"xRayId\": record._id },\n                \"populate\": [\n                    { addedBy: [] }\n                ]\n            }\n        }\n        currentModalData.current = { ...record }\n        setReminderFilterOptions(options)\n        setReminderModal(true)\n    };\n    const confirmCancel = rec => {\n        setShowCancelPopup(true)\n        setDeleteRec(rec)\n    }\n    const visibleNotesModal = (visible, record, str, noteCount = undefined) => {\n        setNotesModal(visible)\n        setNotesFilterOptions({});\n        if (noteCount != undefined) {\n            setData(oldData => {\n                return oldData.map(d => {\n                    if (d._id === currentModalData.current._id) {\n                        d['notesCount'] = noteCount;\n                        return d;\n                    }\n                    return d;\n                })\n            })\n        }\n        if (!visible && str !== 'cancel')\n            fetch()\n    }\n    const visibleReminderModal = (visible, record, str, reminderCount = undefined) => {\n        setReminderModal(visible)\n        setReminderFilterOptions({});\n        if (reminderCount != undefined) {\n            setData(oldData => {\n                return oldData.map(d => {\n                    if (d._id === currentModalData.current._id) {\n                        d['reminderCount'] = reminderCount;\n                        return d;\n                    }\n                    return d;\n                })\n            })\n        }\n        if (!visible && str !== 'cancel')\n            fetch()\n    }\n    const handleDelete = () => {\n        let rec = deleteRec\n        let data\n        if (rec && rec._id) {\n            data = _.cloneDeep(rec)\n        }\n        else {\n            data = _.cloneDeep(editRec)\n        }\n        data.id = rec._id\n        data.residentId = rec.residentId._id;\n        data.homeAreaId = rec.homeAreaId._id;\n        data.physicianId = rec.physicianId._id;\n        data.status = IMAGING_DIAGNOSTIC_STATUS.CANCELLED\n        data.isCancel = true\n        data.requestedBy = data.requestedBy._id;\n        setBtnLoading(true)\n        axios({ ...requisitionRequest, data }).then(({ data }) => {\n            if (data.code === 'OK') {\n                closeDelete(true)\n                Toast.success(data.message)\n                setShowCancelPopup(false)\n            }\n            else {\n                closeDelete(false)\n            }\n        }).catch(err => {\n            setBtnLoading(false)\n        })\n    }\n    const closeDelete = (shouldFetch) => {\n        setShowConfirmModal(false)\n        setEditRec(null)\n        setBtnLoading(false)\n        if (shouldFetch) {\n            fetch()\n        }\n    }\n    const downLoadXrayPdf = (id) => {\n        setDownloadButton(true)\n        axios({ ...getXrayPDF, data: { xrayid: id } })\n            .then(data => {\n                if (data.statusText === \"OK\") {\n                    let a = document.createElement('a');\n                    a.download = \"x-ray-result.pdf\";\n                    a.href = data.data.data[0].path\n                    a.style.display = 'none';\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                    setDownloadButton(false)\n                }\n                else {\n                    Toast.error('Something went wrong ')\n                    setDownloadButton(false)\n                }\n\n            }).catch(error => {\n                setDownloadButton(false)\n            })\n    }\n    const getColumns = () => [\n        {\n            title: 'Sr.No',\n            keyword: 'index',\n            dataIndex: 'index',\n            render: (text, record, index) => ((filter.page - 1) * filter.limit) + (index + 1)\n        },\n        {\n            title: 'Requisition No.',\n            dataIndex: 'orderNumber',\n            // style:{display:'inline'},\n            render: (text, record) => (<>{text + '  ' || ''}\n                {record.isVerbalOrder ? <VerbalOrder className=\"non_drug\" /> : null}\n            </>),\n        },\n        {\n            title: 'Resident',\n            dataIndex: 'residentId',\n            render: text => (<span>{text && text.mergeLFName ? text.mergeLFName : ''}</span>),\n\n        },\n        {\n            title: 'Room No',\n            dataIndex: 'residentId',\n            render: text => (\n                <span style={{ textTransform: \"capitalize\" }}>{text && text.room ? text.room : ' '}</span>\n            )\n        },\n        {\n            title: \"Request By\",\n            dataIndex: \"requestedBy\",\n            render: text => (\n                <span style={{ textTransform: \"capitalize\" }}>{text && text.mergeFLName ? text.mergeFLName : ' '}</span>\n            )\n        },\n        {\n            title: 'Home Area',\n            dataIndex: 'homeAreaId',\n            render: text => (\n                <span style={{ textTransform: \"capitalize\" }}>{text && text.name ? text.name : ' '}</span>\n            )\n        },\n        {\n            title: 'Physician',\n            dataIndex: 'physicianId',\n            render: text => (\n                <span style={{ textTransform: \"capitalize\" }}>{text ? getUserNameWithDesignation(text) : ' '}</span>\n            )\n        },\n        {\n            title: 'HC#',\n            dataIndex: 'residentId',\n            render: text => (\n                <span style={{ textTransform: \"capitalize\" }}>{text && text.hc || ' '}</span>\n            )\n        },\n        {\n            title: 'Date',\n            dataIndex: 'createdAt',\n            render: text => (\n                <span style={{ textTransform: \"capitalize\" }}>{text ? displayDateTime(text) : ''}</span>\n            )\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            render: (text) => (<>{\n                Object.keys(IMAGING_DIAGNOSTIC_STATUS).map(k => {\n                    if (IMAGING_DIAGNOSTIC_STATUS[k] == text) {\n                        return <span className=\"o_status submitted\">{capitalizeStr(k)}</span>\n                    }\n                })\n\n            }</>),\n            filters: statusFilters,\n            onFilter: (value, record) => {\n                return record.status === value;\n            }\n\n        },\n        {\n            title: 'Action',\n            render: (text, record) => {\n                const hasEditPermission = [IMAGING_DIAGNOSTIC_STATUS.SUBMITTED, IMAGING_DIAGNOSTIC_STATUS.SENT].includes(record.status) && [record.requestedBy._id, record.physicianId._id].includes(authUser._id);\n                const hasCancelPermission = record.status !== IMAGING_DIAGNOSTIC_STATUS.CANCELLED && [record.requestedBy._id, record.physicianId._id].includes(authUser._id)\n                return (\n                    <div className=\"actions\">\n                        <div>\n                            <View onClick={() => showDetailView(true, record)} />\n                            <p>View</p>\n                        </div>\n                        <div onClick={createNotesModal.bind(this, record)}>\n                            <Notes />\n                            <p>Notes</p>\n                            <span className=\"notes tot\">{record.notesCount}</span>\n                        </div>\n                        <div onClick={createReminderModal.bind(this, record)}>\n                            <Reminder />\n                            <p>Reminder</p>\n                            <span className=\"notes tot\">{record.reminderCount}</span>\n                        </div>\n                        {\n                            record.status === IMAGING_DIAGNOSTIC_STATUS.COMPLETED ?\n                                <div onClick={downloadButton ? null : () => downLoadXrayPdf(record.id)}>\n                                    <Download />\n                                    <p>Download</p>\n                                </div> : null\n                        }\n                        <div>\n                            <Print />\n                            <p>Print</p>\n                        </div>\n                        {\n                            (hasCancelPermission || hasEditPermission) &&\n                            <div className=\"more\">\n                                <MoreDots />\n\n                                <div className=\"more_wrap\">\n                                    {\n                                        hasEditPermission &&\n                                        <a onClick={() => handleConfirm(record, true)}>\n                                            <Edit />\n                                            <span>Edit</span>\n                                        </a>\n                                    }\n                                    {\n                                        hasCancelPermission &&\n                                        <a onClick={() => confirmCancel(record)}>\n                                            <Cancel />\n                                            <span>Cancel</span>\n                                        </a>\n                                    }\n                                </div>\n                            </div>\n                        }\n                    </div>\n                )\n            }\n        }\n    ]\n    const onShowSizeChange = (current, size) => {\n        let tempFilter = _.cloneDeep(filter)\n        tempFilter.limit = size\n        tempFilter.page = 1\n        setFilter(tempFilter)\n    };\n    const fetchResident = (filter) => {\n        if (residentTimeout) {\n            clearTimeout(residentTimeout)\n            residentTimeout = null\n        }\n        residentTimeout = setTimeout(() => {\n            axios({ ...getResidents, data: { ...filter } }).then(({ data }) => {\n                console.log('data', data)\n                if (data.code === 'OK') {\n                    if (data.data.data) {\n                        setResidentListing(data.data.data)\n                    }\n                }\n            })\n        }, 300)\n    }\n    const onResidentSearch = name => {\n        if (name) {\n            console.log('name')\n            let filter = {\n                query: {\n                    find: { status: STATUS.ACTIVE },\n                    search: {\n                        keyword: name,\n                        keys: [\"firstName\", \"lastName\"]\n                    },\n                    populate: [\n                        {\n                            homeAreaId: [\"name\"]\n                        }\n                    ]\n                }\n            }\n            fetchResident(filter)\n        }\n        else {\n            form.setFieldsValue({\n                \"residentId\": undefined\n            })\n        }\n    }\n    const handleDoctorChange = (val, forState) => {\n        if (forState === true) {\n            let tempFilter = filter\n            tempFilter.filter.doctorId = val\n            setFilter({\n                ...filter, filter: {\n                    ...filter.filter,\n                    doctorId: val\n                }\n            })\n        }\n        else {\n            form.setFieldsValue({\n                doctorId: val\n            })\n        }\n\n    }\n    const handleSubmit = () => {\n        const { validateFields } = form\n        validateFields((err, values) => {\n            if (err) {\n                console.log('err')\n                return\n            }\n            let tempdoctorId = isDrOrNp(authUser) ? authUser._id : values.doctorId\n            let info = {\n                doctorId: tempdoctorId,\n                residentId: values.residentId,\n                type: imagingType\n            }\n            closeRequisitionModal(true, info)\n        })\n    }\n\n    return (<>\n        <div className=\"container\">\n            <div className=\"xray_wrap\">\n                <PageHead\n                    form={props.form}\n                    imagingDiagnosticList={imagingDiagnosticList}\n                    handleImagingFilter={handleImagingFilter}\n                    total={total}\n                    isVisible={isVisibleAddModal}\n                    onClose={closeRequisitionModal}\n                    onShowRequisitionModal={showRequisitionModal}\n                    onRangePickerChange={handleRangePickerChange}\n                    onDoctorChange={handleDoctorChange}\n                    filter={filter}\n                    onSearch={handleSearch}\n                    onSubmit={handleSubmit}\n                    authUser={authUser}\n                    residentListing={residentListing}\n                    onTypeChange={(type) => setImagingType(type)}\n                    selectedType={imagingType}\n                    onResidentSearch={onResidentSearch}\n                    onCancel={closeRequisitionModal}\n                    dateRange={dateRange}\n                />\n                <Table\n                    columns={getColumns()}\n                    datasource={data}\n                    loading={loading}\n                    // showResult={true}\n                    // resultCol=\"result1\"\n                    onChange={handleTableChange}\n                    pagination={{\n                        current: filter.page,\n                        pageSize: filter.limit,\n                        total: total\n                    }}\n                />\n                {\n                    showConfirmModal &&\n                    <Modal\n                        title={<strong>Confirm Action</strong>}\n                        visible={showConfirmModal}\n                        onCancel={closeConfirmModal}\n                        footer={[\n                            <Button className='screen-btn gray-btn' onClick={handleEdit} type=\"primary\">Edit</Button>,\n                            <Button className='screen-btn' htmlType=\"submit\" loading={btnLoading} onClick={handleDelete}>Delete</Button>\n                        ]}\n                    >\n                        <h4>Would you like to edit or delete this requistition ?</h4>\n                    </Modal>\n                }\n                {\n                    showCancelPopup ?\n                        <ConfirmPopup\n                            title={`Are you sure you want to Cancel this Requisition?`}\n                            okText='Yes'\n                            visible={showCancelPopup}\n                            okType='primary'\n                            cancelText='No'\n                            onCancel={() => {\n                                setShowCancelPopup(false)\n                                setDeleteRec(null)\n                            }}\n                            onOk={handleDelete}\n                        /> : null\n                }\n                {\n                    isVisibleDetailView &&\n                    <DetailViewSTL\n                        isVisible={isVisibleDetailView}\n                        onCancel={showDetailView}\n                        data={imagingDetail}\n                    />\n                }\n                {\n                    notesModal && (\n                        <NotesModal\n                            visible={notesModal}\n                            filterOptions={notesFilterOptions}\n                            onCancel={noteCount => visibleNotesModal(false, null, 'cancel', noteCount)}\n                            onOk={() => visibleNotesModal(false)}\n                            isUpsertList={true}\n                            modalTitle={`View Note - ${currentModalData.current.orderNumber}`}\n                            xRayNumber={currentModalData.current.orderNumber}\n                            addData={{\n                                residentId: currentModalData.current.residentId._id,\n                                xrayId: currentModalData.current._id,\n                                category: TODO_CATEGORY.X_RAY\n                            }}\n                        />\n                    )\n                }\n                {\n                    reminderModal && (\n                        <ReminderModal\n                            visible={reminderModal}\n                            filterOptions={reminderFilterOptions}\n                            onCancel={reminderCount => visibleReminderModal(false, null, 'cancel', reminderCount)}\n                            onOk={() => visibleReminderModal(false)}\n                            isUpsertList={true}\n                            modalTitle={`View Reminder - ${currentModalData.current.orderNumber}`}\n                            xRayNumber={currentModalData.current.orderNumber}\n                            addData={{\n                                residentId: currentModalData.current.residentId._id,\n                                xRayId: currentModalData.current._id,\n                                category: TODO_CATEGORY.X_RAY\n                            }}\n                        />\n                    )\n                }\n            </div>\n        </div>\n    </>)\n}\nconst mapStateToProps = ({ auth }) => {\n    const { authUser } = auth\n    return {\n        authUser\n    }\n}\nexport default connect(mapStateToProps)(createForm()(Xraylist));\n"]},"metadata":{},"sourceType":"module"}