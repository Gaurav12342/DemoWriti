{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Version/components/HardUpdate.js\";\nimport React, { useState } from \"react\";\nimport CommonService from \"../../../services/api/services/common\";\nimport { Button, Toast } from \"../../../components/common\";\nimport Confirm from \"../../../components/common/Popup/ConfirmPopup\";\n\nconst HardUpdate = props => {\n  const {\n    record,\n    documentId,\n    model,\n    onHardUpdate,\n    API,\n    isHardUpdate\n  } = props;\n  const [confirm, setConfirm] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [isActive, setIsActive] = useState(props.isActive);\n  const [confirmText, setConfirmText] = useState(\"\");\n  let checkActive = record.isHardUpdate && record.isHardUpdate === true;\n\n  const handleConfirmation = () => {\n    const status = checkActive ? \"Soft Update\" : \"Hard Update\";\n    const name = record ? record.name ? record.name : record.mergeLFName ? record.mergeLFName : \"\" : \"\";\n    setConfirmText(`Are you sure, you want to ${status} ${name} ?`);\n    setConfirm(true);\n  };\n\n  const handleOk = async () => {\n    setLoader(true);\n    let {\n      method,\n      url,\n      baseURL\n    } = API;\n    url = `${url}/${documentId}`;\n    let data = {\n      id: documentId,\n      model: model,\n      fieldName: \"isHardUpdate\",\n      isHardUpdate: !isHardUpdate\n    };\n    let newValue = isActive;\n    let response = await CommonService({\n      method,\n      url,\n      data,\n      baseURL\n    });\n\n    if (response) {\n      if (response.code === \"OK\") {\n        newValue = !isHardUpdate;\n        let record = { ...props.record\n        };\n        record.isHardUpdate = !record.isHardUpdate;\n        onHardUpdate(record);\n        setConfirm(false);\n        Toast.success(response.message);\n      } else {\n        Toast.error(response.message);\n      }\n    }\n\n    setLoader(false);\n    setIsActive(newValue);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    type: checkActive ? \"primary\" : \"danger\",\n    size: \"xs\",\n    onClick: handleConfirmation,\n    loading: loader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, checkActive ? \"Hard Update\" : \"Soft Update\"), confirm && /*#__PURE__*/React.createElement(Confirm, {\n    style: {\n      width: \"400px\"\n    },\n    visible: confirm,\n    onOk: handleOk,\n    onCancel: () => setConfirm(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, confirmText)));\n};\n\nexport default HardUpdate;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Version/components/HardUpdate.js"],"names":["React","useState","CommonService","Button","Toast","Confirm","HardUpdate","props","record","documentId","model","onHardUpdate","API","isHardUpdate","confirm","setConfirm","loader","setLoader","isActive","setIsActive","confirmText","setConfirmText","checkActive","handleConfirmation","status","name","mergeLFName","handleOk","method","url","baseURL","data","id","fieldName","newValue","response","code","success","message","error","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport CommonService from \"../../../services/api/services/common\";\nimport { Button, Toast } from \"../../../components/common\";\nimport Confirm from \"../../../components/common/Popup/ConfirmPopup\";\n\nconst HardUpdate = (props) => {\n  const { record, documentId, model, onHardUpdate, API, isHardUpdate } = props;\n  const [confirm, setConfirm] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [isActive, setIsActive] = useState(props.isActive);\n  const [confirmText, setConfirmText] = useState(\"\");\n  let checkActive = record.isHardUpdate && record.isHardUpdate === true;\n\n  const handleConfirmation = () => {\n    const status = checkActive ? \"Soft Update\" : \"Hard Update\";\n    const name = record\n      ? record.name\n        ? record.name\n        : record.mergeLFName\n        ? record.mergeLFName\n        : \"\"\n      : \"\";\n    setConfirmText(`Are you sure, you want to ${status} ${name} ?`);\n    setConfirm(true);\n  };\n\n  const handleOk = async () => {\n    setLoader(true);\n    let { method, url, baseURL } = API;\n    url = `${url}/${documentId}`;\n    let data = {\n      id: documentId,\n      model: model,\n      fieldName: \"isHardUpdate\",\n      isHardUpdate: !isHardUpdate,\n    };\n    let newValue = isActive;\n    let response = await CommonService({ method, url, data, baseURL });\n    if (response) {\n      if (response.code === \"OK\") {\n        newValue = !isHardUpdate;\n        let record = { ...props.record };\n        record.isHardUpdate = !record.isHardUpdate;\n        onHardUpdate(record);\n        setConfirm(false);\n        Toast.success(response.message);\n      } else {\n        Toast.error(response.message);\n      }\n    }\n    setLoader(false);\n    setIsActive(newValue);\n  };\n\n  return (\n    <>\n      <Button\n        type={checkActive ? \"primary\" : \"danger\"}\n        size=\"xs\"\n        onClick={handleConfirmation}\n        loading={loader}\n      >\n        {checkActive ? \"Hard Update\" : \"Soft Update\"}\n      </Button>\n      {confirm && (\n        <Confirm\n          style={{ width: \"400px\" }}\n          visible={confirm}\n          onOk={handleOk}\n          onCancel={() => setConfirm(false)}\n        >\n          <p>{confirmText}</p>\n        </Confirm>\n      )}\n    </>\n  );\n};\n\nexport default HardUpdate;\n"]},"metadata":{},"sourceType":"module"}