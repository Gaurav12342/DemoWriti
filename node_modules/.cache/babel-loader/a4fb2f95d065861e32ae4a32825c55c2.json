{"ast":null,"code":"import { SWITCH_LANGUAGE, SET_USER_DATA, SET_USER_TOKEN, SET_USER_DEFAULT_PASSWORD, SIGNOUT_USER_SUCCESS, SET_OTP_VERIFIED, REFRESH_TOKEN, SET_HOME_ID, SOCKET_SET } from \"../ActionTypes\";\nimport { encryptData, decryptData } from '../../util/Crypto';\nconst initialSettings = {\n  token: localStorage.getItem('token') ? JSON.parse(localStorage.getItem('token')) : null,\n  authUser: localStorage.getItem('user') ? decryptData(localStorage.getItem('user')) : null,\n  defaultPassword: localStorage.getItem('user') ? decryptData(localStorage.getItem('user')).defaultPassword : null,\n  defaultVirtualVisitId: '',\n  otpVerified: false\n};\n\nconst settings = (state = initialSettings, action) => {\n  switch (action.type) {\n    case SIGNOUT_USER_SUCCESS:\n      {\n        return { ...state,\n          token: null,\n          authUser: null,\n          initURL: '',\n          isResetPassword: false,\n          socket: null,\n          otpVerified: false,\n          homeId: ''\n        };\n      }\n\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          authUser: action.payload\n        };\n      }\n\n    case SET_USER_TOKEN:\n      {\n        return { ...state,\n          token: action.payload\n        };\n      }\n\n    case SET_USER_DEFAULT_PASSWORD:\n      {\n        return { ...state,\n          defaultPassword: action.payload\n        };\n      }\n\n    case SET_OTP_VERIFIED:\n      {\n        return { ...state,\n          otpVerified: action.payload\n        };\n      }\n\n    case REFRESH_TOKEN:\n      {\n        return { ...state,\n          token: action.payload\n        };\n      }\n\n    case SET_HOME_ID:\n      {\n        return { ...state,\n          homeId: action.payload\n        };\n      }\n\n    case SOCKET_SET:\n      {\n        return { ...state,\n          socket: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default settings;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/appRedux/reducers/Auth.js"],"names":["SWITCH_LANGUAGE","SET_USER_DATA","SET_USER_TOKEN","SET_USER_DEFAULT_PASSWORD","SIGNOUT_USER_SUCCESS","SET_OTP_VERIFIED","REFRESH_TOKEN","SET_HOME_ID","SOCKET_SET","encryptData","decryptData","initialSettings","token","localStorage","getItem","JSON","parse","authUser","defaultPassword","defaultVirtualVisitId","otpVerified","settings","state","action","type","initURL","isResetPassword","socket","homeId","payload"],"mappings":"AAAA,SACIA,eADJ,EAEIC,aAFJ,EAGIC,cAHJ,EAIIC,yBAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,aAPJ,EAQIC,WARJ,EASIC,UATJ,QAUO,gBAVP;AAWA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,mBAAzC;AACA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhC,GAA4E,IAD/D;AAEpBG,EAAAA,QAAQ,EAAEJ,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+BJ,WAAW,CAACG,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAA1C,GAA2E,IAFjE;AAGpBI,EAAAA,eAAe,EAAEL,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+BJ,WAAW,CAACG,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAX,CAA0CI,eAAzE,GAA2F,IAHxF;AAIpBC,EAAAA,qBAAqB,EAAE,EAJH;AAKpBC,EAAAA,WAAW,EAAE;AALO,CAAxB;;AAQA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGX,eAAT,EAA0BY,MAA1B,KAAqC;AAClD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKpB,oBAAL;AAA2B;AACvB,eAAO,EACH,GAAGkB,KADA;AAEHV,UAAAA,KAAK,EAAE,IAFJ;AAGHK,UAAAA,QAAQ,EAAE,IAHP;AAIHQ,UAAAA,OAAO,EAAE,EAJN;AAKHC,UAAAA,eAAe,EAAE,KALd;AAMHC,UAAAA,MAAM,EAAE,IANL;AAOHP,UAAAA,WAAW,EAAE,KAPV;AAQHQ,UAAAA,MAAM,EAAE;AARL,SAAP;AAUH;;AACD,SAAK3B,aAAL;AAAoB;AAChB,eAAO,EACH,GAAGqB,KADA;AAEHL,UAAAA,QAAQ,EAAEM,MAAM,CAACM;AAFd,SAAP;AAIH;;AACD,SAAK3B,cAAL;AAAqB;AACjB,eAAO,EACH,GAAGoB,KADA;AAEHV,UAAAA,KAAK,EAAEW,MAAM,CAACM;AAFX,SAAP;AAIH;;AACD,SAAK1B,yBAAL;AAAgC;AAC5B,eAAO,EACH,GAAGmB,KADA;AAEHJ,UAAAA,eAAe,EAAEK,MAAM,CAACM;AAFrB,SAAP;AAIH;;AAED,SAAKxB,gBAAL;AAAuB;AACnB,eAAO,EACH,GAAGiB,KADA;AAEHF,UAAAA,WAAW,EAAEG,MAAM,CAACM;AAFjB,SAAP;AAIH;;AAED,SAAKvB,aAAL;AAAoB;AAChB,eAAO,EACH,GAAGgB,KADA;AAEHV,UAAAA,KAAK,EAAEW,MAAM,CAACM;AAFX,SAAP;AAIH;;AACD,SAAKtB,WAAL;AAAkB;AACd,eAAO,EACH,GAAGe,KADA;AAEHM,UAAAA,MAAM,EAAEL,MAAM,CAACM;AAFZ,SAAP;AAIH;;AACD,SAAKrB,UAAL;AAAiB;AACb,eAAO,EACH,GAAGc,KADA;AAEHK,UAAAA,MAAM,EAAEJ,MAAM,CAACM;AAFZ,SAAP;AAIH;;AACD;AACI,aAAOP,KAAP;AA3DR;AA6DH,CA9DD;;AAgEA,eAAeD,QAAf","sourcesContent":["import {\n    SWITCH_LANGUAGE,\n    SET_USER_DATA,\n    SET_USER_TOKEN,\n    SET_USER_DEFAULT_PASSWORD,\n    SIGNOUT_USER_SUCCESS,\n    SET_OTP_VERIFIED,\n    REFRESH_TOKEN,\n    SET_HOME_ID,\n    SOCKET_SET\n} from \"../ActionTypes\";\nimport { encryptData, decryptData } from '../../util/Crypto'\nconst initialSettings = {\n    token: localStorage.getItem('token') ? JSON.parse(localStorage.getItem('token')) : null,\n    authUser: localStorage.getItem('user') ? decryptData(localStorage.getItem('user')) : null,\n    defaultPassword: localStorage.getItem('user') ? decryptData(localStorage.getItem('user')).defaultPassword : null,\n    defaultVirtualVisitId: '',\n    otpVerified: false,\n};\n\nconst settings = (state = initialSettings, action) => {\n    switch (action.type) {\n\n        case SIGNOUT_USER_SUCCESS: {\n            return {\n                ...state,\n                token: null,\n                authUser: null,\n                initURL: '',\n                isResetPassword: false,\n                socket: null,\n                otpVerified: false,\n                homeId: ''\n            }\n        }\n        case SET_USER_DATA: {\n            return {\n                ...state,\n                authUser: action.payload\n            }\n        }\n        case SET_USER_TOKEN: {\n            return {\n                ...state,\n                token: action.payload\n            }\n        }\n        case SET_USER_DEFAULT_PASSWORD: {\n            return {\n                ...state,\n                defaultPassword: action.payload\n            }\n        }\n\n        case SET_OTP_VERIFIED: {\n            return {\n                ...state,\n                otpVerified: action.payload\n            }\n        }\n\n        case REFRESH_TOKEN: {\n            return {\n                ...state,\n                token: action.payload\n            }\n        }\n        case SET_HOME_ID: {\n            return {\n                ...state,\n                homeId: action.payload\n            }\n        }\n        case SOCKET_SET: {\n            return {\n                ...state,\n                socket: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport default settings;\n"]},"metadata":{},"sourceType":"module"}