{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/MedReviewTodo/components/PrescriptionContainer.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport axios from '../../../services/api/services/common';\nimport { getPrescriptionDetail, performTodo, getPmrDetail } from '../../../services/api/routes/pmr';\nimport { PatientInfoBar, TodoActions, PendingTodo } from '../../../components/Todo';\nimport { Spin, LightBox, Select, Option } from '../../../components/common';\nimport { getPath } from '../../../util/todo';\nimport _ from 'lodash';\nimport { prescriptionFormCheck, todoUpdate, prescriptionUpdate } from '../../../services/socket/routes/todo';\nimport { TODO_CATEGORY, STATUS, SUB_CATEGORY } from '../../../constants/todo';\nimport { TYPE } from '../../../constants/prescription';\nimport { PMR_ORDER_LABEL, PMR_ORDER_COLOR, PMR_ORDER } from '../../../constants/pmr';\nimport { displayDate } from '../../../util/moment';\nimport NoData from '../../ResidentDetail/View/noData';\nimport PmrOrder from '../../PmrTodo/components/PmrOrder';\nconst ORDER_STATUS = PMR_ORDER.STATUS;\n\nconst PrescriptionContainer = props => {\n  const {\n    activeTodo,\n    socket,\n    authUser,\n    query\n  } = props;\n  const [loader, setLoader] = useState(false);\n  const [visibleViewer, setVisibleViewer] = useState(false);\n  const [actionLoader, setActionLoader] = useState(false);\n  const [detail, setDetail] = useState(null);\n  const [statusFilter, setStatusFilter] = useState('');\n  const [orderList, setOrderList] = useState([]);\n  const orderListRef = React.useRef([]);\n  useEffect(() => {\n    if (activeTodo) fetch();else setDetail(null);\n  }, [activeTodo]);\n  useEffect(() => {\n    //need to give ref of detail\n    if (!detail || !activeTodo) return;\n\n    if (socket) {\n      socket.on(todoUpdate, handleTodoUpdate);\n      return () => {\n        socket.off(todoUpdate);\n      };\n    }\n  }, [detail, activeTodo]);\n\n  const handleTodoUpdate = data => {\n    console.log(\"SOCKET handleTodoUpdate -> data\", data);\n\n    let length = _.size(data);\n\n    if (data && data.length && detail) {\n      if (length === 1) {\n        var _todo$pmr;\n\n        //to update detail of active todo only (broadcast purpose)\n        let todo = _.first(data);\n\n        if (activeTodo._id === ((_todo$pmr = todo.pmr) === null || _todo$pmr === void 0 ? void 0 : _todo$pmr._id)) {\n          // let allowed = false\n          // allowed = todo.participants.find(x => {\n          //     return x.userId === self.props.authUser.id && x.active\n          // })\n          // todo.allowed = !!allowed\n          setDetail(oldDetail => {\n            let newDetail = { ...oldDetail\n            };\n            let todoList = [...oldDetail.todos];\n\n            let todoIds = _.map(todoList, \"_id\");\n\n            if (_.includes(todoIds, todo._id)) {\n              if (!todo.isActive) {\n                let i = todoList.findIndex(x => x._id === todo._id);\n                todoList.splice(i, 1);\n              } else {\n                afterPerformTodo(todo);\n                return;\n              }\n            } else if (todo.isActive) todoList.push(todo);\n\n            newDetail.todos = todoList;\n            return newDetail;\n          });\n        }\n      }\n    }\n  };\n\n  const fetch = () => {\n    //fetch todo detail\n    if (actionLoader) setActionLoader(false);\n    setLoader(true);\n    const req = {\n      \"isOrderList\": true,\n      \"query\": {\n        \"fields\": [],\n        \"populate\": [{\n          \"homeAreaId\": [\"name\"]\n        }]\n      }\n    };\n    const {\n      method,\n      baseURL\n    } = getPmrDetail;\n    let url = getPmrDetail.url + (activeTodo === null || activeTodo === void 0 ? void 0 : activeTodo._id);\n    axios({\n      method,\n      url,\n      baseURL,\n      data: req\n    }).then(data => {\n      console.log(\"fetch -> data\", data);\n\n      if (data.code === 'OK') {\n        let newOrderList = filterOrders(data.data);\n        data.data.orderList = newOrderList;\n        orderListRef.current = data.data.orderList || [];\n        setDetail(data.data);\n        setOrderList(data.data.orderList);\n      }\n\n      setLoader(false);\n    }).catch(err => {\n      setLoader(false);\n    });\n  };\n\n  const filterOrders = pmrDetail => {\n    let cloned = [],\n        tempOriginal = [],\n        newOrders = [...pmrDetail.orderList];\n    newOrders.map(order => {\n      if (order.cloneFrom) {\n        cloned.push(order);\n      } else {\n        tempOriginal.push(order);\n      }\n    });\n    cloned = _.groupBy(cloned, 'cloneFrom');\n\n    if (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_1) {\n      let assig = [],\n          notAssig = [];\n      assig = tempOriginal.filter(x => x.nurseAcknowStatus1);\n      notAssig = tempOriginal.filter(x => !x.nurseAcknowStatus1);\n      tempOriginal = notAssig.concat(assig);\n    } else if (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_2) {\n      let assig = [],\n          notAssig = [];\n      assig = tempOriginal.filter(x => x.nurseAcknowStatus2);\n      notAssig = tempOriginal.filter(x => !x.nurseAcknowStatus2);\n      tempOriginal = notAssig.concat(assig);\n    } else if (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.PMR) {\n      let assig = [],\n          notAssig = [];\n      assig = tempOriginal.filter(x => {\n        let status = cloned[x._id] ? cloned[x._id][0].status : x.status;\n        return status === PMR_ORDER.STATUS[\"CONTINUE\"] || status === PMR_ORDER.STATUS[\"HOLD\"] || status === PMR_ORDER.STATUS[\"DISCONTINUE\"];\n      });\n      notAssig = tempOriginal.filter(x => !assig.includes(x));\n      tempOriginal = notAssig.concat(assig);\n    }\n\n    tempOriginal = tempOriginal.map(order => {\n      let clonedOrders = [],\n          clonedOrderObj = null;\n      order.isClonedExist = cloned[order._id] ? true : false;\n      clonedOrders.push(order);\n\n      if (cloned[order._id]) {\n        //order.isClonedExist = true\n        clonedOrderObj = cloned[order._id][0];\n        clonedOrders = clonedOrders.concat(cloned[order._id]);\n      }\n\n      order.clonedOrders = clonedOrders;\n      return order;\n    });\n    return tempOriginal;\n  };\n\n  const handleViewPresc = visible => {\n    setVisibleViewer(visible);\n  };\n\n  const handlePerformTodo = request => {\n    setActionLoader(true);\n    axios({ ...performTodo,\n      data: request\n    }).then(data => {\n      if (data.code === 'OK') {\n        afterPerformTodo(data.data);\n      }\n\n      setActionLoader(false);\n    }).catch(err => {\n      setActionLoader(false);\n    });\n  };\n\n  const afterPerformTodo = todo => {\n    //to update detail of active todo only\n    // let allowed = false\n    // allowed = todo.participants.find(x => {\n    //     return x.userId === self.props.authUser.id && x.active\n    // })\n    // todo.allowed = !!allowed\n    let newDetail = { ...detail\n    };\n    newDetail.todos = _.map(detail.todos, function (td) {\n      return todo._id === td._id ? { ...td,\n        status: todo.status,\n        completedAt: todo.completedAt,\n        completedBy: todo.completedBy,\n        notesCount: todo.notesCount\n      } : td;\n    });\n    setDetail(newDetail);\n  };\n\n  const handlePrescribedFormUpdate = data => {\n    console.log(\"SOCKET PrescribedFormUpdate\", data);\n\n    if (data._id === activeTodo._id) {\n      setDetail(oldDetail => {\n        let newDetail = { ...oldDetail\n        };\n        newDetail.attachments = data.attachments;\n        newDetail.inProcess = data.inProcess;\n        return newDetail;\n      });\n    }\n  };\n\n  const handleOrderStatusChange = (status = '') => {\n    let filteredOrders = [...orderListRef.current];\n\n    if (status !== '') {\n      filteredOrders = filteredOrders.filter(order => order.status == status);\n    }\n\n    setStatusFilter(status);\n    setOrderList(filteredOrders);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tododetails \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, loader ? /*#__PURE__*/React.createElement(Spin, {\n    spinning: loader,\n    str: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 26\n    }\n  }) : detail ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PatientInfoBar, {\n    patient: detail.patientId,\n    orderNumber: detail.orderNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo-listing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \" listingOverflow\",\n    style: {\n      width: '49.4%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      marginBottom: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: statusFilter,\n    onChange: handleOrderStatusChange,\n    allowClear: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 45\n    }\n  }, \" All \"), Object.keys(ORDER_STATUS).filter(x => x === 'HOLD' || x === 'DISCONTINUE' || x === 'CONTINUE').map(v => /*#__PURE__*/React.createElement(Option, {\n    key: ORDER_STATUS[v],\n    value: ORDER_STATUS[v],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 53\n    }\n  }, v.replace(/_/g, \" \"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form\",\n    style: {\n      width: '100%',\n      overflowY: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"prep_right_wrap\",\n    style: {\n      marginLeft: 0,\n      width: '100%',\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 41\n    }\n  }, orderList.length > 0 ? orderList === null || orderList === void 0 ? void 0 : orderList.map(order => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resident-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 64\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-Nurse-prep resident-detail rate-box\",\n      style: {\n        width: '100%',\n        borderBottom: '1px solid #d4d4d4'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 61\n      }\n    }, order.clonedOrders.map((corder, orderIndex) => {\n      return /*#__PURE__*/React.createElement(PmrOrder, {\n        key: corder._id,\n        pmrOrder: corder,\n        detail: detail,\n        query: {},\n        authUser: authUser,\n        viewNotes: true,\n        isMedTodo: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 80\n        }\n      });\n    }))); // let pmrLabel = { label: '', color: '' }\n    // if (pmrOrder.label) {\n    //     pmrLabel.color = pmrOrder.label === PMR_ORDER_LABEL.CHANGED\n    //         ? PMR_ORDER_COLOR.TAG.CHANGED\n    //         : pmrOrder.label === PMR_ORDER_LABEL.NEW\n    //             ? PMR_ORDER_COLOR.TAG.NEW\n    //             : pmrOrder.label === PMR_ORDER_LABEL.NEW_EDIT\n    //                 ? PMR_ORDER_COLOR.TAG.NEW_EDIT\n    //                 : \"\"\n    // }\n    // Object.keys(PMR_ORDER_LABEL).map(label => {\n    //     return PMR_ORDER_LABEL[label] === pmrOrder.label\n    //         ? pmrLabel.label = label.replace(/_/g, \" \")\n    //         : \"\";\n    // })\n    // return (\n    //     <div className='resident-row'>\n    //         <div className='resident-detail rate-box' style={{ width: '100%', borderBottom: '1px solid #d4d4d4' }}>\n    //             <div className=\"inner-res-block d-flex\">\n    //                 <div className=\"resident-desc-box w-d-50\">\n    //                     <span className=\"main\">Order</span>\n    //                     <span className=\"sub\">\n    //                         {pmrOrder.drug?.name}\n    //                         <p className=\"order-tag red-new-tag\">{pmrLabel.label}</p></span>\n    //                 </div>\n    //                 <div className=\"resident-desc-box w-d-25\">\n    //                     <span className=\"main\">Rx No</span>\n    //                     <span className=\"sub\">   {pmrOrder.krollRxNo || pmrOrder.orderNumber}</span>\n    //                 </div>\n    //                 <div className=\"resident-desc-box w-d-25\">\n    //                     <span className=\"main\">DIN</span>\n    //                     <span className=\"sub\">{pmrOrder.din || \"NA\"}</span>\n    //                 </div>\n    //             </div>\n    //             <div className=\"inner-res-block d-flex\">\n    //                 <div className=\"resident-desc-box w-d-50\">\n    //                     <span className=\"main\">Equiv. to</span>\n    //                     <span className=\"sub\">{pmrOrder.drug?.equivTo}</span>\n    //                 </div>\n    //                 <div className=\"resident-desc-box w-d-25\">\n    //                     <span className=\"main\">Last Fill</span>\n    //                     <span className=\"sub\">{pmrOrder.lastFillDate &&\n    //                         pmrOrder.krollStatus !== \"RxStatus_Unfill\"\n    //                         ? displayDate(pmrOrder.lastFillDate)\n    //                         : \" NA \"}</span>\n    //                 </div>\n    //                 <div className=\"resident-desc-box w-d-25\">\n    //                     <span className=\"main\">Exp</span>\n    //                     <span className=\"sub\">  {pmrOrder.luCode?.[0]?.expiryDateString || 'NA'}</span>\n    //                 </div>\n    //             </div>\n    //             <div className=\"inner-res-block d-flex\">\n    //                 <div className=\"resident-desc-box w-d-50\">\n    //                     <span className=\"main\">Source</span>\n    //                     <span className=\"sub\">{pmrOrder.source}</span>\n    //                 </div>\n    //                 <div className=\"resident-desc-box w-d-25\">\n    //                     <span className=\"main\">LU code</span>\n    //                     <span className=\"sub\">NA</span>\n    //                 </div>\n    //                 <div className=\"resident-desc-box w-d-25\">\n    //                     <span className=\"main\">Indication</span>\n    //                     <span className=\"sub\">{pmrOrder.indication || '-'}</span>\n    //                 </div>\n    //             </div>\n    //             <div className=\"inner-res-block d-flex\">\n    //                 <div className=\"resident-desc-box w-d-50\">\n    //                     <span className=\"main\">Direction</span>\n    //                     <span className=\"sub\">\n    //                         {pmrOrder.sig || pmrOrder.direction}\n    //                     </span>\n    //                 </div>\n    //                 <div className=\"resident-desc-box w-d-25\">\n    //                 </div>\n    //                 <div className=\"resident-desc-box w-d-25\">\n    //                     <span className=\"main\"></span>\n    //                     <span className=\"sub\"></span>\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     </div>\n    // )\n  }) : /*#__PURE__*/React.createElement(NoData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 53\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listing-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TodoActions, {\n    category: TODO_CATEGORY.MED_REVIEW,\n    todoList: detail.todos,\n    loading: actionLoader,\n    onPerformTodo: handlePerformTodo,\n    authUser: authUser,\n    detail: detail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 37\n    }\n  })))) : null));\n};\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser,\n    socket\n  } = auth;\n  return {\n    authUser,\n    socket\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(PrescriptionContainer));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/MedReviewTodo/components/PrescriptionContainer.js"],"names":["React","Component","useEffect","useState","connect","withRouter","axios","getPrescriptionDetail","performTodo","getPmrDetail","PatientInfoBar","TodoActions","PendingTodo","Spin","LightBox","Select","Option","getPath","_","prescriptionFormCheck","todoUpdate","prescriptionUpdate","TODO_CATEGORY","STATUS","SUB_CATEGORY","TYPE","PMR_ORDER_LABEL","PMR_ORDER_COLOR","PMR_ORDER","displayDate","NoData","PmrOrder","ORDER_STATUS","PrescriptionContainer","props","activeTodo","socket","authUser","query","loader","setLoader","visibleViewer","setVisibleViewer","actionLoader","setActionLoader","detail","setDetail","statusFilter","setStatusFilter","orderList","setOrderList","orderListRef","useRef","fetch","on","handleTodoUpdate","off","data","console","log","length","size","todo","first","_id","pmr","oldDetail","newDetail","todoList","todos","todoIds","map","includes","isActive","i","findIndex","x","splice","afterPerformTodo","push","req","method","baseURL","url","then","code","newOrderList","filterOrders","current","catch","err","pmrDetail","cloned","tempOriginal","newOrders","order","cloneFrom","groupBy","subCategory","MED_REVIEW","NURSE_REVIEW_1","assig","notAssig","filter","nurseAcknowStatus1","concat","NURSE_REVIEW_2","nurseAcknowStatus2","PMR","status","clonedOrders","clonedOrderObj","isClonedExist","handleViewPresc","visible","handlePerformTodo","request","td","completedAt","completedBy","notesCount","handlePrescribedFormUpdate","attachments","inProcess","handleOrderStatusChange","filteredOrders","patientId","orderNumber","width","marginBottom","Object","keys","v","replace","overflowY","marginLeft","padding","borderBottom","corder","orderIndex","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport axios from '../../../services/api/services/common'\nimport { getPrescriptionDetail, performTodo, getPmrDetail } from '../../../services/api/routes/pmr'\nimport { PatientInfoBar, TodoActions, PendingTodo } from '../../../components/Todo';\nimport { Spin, LightBox, Select, Option } from '../../../components/common'\nimport { getPath } from '../../../util/todo'\nimport _ from 'lodash'\nimport { prescriptionFormCheck, todoUpdate, prescriptionUpdate } from '../../../services/socket/routes/todo';\n\nimport { TODO_CATEGORY, STATUS, SUB_CATEGORY } from '../../../constants/todo';\nimport { TYPE } from '../../../constants/prescription'\nimport { PMR_ORDER_LABEL, PMR_ORDER_COLOR, PMR_ORDER } from '../../../constants/pmr';\nimport { displayDate } from '../../../util/moment';\nimport NoData from '../../ResidentDetail/View/noData';\nimport PmrOrder from '../../PmrTodo/components/PmrOrder';\nconst ORDER_STATUS = PMR_ORDER.STATUS;\nconst PrescriptionContainer = props => {\n\n    const { activeTodo, socket, authUser, query } = props\n    const [loader, setLoader] = useState(false)\n    const [visibleViewer, setVisibleViewer] = useState(false)\n    const [actionLoader, setActionLoader] = useState(false)\n    const [detail, setDetail] = useState(null);\n    const [statusFilter, setStatusFilter] = useState('');\n    const [orderList, setOrderList] = useState([]);\n    const orderListRef = React.useRef([])\n\n    useEffect(() => {\n        if (activeTodo)\n            fetch()\n        else\n            setDetail(null)\n    }, [activeTodo])\n\n    useEffect(() => {\n        //need to give ref of detail\n        if (!detail || !activeTodo)\n            return\n        if (socket) {\n            socket.on(todoUpdate, handleTodoUpdate)\n            return () => {\n                socket.off(todoUpdate);\n            };\n        }\n    }, [detail, activeTodo])\n\n    const handleTodoUpdate = (data) => {\n        console.log(\"SOCKET handleTodoUpdate -> data\", data)\n        let length = _.size(data)\n        if (data && data.length && detail) {\n            if (length === 1) {\n                //to update detail of active todo only (broadcast purpose)\n                let todo = _.first(data)\n                if (activeTodo._id === todo.pmr?._id) {\n                    // let allowed = false\n                    // allowed = todo.participants.find(x => {\n                    //     return x.userId === self.props.authUser.id && x.active\n                    // })\n                    // todo.allowed = !!allowed\n\n                    setDetail(oldDetail => {\n                        let newDetail = { ...oldDetail }\n                        let todoList = [...oldDetail.todos];\n                        let todoIds = _.map(todoList, \"_id\")\n                        if (_.includes(todoIds, todo._id)) {\n                            if (!todo.isActive) {\n                                let i = todoList.findIndex(x => x._id === todo._id)\n                                todoList.splice(i, 1)\n                            } else {\n                                afterPerformTodo(todo)\n                                return\n                            }\n                        } else if (todo.isActive)\n                            todoList.push(todo);\n                        newDetail.todos = todoList\n                        return newDetail\n                    })\n\n                }\n            }\n        }\n    }\n\n    const fetch = () => {\n        //fetch todo detail\n        if (actionLoader)\n            setActionLoader(false)\n        setLoader(true)\n        const req = {\n            \"isOrderList\": true,\n            \"query\": {\n                \"fields\": [],\n                \"populate\": [\n                    {\n                        \"homeAreaId\": [\n                            \"name\"\n                        ]\n                    }\n                ]\n            }\n        };\n        const { method, baseURL } = getPmrDetail\n        let url = getPmrDetail.url + activeTodo?._id\n        axios({ method, url, baseURL, data: req }).then(data => {\n            console.log(\"fetch -> data\", data)\n            if (data.code === 'OK') {\n                let newOrderList = filterOrders(data.data)\n                data.data.orderList = newOrderList\n                orderListRef.current = data.data.orderList || [];\n                setDetail(data.data);\n                setOrderList(data.data.orderList)\n            }\n            setLoader(false)\n        }).catch(err => {\n            setLoader(false)\n        })\n    }\n\n    const filterOrders = (pmrDetail) => {\n        let cloned = [], tempOriginal = [], newOrders = [...pmrDetail.orderList];\n        newOrders.map(order => {\n            if (order.cloneFrom) {\n                cloned.push(order)\n            } else {\n                tempOriginal.push(order)\n            }\n        })\n        cloned = _.groupBy(cloned, 'cloneFrom');\n\n        if (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_1) {\n            let assig = [], notAssig = []\n            assig = tempOriginal.filter(x => x.nurseAcknowStatus1)\n            notAssig = tempOriginal.filter(x => !x.nurseAcknowStatus1)\n            tempOriginal = notAssig.concat(assig)\n        } else if (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_2) {\n            let assig = [], notAssig = []\n            assig = tempOriginal.filter(x => x.nurseAcknowStatus2)\n            notAssig = tempOriginal.filter(x => !x.nurseAcknowStatus2)\n            tempOriginal = notAssig.concat(assig)\n        } else if (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.PMR) {\n            let assig = [], notAssig = []\n            assig = tempOriginal.filter(x => {\n                let status = cloned[x._id] ? cloned[x._id][0].status : x.status\n                return status === PMR_ORDER.STATUS[\"CONTINUE\"] ||\n                    status === PMR_ORDER.STATUS[\"HOLD\"] || status === PMR_ORDER.STATUS[\"DISCONTINUE\"]\n            })\n            notAssig = tempOriginal.filter(x => !assig.includes(x));\n            tempOriginal = notAssig.concat(assig)\n        }\n\n        tempOriginal = tempOriginal.map(order => {\n            let clonedOrders = [], clonedOrderObj = null\n            order.isClonedExist = cloned[order._id] ? true : false\n            clonedOrders.push(order)\n            if (cloned[order._id]) {\n                //order.isClonedExist = true\n                clonedOrderObj = cloned[order._id][0]\n                clonedOrders = clonedOrders.concat(cloned[order._id])\n\n            }\n            order.clonedOrders = clonedOrders;\n            return order\n        });\n        return tempOriginal\n    }\n\n    const handleViewPresc = (visible) => {\n        setVisibleViewer(visible)\n    }\n\n    const handlePerformTodo = (request) => {\n        setActionLoader(true)\n        axios({ ...performTodo, data: request }).then(data => {\n            if (data.code === 'OK') {\n                afterPerformTodo(data.data)\n            }\n            setActionLoader(false)\n        }).catch(err => {\n            setActionLoader(false)\n        })\n    }\n\n    const afterPerformTodo = (todo) => {\n        //to update detail of active todo only\n        // let allowed = false\n        // allowed = todo.participants.find(x => {\n        //     return x.userId === self.props.authUser.id && x.active\n        // })\n        // todo.allowed = !!allowed\n        let newDetail = { ...detail }\n        newDetail.todos = _.map(detail.todos, function (td) {\n            return todo._id === td._id\n                ? {\n                    ...td,\n                    status: todo.status,\n                    completedAt: todo.completedAt,\n                    completedBy: todo.completedBy,\n                    notesCount: todo.notesCount,\n                }\n                : td;\n        });\n        setDetail(newDetail)\n    }\n\n    const handlePrescribedFormUpdate = data => {\n        console.log(\"SOCKET PrescribedFormUpdate\", data)\n        if (data._id === activeTodo._id) {\n            setDetail(oldDetail => {\n                let newDetail = { ...oldDetail }\n                newDetail.attachments = data.attachments\n                newDetail.inProcess = data.inProcess\n                return newDetail\n            })\n        }\n    }\n\n    const handleOrderStatusChange = (status = '') => {\n        let filteredOrders = [...orderListRef.current]\n        if (status !== '') {\n            filteredOrders = filteredOrders.filter(order => order.status == status);\n        }\n        setStatusFilter(status);\n        setOrderList(filteredOrders)\n    }\n\n    return <>\n        <div className=\"tododetails \">\n            {\n                loader ? <Spin spinning={loader} str=\"center\" /> :\n                    detail ?\n                        <>\n                            <PatientInfoBar patient={detail.patientId} orderNumber={detail.orderNumber} />\n                            <div className=\"todo-listing\">\n                                <div className=\" listingOverflow\" style={{ width: '49.4%' }}>\n                                    <div style={{ width: '100%', marginBottom: 15 }}>\n                                        <Select\n                                            value={statusFilter}\n                                            onChange={handleOrderStatusChange}\n                                            allowClear\n                                        >\n                                            <Option value={''} > All </Option>\n                                            {Object.keys(ORDER_STATUS)\n                                                .filter(x => x === 'HOLD' || x === 'DISCONTINUE' || x === 'CONTINUE')\n                                                .map(v => (\n                                                    <Option\n                                                        key={ORDER_STATUS[v]}\n                                                        value={ORDER_STATUS[v]}\n                                                    >\n                                                        {v.replace(/_/g, \" \")}\n                                                    </Option>\n                                                ))}\n                                        </Select>\n                                    </div>\n                                    <div className=\"form\" style={{ width: '100%', overflowY: 'auto' }}>\n                                        <div className='prep_right_wrap' style={{ marginLeft: 0, width: '100%', padding: 0 }}>\n\n                                            {\n                                                orderList.length > 0 ?\n                                                    orderList?.map(order => {\n                                                        return <div className='resident-row'>\n                                                            <div className=\"right-Nurse-prep resident-detail rate-box\"\n                                                                style={{ width: '100%', borderBottom: '1px solid #d4d4d4' }}>\n                                                                {\n                                                                    order.clonedOrders.map((corder, orderIndex) => {\n                                                                        return <PmrOrder\n                                                                            key={corder._id}\n                                                                            pmrOrder={corder}\n                                                                            detail={detail}\n                                                                            query={{}}\n                                                                            authUser={authUser}\n                                                                            viewNotes={true}\n                                                                            isMedTodo={true}\n                                                                        />\n                                                                    })\n                                                                }\n                                                            </div>\n                                                        </div>\n                                                        // let pmrLabel = { label: '', color: '' }\n                                                        // if (pmrOrder.label) {\n\n                                                        //     pmrLabel.color = pmrOrder.label === PMR_ORDER_LABEL.CHANGED\n                                                        //         ? PMR_ORDER_COLOR.TAG.CHANGED\n                                                        //         : pmrOrder.label === PMR_ORDER_LABEL.NEW\n                                                        //             ? PMR_ORDER_COLOR.TAG.NEW\n                                                        //             : pmrOrder.label === PMR_ORDER_LABEL.NEW_EDIT\n                                                        //                 ? PMR_ORDER_COLOR.TAG.NEW_EDIT\n                                                        //                 : \"\"\n                                                        // }\n\n                                                        // Object.keys(PMR_ORDER_LABEL).map(label => {\n                                                        //     return PMR_ORDER_LABEL[label] === pmrOrder.label\n                                                        //         ? pmrLabel.label = label.replace(/_/g, \" \")\n                                                        //         : \"\";\n                                                        // })\n                                                        // return (\n                                                        //     <div className='resident-row'>\n                                                        //         <div className='resident-detail rate-box' style={{ width: '100%', borderBottom: '1px solid #d4d4d4' }}>\n                                                        //             <div className=\"inner-res-block d-flex\">\n                                                        //                 <div className=\"resident-desc-box w-d-50\">\n                                                        //                     <span className=\"main\">Order</span>\n                                                        //                     <span className=\"sub\">\n                                                        //                         {pmrOrder.drug?.name}\n                                                        //                         <p className=\"order-tag red-new-tag\">{pmrLabel.label}</p></span>\n                                                        //                 </div>\n                                                        //                 <div className=\"resident-desc-box w-d-25\">\n                                                        //                     <span className=\"main\">Rx No</span>\n                                                        //                     <span className=\"sub\">   {pmrOrder.krollRxNo || pmrOrder.orderNumber}</span>\n                                                        //                 </div>\n                                                        //                 <div className=\"resident-desc-box w-d-25\">\n                                                        //                     <span className=\"main\">DIN</span>\n                                                        //                     <span className=\"sub\">{pmrOrder.din || \"NA\"}</span>\n                                                        //                 </div>\n                                                        //             </div>\n                                                        //             <div className=\"inner-res-block d-flex\">\n                                                        //                 <div className=\"resident-desc-box w-d-50\">\n                                                        //                     <span className=\"main\">Equiv. to</span>\n                                                        //                     <span className=\"sub\">{pmrOrder.drug?.equivTo}</span>\n                                                        //                 </div>\n                                                        //                 <div className=\"resident-desc-box w-d-25\">\n                                                        //                     <span className=\"main\">Last Fill</span>\n                                                        //                     <span className=\"sub\">{pmrOrder.lastFillDate &&\n                                                        //                         pmrOrder.krollStatus !== \"RxStatus_Unfill\"\n                                                        //                         ? displayDate(pmrOrder.lastFillDate)\n                                                        //                         : \" NA \"}</span>\n                                                        //                 </div>\n                                                        //                 <div className=\"resident-desc-box w-d-25\">\n                                                        //                     <span className=\"main\">Exp</span>\n                                                        //                     <span className=\"sub\">  {pmrOrder.luCode?.[0]?.expiryDateString || 'NA'}</span>\n                                                        //                 </div>\n                                                        //             </div>\n                                                        //             <div className=\"inner-res-block d-flex\">\n                                                        //                 <div className=\"resident-desc-box w-d-50\">\n                                                        //                     <span className=\"main\">Source</span>\n                                                        //                     <span className=\"sub\">{pmrOrder.source}</span>\n                                                        //                 </div>\n                                                        //                 <div className=\"resident-desc-box w-d-25\">\n                                                        //                     <span className=\"main\">LU code</span>\n                                                        //                     <span className=\"sub\">NA</span>\n                                                        //                 </div>\n                                                        //                 <div className=\"resident-desc-box w-d-25\">\n                                                        //                     <span className=\"main\">Indication</span>\n                                                        //                     <span className=\"sub\">{pmrOrder.indication || '-'}</span>\n                                                        //                 </div>\n                                                        //             </div>\n                                                        //             <div className=\"inner-res-block d-flex\">\n                                                        //                 <div className=\"resident-desc-box w-d-50\">\n                                                        //                     <span className=\"main\">Direction</span>\n                                                        //                     <span className=\"sub\">\n                                                        //                         {pmrOrder.sig || pmrOrder.direction}\n                                                        //                     </span>\n                                                        //                 </div>\n                                                        //                 <div className=\"resident-desc-box w-d-25\">\n\n                                                        //                 </div>\n                                                        //                 <div className=\"resident-desc-box w-d-25\">\n                                                        //                     <span className=\"main\"></span>\n                                                        //                     <span className=\"sub\"></span>\n                                                        //                 </div>\n                                                        //             </div>\n                                                        //         </div>\n                                                        //     </div>\n                                                        // )\n                                                    })\n                                                    :\n                                                    <NoData />\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className='listing-right'>\n                                    <TodoActions\n                                        category={TODO_CATEGORY.MED_REVIEW}\n                                        todoList={detail.todos}\n                                        loading={actionLoader}\n                                        onPerformTodo={handlePerformTodo}\n                                        authUser={authUser}\n                                        detail={detail}\n                                    />\n                                </div>\n                            </div></>\n                        : null\n            }\n        </div >\n    </>\n\n}\nconst mapStateToProps = ({ auth }) => {\n    const { authUser, socket } = auth;\n    return { authUser, socket };\n};\nexport default withRouter(connect(mapStateToProps)(PrescriptionContainer));"]},"metadata":{},"sourceType":"module"}