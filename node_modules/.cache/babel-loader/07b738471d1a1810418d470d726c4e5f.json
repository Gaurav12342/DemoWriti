{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/User/Components/AddUser/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport queryString from \"query-string\";\nimport { connect } from \"react-redux\";\nimport { createForm } from \"rc-form\";\nimport { addUser, editUser, searchExistingUser, assignHomeOrPharmacy } from \"../../../../services/api/routes/user\";\nimport { masterPaginate } from \"../../../../services/api/routes/master\";\nimport { USER_TYPE, MAPPED_USER_TYPE } from \"../../../../constants/User\";\nimport axios from \"../../../../services/api/config\";\nimport AddUser from \"./AddUser\";\nimport { pharmacyPaginate, OrganizationHomePaginate } from \"../../../../services/api/routes/customer\";\nimport { Toast } from \"../../../../components/common\";\nimport routes from \"../../../../routes/constant\";\nimport { reGenerateToken } from \"../../../../util/RegenToken\";\nimport { CLIENTELE_TYPE } from \"../../../../constants/Customer\";\nimport { isInvalidTokenError } from \"../../../../util/common\";\nimport { isPharmacyUser } from '../../../../constants/User';\n\nconst _ = require(\"lodash\");\n\nconst loginUser = {\n  type: 1\n};\n\nfunction AddUserMain(props) {\n  var _authUser$pharmacyId;\n\n  const [type, setType] = useState(undefined);\n  const [selectedType, setSelectedType] = useState(undefined);\n  const [customerType, setCustomerType] = useState(undefined);\n  const [userRoleOptions, setUserRoleOptions] = useState({});\n  const [subParentList, setSubParentList] = useState([]);\n  const [showUploader, setShowUploader] = useState(false);\n  const [organizationList, setOrganizationList] = useState([]);\n  const [homeList, setHomeList] = useState([]);\n  const [pharmacyList, setPharmacyList] = useState([]);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [isUploadVisible, setUploadVisible] = useState(false);\n  const [editId, setEditId] = useState();\n  const [designationData, setDesignationData] = useState([]);\n  const [isDisable, setIsDisable] = useState(false);\n  const [existingUserId, setExistingUserId] = useState(undefined);\n  const [profilePic, setProfilePic] = useState(\"\");\n  const [accessPermission, setAccessPermission] = useState(undefined);\n  const [editData, setEditData] = useState({});\n  const {\n    location,\n    form,\n    authUser,\n    homeId,\n    history\n  } = props;\n  const pharmacyId = (authUser === null || authUser === void 0 ? void 0 : authUser.type) === USER_TYPE.PHARMACY.ADMIN ? authUser === null || authUser === void 0 ? void 0 : (_authUser$pharmacyId = authUser.pharmacyId) === null || _authUser$pharmacyId === void 0 ? void 0 : _authUser$pharmacyId._id : undefined;\n  useEffect(() => {\n    if (location.search) {\n      const query = queryString.parse(location.search);\n\n      if (query.type) {\n        setType(query.type);\n        setSelectedType(MAPPED_USER_TYPE[query.type]);\n        setCustomerType(MAPPED_USER_TYPE[query.type]);\n      }\n\n      if (query.isEdit) {\n        setIsEdit(query.isEdit);\n      }\n\n      if (query.id) {\n        setEditId(query.id);\n      }\n    }\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (customerType && Object.keys(userRoleOptions).length === 0) {\n      manageRoleOptions();\n    }\n\n    if (customerType === USER_TYPE.HOME.ADMIN) {\n      fetchDesignation();\n    }\n  }, [customerType]);\n  useEffect(() => {\n    if (isEdit) {\n      fetchEditData();\n    }\n  }, [isEdit]);\n\n  const fetchEditData = () => {\n    if (editId) {\n      var _authUser$homeId, _authUser$homeId2;\n\n      let editApi = addUser.url + \"/\" + editId;\n      axios({\n        url: editApi,\n        method: 'GET',\n        baseURL: addUser.baseURL,\n        headers: {\n          homeId: (_authUser$homeId = authUser.homeId) === null || _authUser$homeId === void 0 ? void 0 : _authUser$homeId._id,\n          homeIdentifier: (_authUser$homeId2 = authUser.homeId) === null || _authUser$homeId2 === void 0 ? void 0 : _authUser$homeId2.homeIdentifier,\n          isCustom: true\n        }\n      }).then(({\n        data\n      }) => {\n        let tempData = data.data;\n\n        if (tempData) {\n          var _tempData$homeId, _tempData$homeId$subs, _tempData$homeId2, _tempData$homeId2$des;\n\n          setEditData(tempData);\n          setSelectedType(tempData.type);\n\n          const mobileData = _.find(tempData.mobiles, {\n            isPrimary: true\n          });\n\n          let mobile;\n\n          if (mobileData === null || mobileData === void 0 ? void 0 : mobileData.mobile.startsWith(\"+1\")) {\n            mobile = mobileData === null || mobileData === void 0 ? void 0 : mobileData.mobile.substring(2, mobileData === null || mobileData === void 0 ? void 0 : mobileData.mobile.length);\n          } else {\n            mobile = mobileData === null || mobileData === void 0 ? void 0 : mobileData.mobile;\n          }\n\n          let value = { ...tempData,\n            emails: (tempData === null || tempData === void 0 ? void 0 : tempData.emails) && tempData.emails.length ? tempData.emails[0].email : \"\",\n            mobiles: mobile,\n            // mobiles: tempData?.mobiles && tempData.mobiles.length ? tempData.mobiles[0].mobile.slice(2) : '',\n            subscriptionRoleGroup: (_tempData$homeId = tempData.homeId) === null || _tempData$homeId === void 0 ? void 0 : (_tempData$homeId$subs = _tempData$homeId.subscriptionRoleGroup) === null || _tempData$homeId$subs === void 0 ? void 0 : _tempData$homeId$subs._id,\n            designationId: (_tempData$homeId2 = tempData.homeId) === null || _tempData$homeId2 === void 0 ? void 0 : (_tempData$homeId2$des = _tempData$homeId2.designationId) === null || _tempData$homeId2$des === void 0 ? void 0 : _tempData$homeId2$des._id\n          };\n          form.setFieldsValue(value);\n        }\n      });\n    }\n  };\n\n  const fetchData = () => {\n    fetchPharmacy();\n    const request = {\n      type: CLIENTELE_TYPE.ORGANIZATION\n    };\n    fetchOrganizationAndHomes(CLIENTELE_TYPE.ORGANIZATION, request);\n  };\n\n  const fetchDesignation = () => {\n    if (Object.keys(designationData).length === 0) {\n      let data = {\n        query: {\n          // select: \"parentId code name isActive description slug _id updatedAt createdAt\",\n          find: {\n            isActive: true,\n            code: \"DESIGNATION_TYPE\"\n          },\n          populate: [{\n            subMaster: null,\n            match: {\n              isActive: true\n            }\n          }]\n        }\n      };\n      axios({ ...masterPaginate,\n        data\n      }).then(({\n        data\n      }) => {\n        if (data.code === \"OK\") {\n          var _data$data, _data$data$data;\n\n          if ((data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : (_data$data$data = _data$data.data) === null || _data$data$data === void 0 ? void 0 : _data$data$data.length) > 0) {\n            if (data.data.data[0].subMaster && data.data.data[0].subMaster.length) {\n              setDesignationData(data.data.data[0].subMaster);\n            }\n          }\n        }\n      });\n    }\n  };\n\n  const fetchPharmacy = () => {\n    const {\n      method,\n      url,\n      baseURL\n    } = pharmacyPaginate;\n    axios({\n      url,\n      method,\n      baseURL,\n      data: {\n        query: {\n          find: {\n            isActive: true\n          }\n        }\n      }\n    }).then(({\n      data\n    }) => {\n      if (data.code == \"OK\") {\n        var _data$data2, _data$data2$data;\n\n        if (data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : (_data$data2$data = _data$data2.data) === null || _data$data2$data === void 0 ? void 0 : _data$data2$data.length) {\n          data.data.data = data.data.data.filter(obj => obj.isActive);\n          setPharmacyList(data.data.data);\n        }\n      }\n    });\n  };\n\n  const fetchOrganizationAndHomes = (isFor, request = {}) => {\n    const {\n      method,\n      url,\n      baseURL\n    } = OrganizationHomePaginate;\n    axios({\n      url,\n      method,\n      data: {\n        query: { ...request,\n          find: {\n            type: CLIENTELE_TYPE.ORGANIZATION,\n            isActive: true\n          }\n        }\n      },\n      baseURL\n    }).then(({\n      data\n    }) => {\n      if (data.code == \"OK\") {\n        if (isFor === CLIENTELE_TYPE.ORGANIZATION) {\n          setOrganizationList(data.data.data);\n        } else if (isFor === USER_TYPE.HOME.ADMIN) {\n          data.data.data = data.data.data.filter(obj => obj.isActive);\n          setHomeList(data.data.data);\n        }\n      }\n    });\n  };\n\n  const manageRoleOptions = () => {\n    let userRoleOptions = {};\n    Object.keys(USER_TYPE).forEach(key => {\n      Object.keys(USER_TYPE[key]).forEach(subkey => {\n        if (USER_TYPE[key][subkey] === customerType) {\n          userRoleOptions[key] = _.cloneDeep(USER_TYPE[key]);\n\n          if (USER_TYPE[key][subkey] === USER_TYPE.ADMIN.SUPER) {\n            delete userRoleOptions[key][subkey];\n          }\n        }\n      });\n    });\n    setUserRoleOptions(userRoleOptions);\n\n    if (customerType === USER_TYPE.ADMIN.SUPER) {\n      form.setFieldsValue({\n        type: USER_TYPE.ADMIN.GENERAL\n      });\n    } else {\n      form.setFieldsValue({\n        type: customerType\n      });\n    }\n  };\n\n  const handleUploaderChange = action => {\n    setShowUploader(action);\n  };\n\n  const handleAddUser = () => {\n    form.validateFields((error, value) => {\n      if (error && !existingUserId) {\n        return;\n      }\n\n      setBtnLoading(true);\n      let {\n        method,\n        url,\n        baseURL\n      } = existingUserId ? assignHomeOrPharmacy : isEdit ? editUser : addUser;\n\n      if (existingUserId) {\n        value = {\n          is_assign: true,\n          homeId: homeId,\n          userId: existingUserId\n        };\n      } else {\n        value = { ...value,\n          emails: value.emails ? [{\n            email: value.emails,\n            isPrimary: true\n          }] : null,\n          mobiles: value.mobiles ? [{\n            mobile: '+1' + value.mobiles,\n            isPrimary: true\n          }] : null,\n          homeId: homeId // subscriptionRoleGroup: \"5f6314e009a7353d9848652c\",\n          // subscriptionRoleGroup: accessPermission,\n\n        };\n      }\n\n      if ([USER_TYPE.ADMIN.SUPER, USER_TYPE.ADMIN.GENERAL].indexOf(customerType) >= 0) {\n        delete value.homeId;\n      }\n\n      if (profilePic) {\n        value.image = profilePic;\n      }\n\n      if (customerType === USER_TYPE.HOME.ADMIN) {\n        value.homeId = homeId;\n      }\n\n      if (customerType === USER_TYPE.PHARMACY.ADMIN) {\n        value.pharmacyId = isPharmacyUser(authUser === null || authUser === void 0 ? void 0 : authUser.type) ? pharmacyId : value.pharmacyId; // value.pharmacyId\n\n        delete value.homeId;\n      }\n\n      if (isEdit) {\n        url = url + editId;\n      } else {\n        value.defaultPassword = true;\n      }\n\n      axios({\n        method,\n        url,\n        baseURL,\n        data: { ...value\n        }\n      }).then(({\n        data\n      }) => {\n        setBtnLoading(false);\n\n        if (data.code === \"OK\") {\n          pushListingRoute();\n        }\n      }).catch(err => setBtnLoading(false));\n    });\n  };\n\n  const pushListingRoute = () => {\n    let mappedRoutes = {\n      [USER_TYPE.HOME.ADMIN]: routes.userHome.path,\n      [USER_TYPE.PHARMACY.ADMIN]: routes.userPharmacy.path,\n      [USER_TYPE.ORGANIZATION.ADMIN]: routes.userOrganization.path,\n      [USER_TYPE.ADMIN.SUPER]: routes.userAdmin.path\n    };\n\n    if (mappedRoutes[customerType]) {\n      history.push({\n        pathname: mappedRoutes[customerType]\n      });\n    }\n  };\n\n  const handleSearchUser = data => {\n    if (data.code === \"OK\") {\n      Toast.success(data.message);\n\n      let tData = _.cloneDeep(data.data);\n\n      setExistingUserId(tData._id);\n      setSelectedType(tData.type);\n      let value = { ...tData,\n        emails: tData.emails && tData.emails.length ? tData.emails[0].email : \"\",\n        mobiles: tData.mobiles && tData.mobiles.length ? tData.mobiles[0].mobile : \"\"\n      };\n\n      if (profilePic) {\n        value.image = profilePic;\n      }\n\n      form.setFieldsValue(value);\n      setIsDisable(true);\n    }\n  };\n\n  const handleFindSerialNo = () => {\n    let username = form.getFieldValue(\"findUser\");\n\n    if (username) {\n      axios({ ...searchExistingUser,\n        data: {\n          search: username,\n          filter: {\n            find: {\n              type: [USER_TYPE.HOME.NURSE, USER_TYPE.HOME.ADMIN, USER_TYPE.HOME.OTHER, USER_TYPE.HOME.STAFF, USER_TYPE.HOME.TECH, USER_TYPE.HOME.PHYSICIAN]\n            }\n          }\n        }\n      }).then(({\n        data\n      }) => {\n        handleSearchUser(data);\n      }).catch(async err => {\n        console.log(\"TCL: handleFindSerialNo -> isInvalidTokenError(err)\", isInvalidTokenError(err));\n\n        if (isInvalidTokenError(err)) {\n          console.log(\"isInvalidTokenError(err)\", isInvalidTokenError(err));\n          let response = await reGenerateToken({ ...searchExistingUser,\n            data: {\n              search: username\n            }\n          });\n\n          if (response && response.code === \"OK\") {\n            handleSearchUser(response);\n          }\n\n          console.log(\"TCL: handleFindSerialNo -> reqsonse\", response);\n        }\n      });\n    }\n  };\n\n  const handleChangeUserType = val => {\n    if (val) {\n      setSelectedType(val);\n    }\n  };\n\n  const handlePharmacyChange = val => {\n    if (val) {\n      form.setFieldsValue(\"pharmacyId\", val);\n      let request = {\n        query: {\n          find: {\n            parentPharmacyId: val\n          }\n        }\n      };\n      fetchOrganizationAndHomes(CLIENTELE_TYPE.ORGANIZATION, request);\n    }\n  };\n\n  const handleUserNameChange = e => {\n    if (!e.target.value && isDisable) {\n      clearForm();\n    }\n  };\n\n  const handleCancel = () => {\n    pushListingRoute();\n  };\n\n  const clearForm = () => {\n    form.setFieldsValue({\n      firstName: \"\",\n      lastName: \"\",\n      emails: \"\",\n      mobiles: \"\",\n      designationId: undefined,\n      pharmacyId: undefined,\n      organizationId: undefined,\n      licenceNo: \"\",\n      type: customerType\n    });\n    setSelectedType(customerType);\n    setIsDisable(false);\n  };\n\n  const handleSetUserPermission = val => {\n    setAccessPermission(val);\n  };\n\n  const handleUploader = (action, uploadedData) => {\n    if (uploadedData && uploadedData.data && uploadedData.data.length) {\n      uploadedData.data.some(obj => {\n        if (obj.path) {\n          setProfilePic(obj.path);\n          return true;\n        }\n      });\n    }\n\n    setUploadVisible(action);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AddUser, {\n    form: form,\n    type: type,\n    userRoleOptions: userRoleOptions,\n    userSelectedType: selectedType,\n    customerType: customerType,\n    loginUser: loginUser,\n    subParentList: subParentList,\n    homeList: homeList,\n    pharmacyList: pharmacyList,\n    organizationList: organizationList,\n    onUploaderChange: handleUploaderChange,\n    showUploader: showUploader,\n    designationData: designationData,\n    changeUserType: handleChangeUserType,\n    onAddUser: handleAddUser,\n    onFindSerialNo: handleFindSerialNo,\n    btnLoading: btnLoading,\n    onPharmacyChange: handlePharmacyChange,\n    onUserNameChange: handleUserNameChange,\n    isDisable: isDisable,\n    onsetUserPermission: handleSetUserPermission,\n    onCancel: handleCancel,\n    isEdit: isEdit,\n    onUploadAction: handleUploader,\n    authUser: authUser,\n    isUploadVisible: isUploadVisible,\n    editData: editData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }\n  }));\n}\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser,\n    homeId\n  } = auth;\n  return {\n    authUser,\n    homeId\n  };\n};\n\nconst Form = createForm()(AddUserMain);\nexport default connect(mapStateToProps)(Form);","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/User/Components/AddUser/index.js"],"names":["React","useEffect","useState","queryString","connect","createForm","addUser","editUser","searchExistingUser","assignHomeOrPharmacy","masterPaginate","USER_TYPE","MAPPED_USER_TYPE","axios","AddUser","pharmacyPaginate","OrganizationHomePaginate","Toast","routes","reGenerateToken","CLIENTELE_TYPE","isInvalidTokenError","isPharmacyUser","_","require","loginUser","type","AddUserMain","props","setType","undefined","selectedType","setSelectedType","customerType","setCustomerType","userRoleOptions","setUserRoleOptions","subParentList","setSubParentList","showUploader","setShowUploader","organizationList","setOrganizationList","homeList","setHomeList","pharmacyList","setPharmacyList","btnLoading","setBtnLoading","isEdit","setIsEdit","isUploadVisible","setUploadVisible","editId","setEditId","designationData","setDesignationData","isDisable","setIsDisable","existingUserId","setExistingUserId","profilePic","setProfilePic","accessPermission","setAccessPermission","editData","setEditData","location","form","authUser","homeId","history","pharmacyId","PHARMACY","ADMIN","_id","search","query","parse","id","fetchData","Object","keys","length","manageRoleOptions","HOME","fetchDesignation","fetchEditData","editApi","url","method","baseURL","headers","homeIdentifier","isCustom","then","data","tempData","mobileData","find","mobiles","isPrimary","mobile","startsWith","substring","value","emails","email","subscriptionRoleGroup","designationId","setFieldsValue","fetchPharmacy","request","ORGANIZATION","fetchOrganizationAndHomes","isActive","code","populate","subMaster","match","filter","obj","isFor","forEach","key","subkey","cloneDeep","SUPER","GENERAL","handleUploaderChange","action","handleAddUser","validateFields","error","is_assign","userId","indexOf","image","defaultPassword","pushListingRoute","catch","err","mappedRoutes","userHome","path","userPharmacy","userOrganization","userAdmin","push","pathname","handleSearchUser","success","message","tData","handleFindSerialNo","username","getFieldValue","NURSE","OTHER","STAFF","TECH","PHYSICIAN","console","log","response","handleChangeUserType","val","handlePharmacyChange","parentPharmacyId","handleUserNameChange","e","target","clearForm","handleCancel","firstName","lastName","organizationId","licenceNo","handleSetUserPermission","handleUploader","uploadedData","some","mapStateToProps","auth","Form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport queryString from \"query-string\";\nimport { connect } from \"react-redux\";\nimport { createForm } from \"rc-form\";\nimport {\n  addUser,\n  editUser,\n  searchExistingUser,\n  assignHomeOrPharmacy,\n} from \"../../../../services/api/routes/user\";\nimport { masterPaginate } from \"../../../../services/api/routes/master\";\nimport { USER_TYPE, MAPPED_USER_TYPE } from \"../../../../constants/User\";\nimport axios from \"../../../../services/api/config\";\nimport AddUser from \"./AddUser\";\nimport {\n  pharmacyPaginate,\n  OrganizationHomePaginate,\n} from \"../../../../services/api/routes/customer\";\nimport { Toast } from \"../../../../components/common\";\nimport routes from \"../../../../routes/constant\";\nimport { reGenerateToken } from \"../../../../util/RegenToken\";\nimport { CLIENTELE_TYPE } from \"../../../../constants/Customer\";\nimport { isInvalidTokenError } from \"../../../../util/common\";\nimport { isPharmacyUser } from '../../../../constants/User'\n\nconst _ = require(\"lodash\");\nconst loginUser = { type: 1 };\nfunction AddUserMain(props) {\n  const [type, setType] = useState(undefined);\n  const [selectedType, setSelectedType] = useState(undefined);\n  const [customerType, setCustomerType] = useState(undefined);\n  const [userRoleOptions, setUserRoleOptions] = useState({});\n  const [subParentList, setSubParentList] = useState([]);\n  const [showUploader, setShowUploader] = useState(false);\n  const [organizationList, setOrganizationList] = useState([]);\n  const [homeList, setHomeList] = useState([]);\n  const [pharmacyList, setPharmacyList] = useState([]);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [isUploadVisible, setUploadVisible] = useState(false);\n  const [editId, setEditId] = useState();\n  const [designationData, setDesignationData] = useState([]);\n  const [isDisable, setIsDisable] = useState(false);\n  const [existingUserId, setExistingUserId] = useState(undefined);\n  const [profilePic, setProfilePic] = useState(\"\");\n  const [accessPermission, setAccessPermission] = useState(undefined);\n  const [editData, setEditData] = useState({});\n  const { location, form, authUser, homeId, history } = props;\n\n\n\n  const pharmacyId =\n    authUser?.type === USER_TYPE.PHARMACY.ADMIN\n      ? authUser?.pharmacyId?._id\n      : undefined;\n\n\n  useEffect(() => {\n    if (location.search) {\n      const query = queryString.parse(location.search);\n      if (query.type) {\n        setType(query.type);\n        setSelectedType(MAPPED_USER_TYPE[query.type]);\n        setCustomerType(MAPPED_USER_TYPE[query.type]);\n      }\n      if (query.isEdit) {\n        setIsEdit(query.isEdit);\n      }\n      if (query.id) {\n        setEditId(query.id);\n      }\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (customerType && Object.keys(userRoleOptions).length === 0) {\n      manageRoleOptions();\n    }\n    if (customerType === USER_TYPE.HOME.ADMIN) {\n      fetchDesignation();\n    }\n  }, [customerType]);\n\n  useEffect(() => {\n    if (isEdit) {\n      fetchEditData();\n    }\n  }, [isEdit]);\n\n  const fetchEditData = () => {\n    if (editId) {\n      let editApi = addUser.url + \"/\" + editId;\n      axios({\n        url: editApi,\n        method: 'GET',\n        baseURL: addUser.baseURL,\n        headers: {\n          homeId: authUser.homeId?._id,\n          homeIdentifier: authUser.homeId?.homeIdentifier,\n          isCustom: true,\n        }\n      }).then(\n        ({ data }) => {\n          let tempData = data.data;\n          if (tempData) {\n            setEditData(tempData);\n            setSelectedType(tempData.type);\n            const mobileData = _.find(tempData.mobiles, { isPrimary: true });\n            let mobile;\n            if (mobileData?.mobile.startsWith(\"+1\")) {\n              mobile = mobileData?.mobile.substring(2, mobileData?.mobile.length);\n            } else {\n              mobile = mobileData?.mobile\n            }\n\n            let value = {\n              ...tempData,\n              emails:\n                tempData?.emails && tempData.emails.length\n                  ? tempData.emails[0].email\n                  : \"\",\n              mobiles: mobile,\n              // mobiles: tempData?.mobiles && tempData.mobiles.length ? tempData.mobiles[0].mobile.slice(2) : '',\n              subscriptionRoleGroup:\n                tempData.homeId?.subscriptionRoleGroup?._id,\n              designationId: tempData.homeId?.designationId?._id,\n            };\n            form.setFieldsValue(value);\n          }\n        }\n      );\n    }\n  };\n  const fetchData = () => {\n    fetchPharmacy();\n    const request = {\n      type: CLIENTELE_TYPE.ORGANIZATION,\n    };\n    fetchOrganizationAndHomes(CLIENTELE_TYPE.ORGANIZATION, request);\n  };\n  const fetchDesignation = () => {\n    if (Object.keys(designationData).length === 0) {\n      let data = {\n        query: {\n          // select: \"parentId code name isActive description slug _id updatedAt createdAt\",\n          find: {\n            isActive: true,\n            code: \"DESIGNATION_TYPE\",\n          },\n          populate: [\n            {\n              subMaster: null,\n              match: { isActive: true },\n            },\n          ],\n        },\n      };\n      axios({ ...masterPaginate, data }).then(({ data }) => {\n        if (data.code === \"OK\") {\n          if (data?.data?.data?.length > 0) {\n            if (\n              data.data.data[0].subMaster &&\n              data.data.data[0].subMaster.length\n            ) {\n              setDesignationData(data.data.data[0].subMaster);\n            }\n          }\n        }\n      });\n    }\n  };\n  const fetchPharmacy = () => {\n    const { method, url, baseURL } = pharmacyPaginate;\n    axios({\n      url,\n      method,\n      baseURL,\n      data: {\n        query: {\n          find: {\n            isActive: true,\n          },\n        },\n      },\n    }).then(({ data }) => {\n      if (data.code == \"OK\") {\n        if (data?.data?.data?.length) {\n          data.data.data = data.data.data.filter((obj) => obj.isActive);\n          setPharmacyList(data.data.data);\n        }\n      }\n    });\n  };\n  const fetchOrganizationAndHomes = (isFor, request = {}) => {\n    const { method, url, baseURL } = OrganizationHomePaginate;\n    axios({\n      url,\n      method,\n      data: {\n        query: {\n          ...request,\n          find: { type: CLIENTELE_TYPE.ORGANIZATION, isActive: true },\n        },\n      },\n      baseURL,\n    }).then(({ data }) => {\n      if (data.code == \"OK\") {\n        if (isFor === CLIENTELE_TYPE.ORGANIZATION) {\n          setOrganizationList(data.data.data);\n        } else if (isFor === USER_TYPE.HOME.ADMIN) {\n          data.data.data = data.data.data.filter((obj) => obj.isActive);\n          setHomeList(data.data.data);\n        }\n      }\n    });\n  };\n\n  const manageRoleOptions = () => {\n    let userRoleOptions = {};\n    Object.keys(USER_TYPE).forEach((key) => {\n      Object.keys(USER_TYPE[key]).forEach((subkey) => {\n        if (USER_TYPE[key][subkey] === customerType) {\n          userRoleOptions[key] = _.cloneDeep(USER_TYPE[key]);\n          if (USER_TYPE[key][subkey] === USER_TYPE.ADMIN.SUPER) {\n            delete userRoleOptions[key][subkey];\n          }\n        }\n      });\n    });\n    setUserRoleOptions(userRoleOptions);\n    if (customerType === USER_TYPE.ADMIN.SUPER) {\n      form.setFieldsValue({ type: USER_TYPE.ADMIN.GENERAL });\n    } else {\n      form.setFieldsValue({ type: customerType });\n    }\n  };\n  const handleUploaderChange = (action) => {\n    setShowUploader(action);\n  };\n  const handleAddUser = () => {\n    form.validateFields((error, value) => {\n      if (error && !existingUserId) {\n        return;\n      }\n      setBtnLoading(true);\n\n      let { method, url, baseURL } = existingUserId\n        ? assignHomeOrPharmacy\n        : isEdit\n          ? editUser\n          : addUser;\n      if (existingUserId) {\n        value = {\n          is_assign: true,\n          homeId: homeId,\n          userId: existingUserId,\n        };\n      } else {\n        value = {\n          ...value,\n          emails: value.emails\n            ? [{ email: value.emails, isPrimary: true }]\n            : null,\n          mobiles: value.mobiles\n            ? [{ mobile: '+1' + value.mobiles, isPrimary: true }]\n            : null,\n          homeId: homeId,\n          // subscriptionRoleGroup: \"5f6314e009a7353d9848652c\",\n          // subscriptionRoleGroup: accessPermission,\n        };\n      }\n      if (\n        [USER_TYPE.ADMIN.SUPER, USER_TYPE.ADMIN.GENERAL].indexOf(\n          customerType\n        ) >= 0\n      ) {\n        delete value.homeId;\n      }\n      if (profilePic) {\n        value.image = profilePic\n      }\n      if (customerType === USER_TYPE.HOME.ADMIN) {\n        value.homeId = homeId;\n      }\n      if (customerType === USER_TYPE.PHARMACY.ADMIN) {\n        value.pharmacyId = isPharmacyUser(authUser?.type) ? pharmacyId : value.pharmacyId;\n        // value.pharmacyId\n        delete value.homeId\n      }\n      if (isEdit) {\n        url = url + editId;\n      } else {\n        value.defaultPassword = true;\n      }\n\n      axios({ method, url, baseURL, data: { ...value } })\n        .then(({ data }) => {\n          setBtnLoading(false);\n          if (data.code === \"OK\") {\n            pushListingRoute();\n          }\n        })\n        .catch((err) => setBtnLoading(false));\n    });\n  };\n  const pushListingRoute = () => {\n    let mappedRoutes = {\n      [USER_TYPE.HOME.ADMIN]: routes.userHome.path,\n      [USER_TYPE.PHARMACY.ADMIN]: routes.userPharmacy.path,\n      [USER_TYPE.ORGANIZATION.ADMIN]: routes.userOrganization.path,\n      [USER_TYPE.ADMIN.SUPER]: routes.userAdmin.path,\n    };\n    if (mappedRoutes[customerType]) {\n      history.push({\n        pathname: mappedRoutes[customerType],\n      });\n    }\n  };\n  const handleSearchUser = (data) => {\n    if (data.code === \"OK\") {\n      Toast.success(data.message);\n      let tData = _.cloneDeep(data.data);\n      setExistingUserId(tData._id);\n      setSelectedType(tData.type);\n      let value = {\n        ...tData,\n        emails:\n          tData.emails && tData.emails.length ? tData.emails[0].email : \"\",\n        mobiles:\n          tData.mobiles && tData.mobiles.length ? tData.mobiles[0].mobile : \"\",\n      };\n      if (profilePic) {\n        value.image = profilePic;\n      }\n      form.setFieldsValue(value);\n      setIsDisable(true);\n    }\n  };\n  const handleFindSerialNo = () => {\n    let username = form.getFieldValue(\"findUser\");\n    if (username) {\n      axios({\n        ...searchExistingUser,\n        data: {\n          search: username,\n          filter: {\n            find: {\n              type: [\n                USER_TYPE.HOME.NURSE,\n                USER_TYPE.HOME.ADMIN,\n                USER_TYPE.HOME.OTHER,\n\n                USER_TYPE.HOME.STAFF,\n\n                USER_TYPE.HOME.TECH,\n\n                USER_TYPE.HOME.PHYSICIAN,\n              ],\n            },\n          },\n        },\n      })\n        .then(({ data }) => {\n          handleSearchUser(data);\n        })\n        .catch(async (err) => {\n          console.log(\n            \"TCL: handleFindSerialNo -> isInvalidTokenError(err)\",\n            isInvalidTokenError(err)\n          );\n          if (isInvalidTokenError(err)) {\n            console.log(\"isInvalidTokenError(err)\", isInvalidTokenError(err));\n            let response = await reGenerateToken({\n              ...searchExistingUser,\n              data: {\n                search: username,\n              },\n            });\n            if (response && response.code === \"OK\") {\n              handleSearchUser(response);\n            }\n            console.log(\"TCL: handleFindSerialNo -> reqsonse\", response);\n          }\n        });\n    }\n  };\n  const handleChangeUserType = (val) => {\n    if (val) {\n      setSelectedType(val);\n    }\n  };\n  const handlePharmacyChange = (val) => {\n    if (val) {\n      form.setFieldsValue(\"pharmacyId\", val);\n      let request = {\n        query: {\n          find: {\n            parentPharmacyId: val,\n          },\n        },\n      };\n      fetchOrganizationAndHomes(CLIENTELE_TYPE.ORGANIZATION, request);\n    }\n  };\n  const handleUserNameChange = (e) => {\n    if (!e.target.value && isDisable) {\n      clearForm();\n    }\n  };\n  const handleCancel = () => {\n    pushListingRoute();\n  };\n  const clearForm = () => {\n    form.setFieldsValue({\n      firstName: \"\",\n      lastName: \"\",\n      emails: \"\",\n      mobiles: \"\",\n      designationId: undefined,\n      pharmacyId: undefined,\n      organizationId: undefined,\n      licenceNo: \"\",\n      type: customerType,\n    });\n    setSelectedType(customerType);\n    setIsDisable(false);\n  };\n  const handleSetUserPermission = (val) => {\n    setAccessPermission(val);\n  };\n  const handleUploader = (action, uploadedData) => {\n    if (uploadedData && uploadedData.data && uploadedData.data.length) {\n      uploadedData.data.some((obj) => {\n        if (obj.path) {\n          setProfilePic(obj.path);\n          return true;\n        }\n      });\n    }\n    setUploadVisible(action);\n  };\n  return (\n    <div>\n      <AddUser\n        form={form}\n        type={type}\n        userRoleOptions={userRoleOptions}\n        userSelectedType={selectedType}\n        customerType={customerType}\n        loginUser={loginUser}\n        subParentList={subParentList}\n        homeList={homeList}\n        pharmacyList={pharmacyList}\n        organizationList={organizationList}\n        onUploaderChange={handleUploaderChange}\n        showUploader={showUploader}\n        designationData={designationData}\n        changeUserType={handleChangeUserType}\n        onAddUser={handleAddUser}\n        onFindSerialNo={handleFindSerialNo}\n        btnLoading={btnLoading}\n        onPharmacyChange={handlePharmacyChange}\n        onUserNameChange={handleUserNameChange}\n        isDisable={isDisable}\n        onsetUserPermission={handleSetUserPermission}\n        onCancel={handleCancel}\n        isEdit={isEdit}\n        onUploadAction={handleUploader}\n        authUser={authUser}\n        isUploadVisible={isUploadVisible}\n        editData={editData}\n      />\n    </div>\n  );\n}\nconst mapStateToProps = ({ auth }) => {\n  const { authUser, homeId } = auth;\n  return {\n    authUser,\n    homeId,\n  };\n};\nconst Form = createForm()(AddUserMain);\nexport default connect(mapStateToProps)(Form);\n"]},"metadata":{},"sourceType":"module"}