{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/components/DoctorFilter.js\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport { connect } from 'react-redux';\nimport Select, { Option } from './common/AutoComplete';\nimport axios from '../services/api/services/common';\nimport { userPaginate } from '../services/api/routes/user';\nimport { getUserNameWithDesignation } from '../util/common';\nimport { USER_TYPE, SUB_NURSE_TYPE } from \"../constants/User\";\n\nconst _ = require(\"lodash\");\n\nconst DoctorFilter = props => {\n  const {\n    requirePrescriberName,\n    getPrescriberName,\n    authUser\n  } = props;\n  const [doctorList, setDoctorList] = useState([]);\n  const [value, setValue] = useState(props.value);\n  const [loading, setLoading] = useState(false); // constructor(props) {\n  //     super(props)\n  //     this.state = {\n  //         doctorList: [],\n  //         value: this.props.value\n  //     }\n  // }\n\n  useEffect(() => {\n    getDoctorsNP();\n  }, [props.homeId]);\n\n  const getAPI = request => {\n    let obj = {\n      isCallAPI: true,\n      response: null\n    };\n    let physician = JSON.parse(localStorage.getItem('physician-filter'));\n\n    if (physician && (authUser === null || authUser === void 0 ? void 0 : authUser._id) === physician.userId) {\n      if (_.isEqual(request, physician.request)) {\n        obj = {\n          isCallAPI: false,\n          response: physician.response\n        };\n      }\n    }\n\n    return obj;\n  };\n\n  useEffect(() => {\n    setValue(props.value);\n  }, [props.value]);\n  useEffect(() => {\n    let prescriber = doctorList.find(obj => obj._id === value);\n\n    if (prescriber && getPrescriberName) {\n      getPrescriberName(prescriber.name);\n    }\n  }, [value, requirePrescriberName]);\n\n  const getDoctorsNP = () => {\n    // get prescriber - Doctors and Nurse Practioner\n    let obj = {\n      // filter: {\n      // select: ['isActive', 'id', 'name', 'designation'],\n      sort: {\n        createdAt: \"DESC\"\n      },\n      find: {\n        type: USER_TYPE.HOME.PHYSICIAN,\n        homeId: props.homeId,\n        isActive: true\n      } // populate :{},\n      // filter: {\n      //     or: [\n      //         { type: USER_TYPE.HOME.PHYSICIAN },\n      //         { type: USER_TYPE.HOME.NURSE, designation: SUB_NURSE_TYPE.NURSE_PRACTITIONER }\n      //     ]\n      // }\n      // }\n\n    };\n    let getAPIObj = getAPI(obj);\n\n    if (getAPIObj.isCallAPI) {\n      axios({ ...userPaginate,\n        data: {\n          query: obj,\n          withActiveHomeRolePermissions: true\n        }\n      }).then(data => {\n        if (data.code === \"OK\") {\n          let physician = {\n            userId: props.authUser._id,\n            request: obj,\n            response: data.data\n          };\n          localStorage.setItem('physician-filter', JSON.stringify(physician));\n          setDoctorList(data.data.list);\n          setLoading(false); // this.setState({ doctorList: data.data.list, loading: false })\n        } else {\n          setDoctorList([]);\n          setLoading(false); // this.setState({ doctorList: [], loading: false })\n        }\n      }).catch(error => {\n        setDoctorList([]);\n        setLoading(false); // this.setState({ doctorList: [], loading: false })\n        // `console`.log(\"Error:\", error.message);\n      });\n    } else {\n      let data = getAPIObj.response;\n      setDoctorList(data.list);\n      setLoading(false); // this.setState({ doctorList: data.list, loading: false })\n    }\n  }; // const { value } = props\n\n\n  const {\n    size,\n    placeholder,\n    allowClear,\n    hint,\n    disabled,\n    onChange\n  } = props;\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, doctorList ? /*#__PURE__*/React.createElement(Select, {\n    showSearch: true,\n    allowClear: allowClear,\n    mode: 'single',\n    placeholder: placeholder || \"Select Physician\",\n    value: value || undefined,\n    style: {\n      width: size || '-webkit-fill-available'\n    },\n    onChange: onChange,\n    hint: hint,\n    disabled: disabled,\n    filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, doctorList.map(user => {\n    return /*#__PURE__*/React.createElement(Option, {\n      key: user._id,\n      value: user._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 40\n      }\n    }, getUserNameWithDesignation(user));\n  })) : null);\n};\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser,\n    homeId\n  } = auth;\n  return {\n    authUser,\n    homeId\n  };\n};\n\nexport default connect(mapStateToProps)(DoctorFilter);","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/components/DoctorFilter.js"],"names":["React","Component","useEffect","useState","connect","Select","Option","axios","userPaginate","getUserNameWithDesignation","USER_TYPE","SUB_NURSE_TYPE","_","require","DoctorFilter","props","requirePrescriberName","getPrescriberName","authUser","doctorList","setDoctorList","value","setValue","loading","setLoading","getDoctorsNP","homeId","getAPI","request","obj","isCallAPI","response","physician","JSON","parse","localStorage","getItem","_id","userId","isEqual","prescriber","find","name","sort","createdAt","type","HOME","PHYSICIAN","isActive","getAPIObj","data","query","withActiveHomeRolePermissions","then","code","setItem","stringify","list","catch","error","size","placeholder","allowClear","hint","disabled","onChange","undefined","width","input","option","children","toLowerCase","indexOf","map","user","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\nimport { connect } from 'react-redux'\nimport Select, { Option } from './common/AutoComplete';\nimport axios from '../services/api/services/common';\nimport { userPaginate } from '../services/api/routes/user'\nimport { getUserNameWithDesignation } from '../util/common'\nimport { USER_TYPE, SUB_NURSE_TYPE } from \"../constants/User\";\nconst _ = require(\"lodash\");\n\nconst DoctorFilter = (props) => {\n    const { requirePrescriberName, getPrescriberName, authUser } = props\n    const [doctorList, setDoctorList] = useState([])\n    const [value, setValue] = useState(props.value)\n    const [loading, setLoading] = useState(false)\n    // constructor(props) {\n    //     super(props)\n    //     this.state = {\n    //         doctorList: [],\n    //         value: this.props.value\n    //     }\n    // }\n\n    useEffect(() => {\n        getDoctorsNP()\n    }, [props.homeId])\n\n    const getAPI = (request) => {\n        let obj = {\n            isCallAPI: true,\n            response: null\n        }\n        let physician = JSON.parse(localStorage.getItem('physician-filter'))\n        if (physician && authUser?._id === physician.userId) {\n            if (_.isEqual(request, physician.request)) {\n                obj = {\n                    isCallAPI: false,\n                    response: physician.response\n                }\n            }\n        }\n        return obj\n    }\n\n    useEffect(() => {\n        setValue(props.value)\n    }, [props.value])\n\n    useEffect(() => {\n        let prescriber = doctorList.find(obj => obj._id === value)\n        if (prescriber && getPrescriberName) {\n            getPrescriberName(prescriber.name)\n        }\n    }, [value, requirePrescriberName])\n\n    const getDoctorsNP = () => {\n        // get prescriber - Doctors and Nurse Practioner\n        let obj = {\n            // filter: {\n            // select: ['isActive', 'id', 'name', 'designation'],\n            sort: { createdAt: \"DESC\" },\n            find: {\n                type: USER_TYPE.HOME.PHYSICIAN,\n                homeId: props.homeId,\n                isActive: true\n            },\n            // populate :{},\n\n            // filter: {\n            //     or: [\n            //         { type: USER_TYPE.HOME.PHYSICIAN },\n            //         { type: USER_TYPE.HOME.NURSE, designation: SUB_NURSE_TYPE.NURSE_PRACTITIONER }\n            //     ]\n            // }\n            // }\n        };\n        let getAPIObj = getAPI(obj)\n        if (getAPIObj.isCallAPI) {\n            axios({ ...userPaginate, data: { query: obj, withActiveHomeRolePermissions: true } }).then((data) => {\n\n                if (data.code === \"OK\") {\n                    let physician = {\n                        userId: props.authUser._id,\n                        request: obj, response: data.data\n                    }\n                    localStorage.setItem('physician-filter', JSON.stringify(physician))\n                    setDoctorList(data.data.list)\n                    setLoading(false)\n                    // this.setState({ doctorList: data.data.list, loading: false })\n                } else {\n                    setDoctorList([])\n                    setLoading(false)\n                    // this.setState({ doctorList: [], loading: false })\n                }\n            }).catch((error) => {\n                setDoctorList([])\n                setLoading(false)\n                // this.setState({ doctorList: [], loading: false })\n                // `console`.log(\"Error:\", error.message);\n            });\n        }\n        else {\n            let data = getAPIObj.response\n            setDoctorList(data.list)\n            setLoading(false)\n            // this.setState({ doctorList: data.list, loading: false })\n        }\n\n    }\n\n\n    // const { value } = props\n    const { size, placeholder, allowClear, hint, disabled, onChange } = props\n\n    return (\n        <React.Fragment>\n            {\n                doctorList ?\n                    <Select\n                        showSearch\n                        allowClear={allowClear}\n                        mode={'single'}\n                        placeholder={placeholder || \"Select Physician\"}\n                        value={value || undefined}\n                        style={{ width: size || '-webkit-fill-available' }}\n                        onChange={onChange}\n                        hint={hint}\n                        disabled={disabled}\n                        filterOption={(input, option) =>\n                            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }\n                    >\n                        {\n                            doctorList.map(user => {\n                                return <Option key={user._id}\n                                    value={user._id}\n                                >\n                                    {getUserNameWithDesignation(user)}\n                                </Option>\n                            })\n                        }\n                    </Select> : null\n            }\n        </React.Fragment>\n    )\n\n}\n\nconst mapStateToProps = ({ auth }) => {\n    const { authUser, homeId } = auth\n    return {\n        authUser,\n        homeId\n    }\n}\nexport default connect(mapStateToProps)(DoctorFilter)"]},"metadata":{},"sourceType":"module"}