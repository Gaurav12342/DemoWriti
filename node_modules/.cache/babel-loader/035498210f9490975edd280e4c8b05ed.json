{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/NotesList.js\";\nimport React, { Component } from 'react';\nimport { ADMISSION_READMISSION_TODO_TYPES, ADMISSION_READMISSION_NAME } from '../../../constants/Admission';\nimport { TODO_TYPES, TODO_CATEGORY } from '../../../constants/todo';\nimport { MED_REVIEW_NAME, MED_REVIEW_TODO_TYPES } from '../../../constants/pmr';\nimport UtilService, { getUserNameWithDesignation } from '../../../util/common';\nimport { displayDate } from '../../../util/moment';\nimport AddNoteModal from './AddNote';\nimport Table from '../../../components/common/Table/index';\nimport Modal from '../../../components/common/Popup/index';\nimport NoData from '../../../containers/ResidentDetail/View/noData';\nimport Divider from '../../../components/common/Divider';\n\nconst _ = require('lodash');\n\nfunction bindToDoName(todoSubCategory, todoCat) {\n  let result = \"\";\n  let todoType = TODO_TYPES;\n  let todoName = '';\n\n  if (todoCat) {\n    if (todoCat === TODO_CATEGORY[\"MED_REVIEW\"]) {\n      todoType = MED_REVIEW_TODO_TYPES;\n      todoName = MED_REVIEW_NAME;\n    } else if (todoCat === TODO_CATEGORY[\"ADMISSION_READMISSION\"]) {\n      todoType = ADMISSION_READMISSION_TODO_TYPES;\n      todoName = ADMISSION_READMISSION_NAME;\n    }\n  }\n\n  _.each(todoType, function (v, k) {\n    if (v === todoSubCategory) {\n      if (todoName) result = todoName[k].replace(/_/g, \" \");else result = k.replace(/_/g, \" \");\n    }\n  });\n\n  return result;\n}\n\nclass NotesList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addedNotes: [],\n      showAddNoteModal: false,\n      editRec: null\n    };\n\n    this.handleEdit = record => {\n      this.setState({\n        showAddNoteModal: true,\n        editRec: record\n      });\n    };\n\n    this.handleDelete = record => {\n      let tempAddedNotes = [];\n      this.state.addedNotes.forEach(tNote => {\n        if (tNote.note !== record.note) {\n          tempAddedNotes.push(tNote);\n        }\n      });\n      this.setState({\n        addedNotes: tempAddedNotes\n      });\n    };\n\n    this.hideAddNoteModal = modifiedNoteText => {\n      if (typeof modifiedNoteText === 'string') {\n        let tempAddedNotes = [...this.state.addedNotes];\n        tempAddedNotes.filter(tNote => {\n          if (tNote.note === this.state.editRec.note) {\n            tNote.note = modifiedNoteText;\n            return false;\n          }\n\n          return true;\n        });\n        this.setState({\n          addedNotes: tempAddedNotes\n        });\n        this.setState({\n          addedNotes: tempAddedNotes,\n          showAddNoteModal: false,\n          editRec: null\n        });\n      } else {\n        this.setState({\n          showAddNoteModal: false,\n          editRec: null\n        });\n      }\n    };\n\n    this.getColumns = () => [{\n      title: 'Note',\n      dataIndex: 'note',\n      // width: '15%',\n      render: (text, record) => /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          wordWrap: 'break-word',\n          wordBreak: 'break-all'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, text)\n    }, {\n      title: 'Added by',\n      dataIndex: 'addedBy',\n      // width: '10%',\n      render: text => /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, getUserNameWithDesignation(text))\n    }, {\n      title: 'Created at',\n      dataIndex: 'createdAt',\n      // width: '10%',\n      render: text => /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }\n      }, displayDate(text))\n    }, {\n      title: 'Type',\n      dataIndex: 'subCategory',\n      // width: '10%',\n      render: (text, record) => /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, bindToDoName(text, record.category))\n    }, {\n      title: 'Actions',\n      // width: '10%',\n      render: (text, record) => /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: this.handleEdit.bind(this, record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }\n      }, \"Edit\"), /*#__PURE__*/React.createElement(Divider, {\n        type: \"vertical\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"a\", {\n        onClick: this.handleDelete.bind(this, record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }, \" Delete \"))\n    }];\n  }\n\n  componentDidMount() {\n    this.setState({\n      addedNotes: this.props.addedNotes\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.state.addedNotes && nextProps.addedNotes) {\n      this.setState({\n        addedNotes: nextProps.addedNotes\n      });\n    }\n  }\n\n  render() {\n    let {\n      isVisible,\n      onCancel,\n      notesCount\n    } = this.props;\n    let {\n      showAddNoteModal,\n      addedNotes,\n      editRec\n    } = this.state;\n    console.log(\"TCL: NotesList -> render -> addedNotes\", addedNotes);\n    return /*#__PURE__*/React.createElement(Modal, {\n      title: `Added Notes ${notesCount}`,\n      title: \"Added Notes\",\n      visible: isVisible,\n      onCancel: () => onCancel(addedNotes),\n      width: 800,\n      onOk: () => onCancel(addedNotes),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, addedNotes.length > 0 ? /*#__PURE__*/React.createElement(Table, {\n      style: {\n        width: '750px'\n      },\n      columns: this.getColumns(),\n      pagination: false,\n      datasource: addedNotes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }) : null, showAddNoteModal && /*#__PURE__*/React.createElement(AddNoteModal, {\n      isVisible: showAddNoteModal,\n      isEdit: true,\n      editRec: editRec,\n      onCancel: this.hideAddNoteModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}\n\nexport default NotesList;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/NotesList.js"],"names":["React","Component","ADMISSION_READMISSION_TODO_TYPES","ADMISSION_READMISSION_NAME","TODO_TYPES","TODO_CATEGORY","MED_REVIEW_NAME","MED_REVIEW_TODO_TYPES","UtilService","getUserNameWithDesignation","displayDate","AddNoteModal","Table","Modal","NoData","Divider","_","require","bindToDoName","todoSubCategory","todoCat","result","todoType","todoName","each","v","k","replace","NotesList","state","addedNotes","showAddNoteModal","editRec","handleEdit","record","setState","handleDelete","tempAddedNotes","forEach","tNote","note","push","hideAddNoteModal","modifiedNoteText","filter","getColumns","title","dataIndex","render","text","wordWrap","wordBreak","category","bind","componentDidMount","props","componentWillReceiveProps","nextProps","isVisible","onCancel","notesCount","console","log","length","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ADMISSION_READMISSION_TODO_TYPES, ADMISSION_READMISSION_NAME } from '../../../constants/Admission'\nimport { TODO_TYPES, TODO_CATEGORY } from '../../../constants/todo'\nimport { MED_REVIEW_NAME, MED_REVIEW_TODO_TYPES } from '../../../constants/pmr'\nimport UtilService, { getUserNameWithDesignation } from '../../../util/common';\nimport { displayDate } from '../../../util/moment'\nimport AddNoteModal from './AddNote'\nimport Table from '../../../components/common/Table/index'\nimport Modal from '../../../components/common/Popup/index'\nimport NoData from '../../../containers/ResidentDetail/View/noData'\nimport Divider from '../../../components/common/Divider'\nconst _ = require('lodash')\n\nfunction bindToDoName(todoSubCategory, todoCat) {\n    let result = \"\";\n    let todoType = TODO_TYPES\n    let todoName = ''\n    if (todoCat) {\n        if (todoCat === TODO_CATEGORY[\"MED_REVIEW\"]) {\n            todoType = MED_REVIEW_TODO_TYPES\n            todoName = MED_REVIEW_NAME\n        } else if (todoCat === TODO_CATEGORY[\"ADMISSION_READMISSION\"]) {\n            todoType = ADMISSION_READMISSION_TODO_TYPES\n            todoName = ADMISSION_READMISSION_NAME\n        }\n    }\n    _.each(todoType, function (v, k) {\n        if (v === todoSubCategory) {\n            if (todoName)\n                result = todoName[k].replace(/_/g, \" \")\n            else\n                result = k.replace(/_/g, \" \");\n        }\n    });\n    return result;\n}\nclass NotesList extends Component {\n    state = {\n        addedNotes: [],\n        showAddNoteModal: false,\n        editRec: null\n    }\n    componentDidMount() {\n        this.setState({\n            addedNotes: this.props.addedNotes\n        })\n    }\n    handleEdit = (record) => {\n        this.setState({\n            showAddNoteModal: true,\n            editRec: record\n        })\n    }\n    handleDelete = (record) => {\n        let tempAddedNotes = []\n        this.state.addedNotes.forEach(tNote => {\n            if (tNote.note !== record.note) {\n                tempAddedNotes.push(tNote)\n            }\n        })\n        this.setState({\n            addedNotes: tempAddedNotes\n        })\n    }\n    hideAddNoteModal = (modifiedNoteText) => {\n        if (typeof modifiedNoteText === 'string') {\n            let tempAddedNotes = [...this.state.addedNotes]\n            tempAddedNotes.filter(tNote => {\n                if (tNote.note === this.state.editRec.note) {\n                    tNote.note = modifiedNoteText\n                    return false\n                }\n                return true\n            })\n            this.setState({\n                addedNotes: tempAddedNotes\n            })\n            this.setState({\n                addedNotes: tempAddedNotes,\n                showAddNoteModal: false,\n                editRec: null\n            })\n        }\n        else {\n            this.setState({\n                showAddNoteModal: false,\n                editRec: null\n            })\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (this.state.addedNotes && nextProps.addedNotes) {\n            this.setState({\n                addedNotes: nextProps.addedNotes\n            })\n        }\n    }\n    getColumns = () => [\n        {\n            title: 'Note',\n            dataIndex: 'note',\n            // width: '15%',\n            render: (text, record) => (\n                <div style={{\n                    wordWrap: 'break-word', wordBreak: 'break-all'\n                }}>\n                    {/* {UtilService.setReadMore(text, 15, 250)} */}\n                    {text}\n                </div>\n            )\n        },\n        {\n            title: 'Added by',\n            dataIndex: 'addedBy',\n            // width: '10%',\n            render: (text) => (\n                <span>\n                    {getUserNameWithDesignation(text)}\n                </span>\n            )\n        },\n        {\n            title: 'Created at',\n            dataIndex: 'createdAt',\n            // width: '10%',\n            render: (text) => (\n                <span>\n                    {displayDate(text)}\n                </span>\n            )\n        },\n        {\n            title: 'Type',\n            dataIndex: 'subCategory',\n            // width: '10%',\n            render: (text, record) =>\n                <span>\n                    {bindToDoName(text, record.category)}\n                </span>\n\n        },\n        {\n            title: 'Actions',\n            // width: '10%',\n            render: (text, record) => (\n                <span>\n                    <a onClick={this.handleEdit.bind(this, record)}>Edit</a>\n                    <Divider type=\"vertical\" />\n                    <a onClick={this.handleDelete.bind(this, record)}> Delete </a>\n                </span>\n            )\n        }\n    ]\n    render() {\n        let { isVisible, onCancel, notesCount, } = this.props\n        let { showAddNoteModal, addedNotes, editRec } = this.state\n        console.log(\"TCL: NotesList -> render -> addedNotes\", addedNotes)\n        return (\n            <Modal\n                title={`Added Notes ${notesCount}`}\n                title=\"Added Notes\"\n                visible={isVisible}\n                onCancel={() => onCancel(addedNotes)}\n                width={800}\n                onOk={() => onCancel(addedNotes)}\n            >\n                {\n                    addedNotes.length > 0 ?\n                        <Table\n                            style={{ width: '750px' }}\n                            columns={this.getColumns()}\n                            pagination={false}\n                            datasource={addedNotes}\n                        /> : null\n                }\n                {\n                    showAddNoteModal && (\n                        <AddNoteModal\n                            isVisible={showAddNoteModal}\n                            isEdit={true}\n                            editRec={editRec}\n                            onCancel={this.hideAddNoteModal}\n                        />\n                    )\n                }\n            </Modal>\n        );\n    }\n}\n\nexport default NotesList;"]},"metadata":{},"sourceType":"module"}