{"ast":null,"code":"import { REFRESH_TOKEN, SOCKET_SET, SET_USER_DATA, SIGNOUT_USER_SUCCESS, SET_USER_TOKEN } from '../ActionTypes';\nimport { logout } from '../../services/api/routes/auth';\nimport axios from '../../services/api/config';\nimport { decryptData, encryptData } from '../../../src/util/Crypto';\nimport { prepareUserData } from '../../../src/services/api/services/Auth';\nimport { clearLocalStorage } from '../../util/common';\nexport function userSignIn(action, data) {\n  return {\n    type: action,\n    payload: data\n  };\n}\nexport function setSocket(payload) {\n  return dispatch => {\n    dispatch({\n      type: SOCKET_SET,\n      payload: payload\n    });\n  };\n}\nexport function setToken(token) {\n  console.log(\"setToken -> token\", token);\n  return {\n    type: SET_USER_TOKEN,\n    payload: token\n  };\n}\nexport function setUserData(action = SET_USER_DATA, data, callback) {\n  return dispatch => {\n    dispatch({\n      type: action,\n      payload: data\n    });\n\n    if (callback) {\n      callback();\n    }\n  };\n}\nexport const updateUserData = data => {\n  return dispatch => {\n    let user = decryptData(localStorage.getItem('user'));\n    user = { ...user,\n      ...data\n    };\n    user = prepareUserData(user);\n    localStorage.setItem('user', encryptData(user));\n    dispatch({\n      type: SET_USER_DATA,\n      payload: user\n    });\n  };\n};\nexport function setReduxHomeId(action, id) {\n  return dispatch => {\n    dispatch({\n      type: action,\n      payload: id\n    });\n  };\n}\nexport function setDefaultPassword(action, data, callback) {\n  return dispatch => {\n    dispatch({\n      type: action,\n      payload: data\n    });\n\n    if (callback) {\n      callback();\n    }\n  };\n}\nexport const userSignOut = (action, callback) => {\n  return (dispatch, getState) => {\n    let {\n      method,\n      url,\n      baseURL\n    } = logout;\n    axios({\n      method,\n      url,\n      baseURL\n    }).then(response => {\n      if ((response === null || response === void 0 ? void 0 : response.data.code) === 'OK') {\n        let socket = getState().auth.socket;\n        if (socket) socket.disconnect(); // setTimeout(() => {\n\n        dispatch({\n          type: action || SIGNOUT_USER_SUCCESS\n        });\n        clearLocalStorage(); // }, 1000);\n\n        if (callback) {\n          callback();\n        }\n      }\n    }).catch(error => {\n      console.log('error', error);\n    });\n  };\n};\nexport const setOtpVerified = (action, payload) => {\n  console.log('-> setOtpVerified');\n  return {\n    type: action,\n    payload\n  };\n};\nexport const refreshToken = payload => dispatch => {\n  return dispatch({\n    type: REFRESH_TOKEN,\n    payload: payload.token\n  });\n};","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/appRedux/actions/Auth.js"],"names":["REFRESH_TOKEN","SOCKET_SET","SET_USER_DATA","SIGNOUT_USER_SUCCESS","SET_USER_TOKEN","logout","axios","decryptData","encryptData","prepareUserData","clearLocalStorage","userSignIn","action","data","type","payload","setSocket","dispatch","setToken","token","console","log","setUserData","callback","updateUserData","user","localStorage","getItem","setItem","setReduxHomeId","id","setDefaultPassword","userSignOut","getState","method","url","baseURL","then","response","code","socket","auth","disconnect","catch","error","setOtpVerified","refreshToken"],"mappings":"AAAA,SACEA,aADF,EAEEC,UAFF,EAGEC,aAHF,EAIEC,oBAJF,EAKEC,cALF,QAMO,gBANP;AAOA,SAASC,MAAT,QAAuB,gCAAvB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,0BAAzC;AACA,SAASC,eAAT,QAAgC,yCAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAEF,MADD;AAELG,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID;AAED,OAAO,SAASG,SAAT,CAAmBD,OAAnB,EAA4B;AACjC,SAAQE,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEb,UADC;AAEPc,MAAAA,OAAO,EAAEA;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,SAASG,QAAT,CAAkBC,KAAlB,EAAyB;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,KAAjC;AACA,SAAO;AACLL,IAAAA,IAAI,EAAEV,cADD;AAELW,IAAAA,OAAO,EAAEI;AAFJ,GAAP;AAID;AAED,OAAO,SAASG,WAAT,CAAqBV,MAAM,GAAGV,aAA9B,EAA6CW,IAA7C,EAAmDU,QAAnD,EAA6D;AAClE,SAAQN,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEF,MADC;AAEPG,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;;AAIA,QAAIU,QAAJ,EAAc;AACZA,MAAAA,QAAQ;AACT;AACF,GARD;AASD;AAED,OAAO,MAAMC,cAAc,GAAIX,IAAD,IAAU;AACtC,SAAQI,QAAD,IAAc;AACnB,QAAIQ,IAAI,GAAGlB,WAAW,CAACmB,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAtB;AACAF,IAAAA,IAAI,GAAG,EAAE,GAAGA,IAAL;AAAW,SAAGZ;AAAd,KAAP;AACAY,IAAAA,IAAI,GAAGhB,eAAe,CAACgB,IAAD,CAAtB;AACAC,IAAAA,YAAY,CAACE,OAAb,CAAqB,MAArB,EAA6BpB,WAAW,CAACiB,IAAD,CAAxC;AACAR,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEZ,aAAR;AAAuBa,MAAAA,OAAO,EAAEU;AAAhC,KAAD,CAAR;AACD,GAND;AAOD,CARM;AAUP,OAAO,SAASI,cAAT,CAAwBjB,MAAxB,EAAgCkB,EAAhC,EAAoC;AACzC,SAAQb,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEF,MADC;AAEPG,MAAAA,OAAO,EAAEe;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,SAASC,kBAAT,CAA4BnB,MAA5B,EAAoCC,IAApC,EAA0CU,QAA1C,EAAoD;AACzD,SAAQN,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEF,MADC;AAEPG,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;;AAIA,QAAIU,QAAJ,EAAc;AACZA,MAAAA,QAAQ;AACT;AACF,GARD;AASD;AAED,OAAO,MAAMS,WAAW,GAAG,CAACpB,MAAD,EAASW,QAAT,KAAsB;AAC/C,SAAO,CAACN,QAAD,EAAWgB,QAAX,KAAwB;AAC7B,QAAI;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,QAA2B/B,MAA/B;AACAC,IAAAA,KAAK,CAAC;AAAE4B,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,KAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,UAAI,CAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEzB,IAAV,CAAe0B,IAAf,MAAwB,IAA5B,EAAkC;AAChC,YAAIC,MAAM,GAAGP,QAAQ,GAAGQ,IAAX,CAAgBD,MAA7B;AACA,YAAIA,MAAJ,EAAYA,MAAM,CAACE,UAAP,GAFoB,CAGhC;;AACAzB,QAAAA,QAAQ,CAAC;AAAEH,UAAAA,IAAI,EAAEF,MAAM,IAAIT;AAAlB,SAAD,CAAR;AACAO,QAAAA,iBAAiB,GALe,CAMhC;;AACA,YAAIa,QAAJ,EAAc;AACZA,UAAAA,QAAQ;AACT;AACF;AACF,KAbH,EAcGoB,KAdH,CAcUC,KAAD,IAAW;AAChBxB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBuB,KAArB;AACD,KAhBH;AAiBD,GAnBD;AAoBD,CArBM;AAuBP,OAAO,MAAMC,cAAc,GAAG,CAACjC,MAAD,EAASG,OAAT,KAAqB;AACjDK,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,SAAO;AACLP,IAAAA,IAAI,EAAEF,MADD;AAELG,IAAAA;AAFK,GAAP;AAID,CANM;AAQP,OAAO,MAAM+B,YAAY,GAAI/B,OAAD,IAAcE,QAAD,IAAc;AACrD,SAAOA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEd,aAAR;AAAuBe,IAAAA,OAAO,EAAEA,OAAO,CAACI;AAAxC,GAAD,CAAf;AACD,CAFM","sourcesContent":["import {\n  REFRESH_TOKEN,\n  SOCKET_SET,\n  SET_USER_DATA,\n  SIGNOUT_USER_SUCCESS,\n  SET_USER_TOKEN\n} from '../ActionTypes';\nimport { logout } from '../../services/api/routes/auth';\nimport axios from '../../services/api/config';\n\nimport { decryptData, encryptData } from '../../../src/util/Crypto';\nimport { prepareUserData } from '../../../src/services/api/services/Auth';\nimport { clearLocalStorage } from '../../util/common';\n\nexport function userSignIn(action, data) {\n  return {\n    type: action,\n    payload: data,\n  };\n}\n\nexport function setSocket(payload) {\n  return (dispatch) => {\n    dispatch({\n      type: SOCKET_SET,\n      payload: payload,\n    });\n  };\n}\n\nexport function setToken(token) {\n  console.log(\"setToken -> token\", token)\n  return {\n    type: SET_USER_TOKEN,\n    payload: token,\n  };\n}\n\nexport function setUserData(action = SET_USER_DATA, data, callback) {\n  return (dispatch) => {\n    dispatch({\n      type: action,\n      payload: data,\n    });\n    if (callback) {\n      callback();\n    }\n  };\n}\n\nexport const updateUserData = (data) => {\n  return (dispatch) => {\n    let user = decryptData(localStorage.getItem('user'));\n    user = { ...user, ...data };\n    user = prepareUserData(user);\n    localStorage.setItem('user', encryptData(user));\n    dispatch({ type: SET_USER_DATA, payload: user });\n  };\n};\n\nexport function setReduxHomeId(action, id) {\n  return (dispatch) => {\n    dispatch({\n      type: action,\n      payload: id,\n    });\n  };\n}\n\nexport function setDefaultPassword(action, data, callback) {\n  return (dispatch) => {\n    dispatch({\n      type: action,\n      payload: data,\n    });\n    if (callback) {\n      callback();\n    }\n  };\n}\n\nexport const userSignOut = (action, callback) => {\n  return (dispatch, getState) => {\n    let { method, url, baseURL } = logout;\n    axios({ method, url, baseURL })\n      .then((response) => {\n        if (response?.data.code === 'OK') {\n          let socket = getState().auth.socket\n          if (socket) socket.disconnect()\n          // setTimeout(() => {\n          dispatch({ type: action || SIGNOUT_USER_SUCCESS });\n          clearLocalStorage();\n          // }, 1000);\n          if (callback) {\n            callback();\n          }\n        }\n      })\n      .catch((error) => {\n        console.log('error', error);\n      });\n  };\n};\n\nexport const setOtpVerified = (action, payload) => {\n  console.log('-> setOtpVerified');\n  return {\n    type: action,\n    payload,\n  };\n};\n\nexport const refreshToken = (payload) => (dispatch) => {\n  return dispatch({ type: REFRESH_TOKEN, payload: payload.token });\n};\n"]},"metadata":{},"sourceType":"module"}