{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/components/Todo/TodoActions.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Etar, Consent, Ebox, DrugRecord, CarePlan, Xray, ChangeSticker } from '../../assets/images/resident-detail/todo/index';\nimport { Notes, Reminder } from '../../assets/images/pmr/index';\nimport { AddNote, Check, View, Call } from '../../assets/images/todo/index';\nimport POADetail from './POADetail';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport { TODO_CATEGORY, SUB_CATEGORY, STATUS, MAP_TODOS } from '../../constants/todo';\nimport { SUB_MODULE } from '../../constants/subscription';\nimport { displayDateTime, displayDate, displayTime, currentDate } from '../../util/moment';\nimport { getTodoName, getIcons } from '../../util/todo';\nimport Confirm from '../common/ConfirmPopup';\nimport Todo from '../../containers/Todo';\nimport { NoteUpsert, NoteList } from '../NotesPopup';\nimport ReminderForm from '../common/Reminder';\nimport { Spin, Button } from '../common';\nimport { canPerformAction, isModuleAccessible, checkArrayOfModuleAccessible, isDrOrNp, getUserNameWithDesignation } from '../../util/common';\nimport { MODULE, ACTIONS } from '../../constants/subscription';\nimport NotesModal from '../../components/NotesPopup/List';\nimport ReminderModal from '../../components/ReminderPopup/List';\nimport { performTodo } from '../../services/api/routes/prescriptionTodo';\nconst {\n  PMR,\n  NURSE_REVIEW_1,\n  NURSE_REVIEW_2\n} = SUB_CATEGORY.MED_REVIEW;\n\nconst Actions = props => {\n  var _detail$residentId, _detail$residentId2;\n\n  const {\n    todoList: propTodoList,\n    onPerformTodo,\n    category,\n    onTodoUpdate,\n    loading,\n    authUser,\n    detail: propDetail\n  } = props;\n  let detail = { ...propDetail\n  };\n\n  if (!detail.residentId) {\n    detail.residentId = { ...detail.patientId\n    };\n  }\n\n  useEffect(() => {\n    let tempTodoList = propTodoList;\n\n    if (category === TODO_CATEGORY['MED_REVIEW']) {\n      tempTodoList = propTodoList.filter(d => ![PMR, NURSE_REVIEW_1, NURSE_REVIEW_2].includes(d.subCategory));\n    }\n\n    tempTodoList = tempTodoList.filter(x => {\n      let todosParams = {\n        moduleId: MODULE.RX_ORDER,\n        subModuleId: SUB_MODULE.RX_ORDER_TODO,\n        checkSubAction: x.subCategory,\n        actionKey: 'value'\n      };\n\n      if (category === TODO_CATEGORY['MED_REVIEW']) {\n        todosParams.moduleId = MODULE.PMR;\n        todosParams.subModuleId = SUB_MODULE.PMR_TODO;\n      }\n\n      if (canPerformAction(todosParams)) {\n        return x;\n      }\n    });\n    setTodoList(tempTodoList);\n  }, [propTodoList]);\n  const [addNote, setAddNote] = useState(false);\n  const [note, setNote] = useState(false);\n  const [reminder, setReminder] = useState(false);\n  const [reminderObj, setReminderObj] = useState(null);\n  const [noteObj, setNoteObj] = useState(null);\n  const [notesModal, setNotesModal] = useState(false);\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [reminderFilterOptions, setReminderFilterOptions] = useState({});\n  const [reminderModal, setReminderModal] = useState(false);\n  const [prescriptionOrderIds, setPrescriptionOrderIds] = useState('');\n  const [todoList, setTodoList] = useState([]);\n  const currentModalData = React.useRef();\n  const todoType = category === TODO_CATEGORY['PRESCRIPTION'] ? SUB_CATEGORY.PRESCRIPTION : category === TODO_CATEGORY['MED_REVIEW'] ? SUB_CATEGORY.MED_REVIEW : null;\n  const disableStyle = {\n    pointerEvents: 'none',\n    opacity: '0.5'\n  };\n  const canPerformTodo = useMemo(() => {\n    const performTodoParams = {\n      moduleId: MODULE.TODO,\n      actiontoCheck: ACTIONS.YES_NA.CODE\n    };\n\n    if (isModuleAccessible(MODULE.TODO) && canPerformAction(performTodoParams)) {\n      return true;\n    }\n  }, [category]);\n  const canUndoTodo = useMemo(() => {\n    const performTodoParams = {\n      moduleId: MODULE.TODO,\n      actiontoCheck: ACTIONS.UNDO.CODE\n    };\n\n    if (isModuleAccessible(MODULE.TODO) && canPerformAction(performTodoParams)) {\n      return true;\n    }\n  }, [category]);\n\n  const text = todo => {\n    var _detail$physicianId;\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tooltip-desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"desc-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, todo.subCategory === todoType['VERBAL_ORDER'] && todo.completedBy._id !== ((_detail$physicianId = detail.physicianId) === null || _detail$physicianId === void 0 ? void 0 : _detail$physicianId._id) ? 'Co-Signed' : '', ' ', \"By\", ' ', getUserNameWithDesignation(todo.completedBy), ' ', \"at \", displayDateTime(todo.completedAt)));\n  };\n\n  const performTodo = (todo, type, notApplicable) => {\n    if (isAllowTodo(todo, type === 'check' ? 'yes' : '')) return;\n    let request = {\n      todoId: todo._id,\n      undo: type === 'undo',\n      date: displayDate(Date.now()),\n      time: displayTime(Date.now()),\n      notApplicable: notApplicable || false,\n      checkType: todo.subCategory\n    };\n\n    if (category == TODO_CATEGORY.MED_REVIEW) {\n      request = { ...request,\n        pmrId: detail._id,\n        todoType: todo.subCategory\n      };\n      delete request.todoId;\n      delete request.checkType;\n    }\n\n    if (type === 'undo') {\n      Confirm({\n        visible: true,\n        title: `Are you sure you want to undo '${getTodoName(todo.category, todo.subCategory)}'?`,\n        onOk: onPerformTodo(request)\n      });\n    } else {\n      onPerformTodo(request);\n    }\n  };\n\n  const visibleAddNote = (visible, data) => {\n    if (visible) {\n      setNoteObj({});\n    } else setNoteObj(null);\n\n    if (data) onTodoUpdate(data);\n    setAddNote(visible);\n  };\n\n  const visibleNote = (visible, data) => {\n    if (visible) {\n      setNoteObj({});\n    } else setNoteObj(null);\n\n    if (data) onTodoUpdate(data);\n    setNote(visible);\n  };\n\n  const visibleReminder = (visible, data) => {\n    if (visible) {\n      setReminderObj({});\n    } else setReminderObj(null);\n\n    if (data) onTodoUpdate(data);\n    setReminder(visible);\n  };\n\n  const isAllowTodo = (todo, str) => {\n    var _todo$excludedPartici;\n\n    let allowed = true; //check verbal order condition in N/A and UNDO\n\n    if (str !== 'yes' && MAP_TODOS['VERBAL_ORDER'].includes(todo.subCategory)) allowed = false;\n\n    if (str === 'yes' && MAP_TODOS['VERBAL_ORDER'].includes(todo.subCategory)) {\n      //verbal order for YES and NURSE login\n      allowed = !!isDrOrNp(authUser);\n    }\n\n    if (((_todo$excludedPartici = todo.excludedParticipants) === null || _todo$excludedPartici === void 0 ? void 0 : _todo$excludedPartici.length) > 0) {\n      //for excluded participants do not allow \n      allowed = !todo.excludedParticipants.find(x => {\n        return x.userId === authUser._id && x.active;\n      });\n    }\n\n    return !allowed; //disable on return true (allowed flag should be false)\n  };\n\n  const createNotesModal = record => {\n    let obj = {\n      prescriptionOrderId: category == TODO_CATEGORY.PRESCRIPTION ? detail === null || detail === void 0 ? void 0 : detail._id : undefined,\n      pmrId: category == TODO_CATEGORY.MED_REVIEW ? detail === null || detail === void 0 ? void 0 : detail._id : undefined,\n      category: category,\n      subCategory: record.subCategory\n    };\n    let options = {\n      query: {\n        find: { ...obj\n        },\n        populate: [{\n          addedBy: []\n        }]\n      }\n    };\n\n    if (category == TODO_CATEGORY.PRESCRIPTION) {\n      setPrescriptionOrderIds({\n        prescriptionOrderId: detail._id\n      });\n    } else if (category == TODO_CATEGORY.MED_REVIEW) {\n      setPrescriptionOrderIds({\n        pmrId: detail._id\n      });\n    }\n\n    currentModalData.current = { ...record\n    };\n    setNotesFilterOptions(options);\n    setNotesModal(true);\n  };\n\n  const visibleNotesModal = (visible, record, str, noteCount = null) => {\n    setNotesModal(visible);\n    setNotesFilterOptions({});\n    if (!visible && str !== 'cancel') fetch();\n\n    if (noteCount != null) {\n      let clonedTodos = [...todoList];\n      clonedTodos = clonedTodos.map(tl => {\n        if (tl.subCategory === currentModalData.current.subCategory) {\n          tl.notesCount = noteCount;\n        }\n\n        return tl;\n      });\n      setTodoList(clonedTodos);\n    }\n  };\n\n  const visibleReminderModal = (visible, record, str, remCount = null) => {\n    setReminderModal(visible);\n    setReminderFilterOptions({});\n    if (!visible && str !== 'cancel') fetch();\n\n    if (remCount != null) {\n      let clonedTodos = [...todoList];\n      clonedTodos = clonedTodos.map(tl => {\n        if (tl.subCategory === currentModalData.current.subCategory) {\n          tl.reminderCount = remCount;\n        }\n\n        return tl;\n      });\n      setTodoList(clonedTodos);\n    }\n  };\n\n  const createReminderModal = record => {\n    let obj = {\n      prescriptionOrderId: category == TODO_CATEGORY.PRESCRIPTION ? detail === null || detail === void 0 ? void 0 : detail._id : undefined,\n      pmrId: category == TODO_CATEGORY.MED_REVIEW ? detail === null || detail === void 0 ? void 0 : detail._id : undefined,\n      category: category,\n      subCategory: record.subCategory\n    };\n    let options = {\n      query: {\n        find: { ...obj\n        },\n        populate: [{\n          addedBy: []\n        }]\n      }\n    };\n\n    if (category == TODO_CATEGORY.PRESCRIPTION) {\n      setPrescriptionOrderIds({\n        prescriptionOrderId: detail._id\n      });\n    } else if (category == TODO_CATEGORY.MED_REVIEW) {\n      setPrescriptionOrderIds({\n        pmrId: detail._id\n      });\n    }\n\n    currentModalData.current = { ...record\n    };\n    setReminderFilterOptions(options);\n    setReminderModal(true);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listing-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Spin, {\n    spinning: loading,\n    str: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }\n  }, todoList.map(todo => /*#__PURE__*/React.createElement(\"li\", {\n    key: todo._id,\n    className: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: getIcons(todo.subCategory),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 23\n    }\n  }, getTodoName(category, todo.subCategory)), todo.subCategory === todoType.CONSENT_OBTAINED ? /*#__PURE__*/React.createElement(POADetail, {\n    poaDetail: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 25\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 21\n    }\n  }, todo.status === STATUS.COMPLETED ? /*#__PURE__*/React.createElement(React.Fragment, null, todo.completedBy ? /*#__PURE__*/React.createElement(Tooltip, {\n    placement: \"top\",\n    overlay: text(todo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"check\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(Check, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 33\n    }\n  }))) : null, canUndoTodo ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"undo\",\n    style: isAllowTodo(todo) ? disableStyle : null,\n    onClick: () => performTodo(todo, 'undo'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 31\n    }\n  }, \"undo\") : null) : /*#__PURE__*/React.createElement(React.Fragment, null, canPerformTodo ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"yes\",\n    style: isAllowTodo(todo, 'yes') ? disableStyle : null,\n    onClick: () => performTodo(todo, 'check'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 35\n    }\n  }, \"yes\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"null\",\n    style: isAllowTodo(todo) ? disableStyle : null,\n    onClick: () => performTodo(todo, 'check', true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 35\n    }\n  }, \"N/A\")) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"note\",\n    onClick: () => createNotesModal(todo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Notes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 25\n    }\n  }, \"Notes\"), todo.notesCount ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"tot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 27\n    }\n  }, todo.notesCount) : null), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"reminder\",\n    onClick: () => createReminderModal(todo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Reminder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 25\n    }\n  }, \"reminder\"), todo.reminderCount ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"tot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 27\n    }\n  }, todo.reminderCount) : null))))))), addNote && /*#__PURE__*/React.createElement(NoteUpsert, {\n    visible: addNote,\n    options: noteObj,\n    onUpdate: data => visibleAddNote(false, data),\n    onCancel: () => visibleAddNote(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }\n  }), note && /*#__PURE__*/React.createElement(NoteList, {\n    visible: note,\n    options: noteObj,\n    onCancel: () => visibleNote(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 11\n    }\n  }), reminder && /*#__PURE__*/React.createElement(ReminderForm, {\n    visible: reminder,\n    options: reminderObj,\n    onOk: data => visibleReminder(false, data),\n    onCancel: () => visibleReminder(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 11\n    }\n  }), notesModal && /*#__PURE__*/React.createElement(NotesModal, {\n    visible: notesModal,\n    filterOptions: notesFilterOptions,\n    onCancel: noteCount => visibleNotesModal(false, null, 'cancel', noteCount),\n    onOk: () => visibleNotesModal(false),\n    isUpsertList: true,\n    modalTitle: `View Note - ${detail.orderNumber || detail.pmrId}`,\n    xRayNumber: detail.orderNumber || detail.pmrId,\n    addData: { ...prescriptionOrderIds,\n      residentId: (_detail$residentId = detail.residentId) === null || _detail$residentId === void 0 ? void 0 : _detail$residentId._id,\n      category: category,\n      subCategory: currentModalData.current.subCategory\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 11\n    }\n  }), reminderModal && /*#__PURE__*/React.createElement(ReminderModal, {\n    visible: reminderModal,\n    filterOptions: reminderFilterOptions,\n    onCancel: remCount => visibleReminderModal(false, null, 'cancel', remCount),\n    onOk: () => visibleReminderModal(false),\n    isUpsertList: true,\n    modalTitle: `View Reminder - ${detail.orderNumber || detail.pmrId}`,\n    xRayNumber: detail.orderNumber || detail.pmrId,\n    addData: { ...prescriptionOrderIds,\n      residentId: (_detail$residentId2 = detail.residentId) === null || _detail$residentId2 === void 0 ? void 0 : _detail$residentId2._id,\n      category: category,\n      subCategory: currentModalData.current.subCategory\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default Actions;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/components/Todo/TodoActions.js"],"names":["React","useState","useEffect","useMemo","Etar","Consent","Ebox","DrugRecord","CarePlan","Xray","ChangeSticker","Notes","Reminder","AddNote","Check","View","Call","POADetail","Tooltip","TODO_CATEGORY","SUB_CATEGORY","STATUS","MAP_TODOS","SUB_MODULE","displayDateTime","displayDate","displayTime","currentDate","getTodoName","getIcons","Confirm","Todo","NoteUpsert","NoteList","ReminderForm","Spin","Button","canPerformAction","isModuleAccessible","checkArrayOfModuleAccessible","isDrOrNp","getUserNameWithDesignation","MODULE","ACTIONS","NotesModal","ReminderModal","performTodo","PMR","NURSE_REVIEW_1","NURSE_REVIEW_2","MED_REVIEW","Actions","props","todoList","propTodoList","onPerformTodo","category","onTodoUpdate","loading","authUser","detail","propDetail","residentId","patientId","tempTodoList","filter","d","includes","subCategory","x","todosParams","moduleId","RX_ORDER","subModuleId","RX_ORDER_TODO","checkSubAction","actionKey","PMR_TODO","setTodoList","addNote","setAddNote","note","setNote","reminder","setReminder","reminderObj","setReminderObj","noteObj","setNoteObj","notesModal","setNotesModal","notesFilterOptions","setNotesFilterOptions","reminderFilterOptions","setReminderFilterOptions","reminderModal","setReminderModal","prescriptionOrderIds","setPrescriptionOrderIds","currentModalData","useRef","todoType","PRESCRIPTION","disableStyle","pointerEvents","opacity","canPerformTodo","performTodoParams","TODO","actiontoCheck","YES_NA","CODE","canUndoTodo","UNDO","text","todo","completedBy","_id","physicianId","completedAt","type","notApplicable","isAllowTodo","request","todoId","undo","date","Date","now","time","checkType","pmrId","visible","title","onOk","visibleAddNote","data","visibleNote","visibleReminder","str","allowed","excludedParticipants","length","find","userId","active","createNotesModal","record","obj","prescriptionOrderId","undefined","options","query","populate","addedBy","current","visibleNotesModal","noteCount","fetch","clonedTodos","map","tl","notesCount","visibleReminderModal","remCount","reminderCount","createReminderModal","CONSENT_OBTAINED","status","COMPLETED","orderNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Etar,\n  Consent,\n  Ebox,\n  DrugRecord,\n  CarePlan,\n  Xray,\n  ChangeSticker,\n} from '../../assets/images/resident-detail/todo/index';\nimport { Notes, Reminder } from '../../assets/images/pmr/index';\nimport { AddNote, Check, View, Call } from '../../assets/images/todo/index';\nimport POADetail from './POADetail';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport {\n  TODO_CATEGORY,\n  SUB_CATEGORY,\n  STATUS,\n  MAP_TODOS,\n} from '../../constants/todo';\nimport { SUB_MODULE } from '../../constants/subscription';\nimport {\n  displayDateTime,\n  displayDate,\n  displayTime,\n  currentDate,\n} from '../../util/moment';\nimport { getTodoName, getIcons } from '../../util/todo';\nimport Confirm from '../common/ConfirmPopup';\nimport Todo from '../../containers/Todo';\nimport { NoteUpsert, NoteList } from '../NotesPopup';\nimport ReminderForm from '../common/Reminder';\nimport { Spin, Button } from '../common';\n\nimport {\n  canPerformAction,\n  isModuleAccessible,\n  checkArrayOfModuleAccessible,\n  isDrOrNp,\n  getUserNameWithDesignation,\n} from '../../util/common';\nimport { MODULE, ACTIONS } from '../../constants/subscription';\nimport NotesModal from '../../components/NotesPopup/List';\nimport ReminderModal from '../../components/ReminderPopup/List';\nimport { performTodo } from '../../services/api/routes/prescriptionTodo';\nconst { PMR, NURSE_REVIEW_1, NURSE_REVIEW_2 } = SUB_CATEGORY.MED_REVIEW;\nconst Actions = (props) => {\n  const {\n    todoList: propTodoList,\n    onPerformTodo,\n    category,\n    onTodoUpdate,\n    loading,\n    authUser,\n    detail: propDetail,\n  } = props;\n\n  let detail = { ...propDetail };\n  if (!detail.residentId) {\n    detail.residentId = { ...detail.patientId };\n  }\n\n  useEffect(() => {\n    let tempTodoList = propTodoList\n    if (category === TODO_CATEGORY['MED_REVIEW']) {\n      tempTodoList = propTodoList.filter(d => ![PMR, NURSE_REVIEW_1, NURSE_REVIEW_2].includes(d.subCategory))\n    }\n    tempTodoList = tempTodoList.filter(x => {\n      let todosParams = {\n        moduleId: MODULE.RX_ORDER,\n        subModuleId: SUB_MODULE.RX_ORDER_TODO,\n        checkSubAction: x.subCategory,\n        actionKey: 'value'\n      };\n      if (category === TODO_CATEGORY['MED_REVIEW']) {\n        todosParams.moduleId = MODULE.PMR\n        todosParams.subModuleId = SUB_MODULE.PMR_TODO\n      }\n      if (canPerformAction(todosParams)) {\n        return x\n      }\n    })\n    setTodoList(tempTodoList)\n  }, [propTodoList])\n\n  const [addNote, setAddNote] = useState(false);\n  const [note, setNote] = useState(false);\n  const [reminder, setReminder] = useState(false);\n  const [reminderObj, setReminderObj] = useState(null);\n  const [noteObj, setNoteObj] = useState(null);\n  const [notesModal, setNotesModal] = useState(false);\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [reminderFilterOptions, setReminderFilterOptions] = useState({});\n  const [reminderModal, setReminderModal] = useState(false);\n  const [prescriptionOrderIds, setPrescriptionOrderIds] = useState('');\n  const [todoList, setTodoList] = useState([]);\n  const currentModalData = React.useRef();\n\n  const todoType =\n    category === TODO_CATEGORY['PRESCRIPTION']\n      ? SUB_CATEGORY.PRESCRIPTION\n      : category === TODO_CATEGORY['MED_REVIEW']\n        ? SUB_CATEGORY.MED_REVIEW\n        : null;\n\n  const disableStyle = {\n    pointerEvents: 'none',\n    opacity: '0.5'\n  }\n\n  const canPerformTodo = useMemo(() => {\n    const performTodoParams = {\n      moduleId: MODULE.TODO,\n      actiontoCheck: ACTIONS.YES_NA.CODE,\n    };\n    if (isModuleAccessible(MODULE.TODO) && canPerformAction(performTodoParams)) {\n      return true\n    }\n  }, [category])\n\n  const canUndoTodo = useMemo(() => {\n    const performTodoParams = {\n      moduleId: MODULE.TODO,\n      actiontoCheck: ACTIONS.UNDO.CODE,\n    };\n    if (isModuleAccessible(MODULE.TODO) && canPerformAction(performTodoParams)) {\n      return true\n    }\n  }, [category])\n\n  const text = (todo) => (\n    <span className='tooltip-desc'>\n      <p className='desc-1'>\n        {todo.subCategory === todoType['VERBAL_ORDER'] &&\n          todo.completedBy._id !== detail.physicianId?._id\n          ? 'Co-Signed'\n          : ''}{' '}\n        By{' '}\n        {\n          getUserNameWithDesignation(todo.completedBy)\n        }{' '}\n        at {displayDateTime(todo.completedAt)}\n      </p>\n    </span>\n  );\n\n  const performTodo = (todo, type, notApplicable) => {\n\n    if (isAllowTodo(todo, type === 'check' ? 'yes' : ''))\n      return\n    let request = {\n      todoId: todo._id,\n      undo: type === 'undo',\n      date: displayDate(Date.now()),\n      time: displayTime(Date.now()),\n      notApplicable: notApplicable || false,\n      checkType: todo.subCategory,\n    };\n    if (category == TODO_CATEGORY.MED_REVIEW) {\n      request = {\n        ...request,\n        pmrId: detail._id,\n        todoType: todo.subCategory,\n      }\n      delete request.todoId\n      delete request.checkType\n    }\n    if (type === 'undo') {\n      Confirm({\n        visible: true,\n        title: `Are you sure you want to undo '${getTodoName(\n          todo.category,\n          todo.subCategory\n        )}'?`,\n        onOk: onPerformTodo(request),\n      });\n    } else {\n      onPerformTodo(request);\n    }\n  };\n\n  const visibleAddNote = (visible, data) => {\n    if (visible) {\n      setNoteObj({});\n    } else setNoteObj(null);\n    if (data) onTodoUpdate(data);\n    setAddNote(visible);\n  };\n\n  const visibleNote = (visible, data) => {\n    if (visible) {\n      setNoteObj({});\n    } else setNoteObj(null);\n    if (data) onTodoUpdate(data);\n    setNote(visible);\n  };\n\n  const visibleReminder = (visible, data) => {\n    if (visible) {\n      setReminderObj({});\n    } else setReminderObj(null);\n    if (data) onTodoUpdate(data);\n    setReminder(visible);\n  };\n\n  const isAllowTodo = (todo, str) => {\n    let allowed = true;\n    //check verbal order condition in N/A and UNDO\n    if (str !== 'yes' && MAP_TODOS['VERBAL_ORDER'].includes(todo.subCategory))\n      allowed = false;\n    if (str === 'yes' && MAP_TODOS['VERBAL_ORDER'].includes(todo.subCategory)) {\n      //verbal order for YES and NURSE login\n      allowed = !!isDrOrNp(authUser)\n    }\n    if (todo.excludedParticipants?.length > 0) {\n      //for excluded participants do not allow \n      allowed = !todo.excludedParticipants.find(x => {\n        return x.userId === authUser._id && x.active\n      })\n    }\n    return !allowed; //disable on return true (allowed flag should be false)\n  };\n\n  const createNotesModal = (record) => {\n    let obj = {\n      prescriptionOrderId:\n        category == TODO_CATEGORY.PRESCRIPTION ? detail?._id : undefined,\n      pmrId: category == TODO_CATEGORY.MED_REVIEW ? detail?._id : undefined,\n      category: category,\n      subCategory: record.subCategory,\n    };\n    let options = {\n      query: {\n        find: { ...obj },\n        populate: [{ addedBy: [] }],\n      },\n    };\n    if (category == TODO_CATEGORY.PRESCRIPTION) {\n      setPrescriptionOrderIds({ prescriptionOrderId: detail._id });\n    } else if (category == TODO_CATEGORY.MED_REVIEW) {\n      setPrescriptionOrderIds({ pmrId: detail._id });\n    }\n    currentModalData.current = { ...record };\n    setNotesFilterOptions(options);\n    setNotesModal(true);\n  };\n\n  const visibleNotesModal = (visible, record, str, noteCount = null) => {\n    setNotesModal(visible);\n    setNotesFilterOptions({});\n    if (!visible && str !== 'cancel') fetch();\n    if (noteCount != null) {\n      let clonedTodos = [...todoList]\n      clonedTodos = clonedTodos.map(tl => {\n        if (tl.subCategory === currentModalData.current.subCategory) {\n          tl.notesCount = noteCount;\n        }\n        return tl;\n      });\n      setTodoList(clonedTodos)\n    }\n\n  };\n\n  const visibleReminderModal = (visible, record, str, remCount = null) => {\n    setReminderModal(visible);\n    setReminderFilterOptions({});\n    if (!visible && str !== 'cancel') fetch();\n    if (remCount != null) {\n      let clonedTodos = [...todoList]\n      clonedTodos = clonedTodos.map(tl => {\n        if (tl.subCategory === currentModalData.current.subCategory) {\n          tl.reminderCount = remCount;\n        }\n        return tl;\n      });\n      setTodoList(clonedTodos)\n    }\n  };\n\n  const createReminderModal = (record) => {\n    let obj = {\n      prescriptionOrderId:\n        category == TODO_CATEGORY.PRESCRIPTION ? detail?._id : undefined,\n      pmrId: category == TODO_CATEGORY.MED_REVIEW ? detail?._id : undefined,\n      category: category,\n      subCategory: record.subCategory,\n    };\n    let options = {\n      query: {\n        find: { ...obj },\n        populate: [{ addedBy: [] }],\n      },\n    };\n\n    if (category == TODO_CATEGORY.PRESCRIPTION) {\n      setPrescriptionOrderIds({ prescriptionOrderId: detail._id });\n    } else if (category == TODO_CATEGORY.MED_REVIEW) {\n      setPrescriptionOrderIds({ pmrId: detail._id });\n    }\n    currentModalData.current = { ...record };\n    setReminderFilterOptions(options);\n    setReminderModal(true);\n  };\n\n  return (\n    <>\n      <div className='listing-top'>\n        {loading ? (\n          <Spin spinning={loading} str='center' />\n        ) : (\n            <ul>\n              {todoList.map((todo) => (\n                <li key={todo._id} className='active'>\n                  <a>\n                    <div className='left'>\n                      <img src={getIcons(todo.subCategory)} />\n                      <span className='title'>\n                        {getTodoName(category, todo.subCategory)}\n                      </span>\n                      {todo.subCategory === todoType.CONSENT_OBTAINED ? (\n                        <POADetail poaDetail={null} />\n                      ) : null}\n                    </div>\n                    <div className='middle'>\n                      {todo.status === STATUS.COMPLETED ? (\n                        <>\n                          {todo.completedBy ? (\n                            <Tooltip placement='top' overlay={text(todo)}>\n                              <span className='check'>\n                                <Check />\n                              </span>\n                            </Tooltip>\n                          ) : null}\n                          {\n                            canUndoTodo ?\n                              <span\n                                className='undo'\n                                style={isAllowTodo(todo) ? disableStyle : null}\n                                onClick={() => performTodo(todo, 'undo')}\n                              >\n                                undo\n                              </span>\n                              : null\n                          }\n                        </>\n                      ) : (\n                          <>\n                            {\n                              canPerformTodo ?\n                                <>\n                                  <span\n                                    className='yes'\n                                    style={isAllowTodo(todo, 'yes') ? disableStyle : null}\n                                    onClick={() => performTodo(todo, 'check')}\n                                  >\n                                    yes\n                                  </span>\n                                  <span\n                                    className='null'\n                                    style={isAllowTodo(todo) ? disableStyle : null}\n                                    onClick={() => performTodo(todo, 'check', true)}\n                                  >\n                                    N/A\n                                  </span>\n                                </>\n                                : null\n                            }\n                          </>\n                        )}\n                    </div>\n                    <div className='right'>\n                      {/* <span className='add-note' onClick={() => visibleAddNote(true)}>\n                                            <AddNote />\n                                            <span >Add Notes</span>\n                                        </span> */}\n                      <span\n                        className='note'\n                        onClick={() => createNotesModal(todo)}\n                      >\n                        <Notes />\n                        <span>Notes</span>\n                        {todo.notesCount ? (\n                          <span className='tot'>{todo.notesCount}</span>\n                        ) : null}\n                      </span>\n                      <span\n                        className='reminder'\n                        onClick={() => createReminderModal(todo)}\n                      >\n                        <Reminder />\n                        <span>reminder</span>\n                        {todo.reminderCount ? (\n                          <span className='tot'>{todo.reminderCount}</span>\n                        ) : null}\n                      </span>\n                    </div>\n                  </a>\n                </li>\n              ))}\n              {/* {\n                    isModuleAccessible(MODULE.TODO) && canPerformAction(validationParams1) ?\n                        <li>\n                            <a href=''>\n                                <div className='left'>\n                                    <ChangeSticker className='cs' />\n                                    <span className='title'>Chanx`xge Sticker</span>\n                                </div>\n                                <div className='middle'>\n                                    <span className='yes'>yes</span>\n                                    <span className='null'>N/A</span>\n                                </div>\n                                <div className='right'>\n                                    <span className='add-note'>\n                                        <AddNote />\n                                        <span>Add Notes</span>\n                                    </span>\n                                    <span className='note'>\n                                        <Notes />\n                                        <span>Notes</span>\n                                        <span className='tot'>05</span>\n                                    </span>\n                                    <span className='reminder'>\n                                        <Reminder />\n                                        <span>reminder</span>\n                                        <span className='tot'>05</span>\n                                    </span>\n                                </div>\n                            </a>\n                        </li>\n                        : null\n                } */}\n            </ul>\n          )\n        }\n      </div >\n\n      {addNote && (\n        <NoteUpsert\n          visible={addNote}\n          options={noteObj}\n          onUpdate={(data) => visibleAddNote(false, data)}\n          onCancel={() => visibleAddNote(false)}\n        />\n      )}\n      {\n        note && (\n          <NoteList\n            visible={note}\n            options={noteObj}\n            onCancel={() => visibleNote(false)}\n          />\n        )\n      }\n      {\n        reminder && (\n          <ReminderForm\n            visible={reminder}\n            options={reminderObj}\n            onOk={(data) => visibleReminder(false, data)}\n            onCancel={() => visibleReminder(false)}\n          />\n        )\n      }\n\n      {\n        notesModal && (\n          <NotesModal\n            visible={notesModal}\n            filterOptions={notesFilterOptions}\n            onCancel={noteCount => visibleNotesModal(false, null, 'cancel', noteCount)}\n            onOk={() => visibleNotesModal(false)}\n            isUpsertList={true}\n            modalTitle={`View Note - ${detail.orderNumber || detail.pmrId}`}\n            xRayNumber={detail.orderNumber || detail.pmrId}\n            addData={{\n              ...prescriptionOrderIds,\n              residentId: detail.residentId?._id,\n              category: category,\n              subCategory: currentModalData.current.subCategory,\n            }}\n          />\n        )\n      }\n\n      {\n        reminderModal && (\n          <ReminderModal\n            visible={reminderModal}\n            filterOptions={reminderFilterOptions}\n            onCancel={remCount => visibleReminderModal(false, null, 'cancel', remCount)}\n            onOk={() => visibleReminderModal(false)}\n            isUpsertList={true}\n            modalTitle={`View Reminder - ${detail.orderNumber || detail.pmrId}`}\n            xRayNumber={detail.orderNumber || detail.pmrId}\n            addData={{\n              ...prescriptionOrderIds,\n              residentId: detail.residentId?._id,\n              category: category,\n              subCategory: currentModalData.current.subCategory,\n            }}\n          />\n        )\n      }\n    </>\n  );\n};\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}