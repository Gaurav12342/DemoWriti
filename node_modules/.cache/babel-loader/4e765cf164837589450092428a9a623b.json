{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/components/common/Upload/Uploader.js\";\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactModal from 'react-modal';\nimport FileList from './FileList';\nimport Button from './../Button';\nimport { useBoolean, useDrop } from './../../../hooks';\nimport { Toast } from '../../../components/common';\nexport const FILE_CATEGORY = {\n  IMAGE: 'IMAGE',\n  PDF: 'PDF',\n  DOC: 'DOC',\n  XLS: 'XLS',\n  JSON: 'JSON',\n  EXE: 'EXE'\n};\nexport const FILE_TYPES = {\n  IMAGE: ['image/png', 'image/jpeg', 'image/jpg', 'image/webp'],\n  PDF: ['application/pdf'],\n  DOC: ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n  MEDIA: ['audio/webm', 'video/webm', 'audio/mpeg', 'video/mpeg', 'video/mp4'],\n  CSV: ['text/csv'],\n  XLS: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n  JSON: ['application/json', 'application/javascript'],\n  // application/javascript is use for JSONP(JSON with padding)\n  EXE: ['application/octet-stream', 'application/x-msdownload', 'application/exe', 'application/x-ms-dos-executable']\n};\nexport const extensions = {\n  IMAGE: ['.png', '.jpeg', '.webp', '.jpg', '.jpeg'],\n  PDF: ['.pdf'],\n  DOC: ['.doc', '.docx'],\n  MEDIA: ['.mp3', '.mp4', '.webm'],\n  CSV: ['.csv'],\n  XLS: ['.xls', '.xlsx'],\n  JSON: ['.json'],\n  EXE: ['.exe']\n};\n\nconst Uploader = ({\n  visible = false,\n  //is modal now visible\n  shouldClose = false,\n  //can user close by clicking in overlay or ESC key?\n  onRequestClose = () => {},\n  //handle close modal\n  defaultList = [],\n  // sample : [ {path} ]\n  className = 'virtual-visit-wrap',\n  title = 'Upload Files',\n  //Modal Title\n  multiple = false,\n  //can user select multiple files\n  allowedTypes = [],\n  //leave empty if allow any type of file\n  maxSizeInMB = 1,\n  fileLength,\n  uploadOnSelect = false,\n  //start Uploading files as soon as user select files\n  uploadUrl,\n  //request endpoint to upload url\n  extraHeaders = {},\n  //extra headers to pass while uploading file\n  extraData = {},\n  //extra data to pass while uploading file\n  onSuccess = () => {},\n  //Callback when files are uploaded\n  onError = () => {} //Callback when any error while uploading files\n\n}) => {\n  allowedTypes = [...allowedTypes.flat()];\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploadingTrue, setUploadingFalse] = useBoolean(false);\n  const inputRef = useRef(null);\n  const fileListRef = useRef(null);\n  const [error, setError] = useState([]);\n  useEffect(() => {\n    if (!!defaultList && Array.isArray(defaultList) && defaultList.length > 0 || (defaultList === null || defaultList === void 0 ? void 0 : defaultList.length) > fileLength) {\n      let defaultFiles = defaultList.map(file => {\n        const defaultListProperties = {\n          isValid: true,\n          uploaded: true,\n          isDefault: true\n        };\n\n        if (typeof file === 'string') {\n          return { ...defaultListProperties,\n            path: file,\n            key: file,\n            name: file.split('/').pop()\n          };\n        } else if (typeof file === 'object') {\n          return { ...file,\n            ...defaultListProperties,\n            path: (file === null || file === void 0 ? void 0 : file.name) ? file.name : null,\n            key: (file === null || file === void 0 ? void 0 : file.name) ? file.name : null,\n            name: (file === null || file === void 0 ? void 0 : file.name) ? file.name.split('/').pop() : null\n          };\n        }\n      });\n\n      if (!!multiple) {\n        setFiles(oldFiles => [...defaultFiles, ...oldFiles]);\n      } else {\n        setFiles(defaultFiles);\n      }\n    }\n  }, [defaultList, multiple]);\n\n  const openFilePicker = () => {\n    if (uploading) return;\n    inputRef && inputRef.current.click();\n  };\n\n  const checkFileValidity = (size, type) => {\n    let isValid = true,\n        errorMsg = '',\n        validTypes = [...allowedTypes];\n    isValid = size <= maxSizeInMB * 1000 * 1000;\n\n    if (!isValid) {\n      errorMsg = `Please select files less than ${maxSizeInMB} MB`;\n    }\n\n    if (validTypes.length == 0) {\n      validTypes = [...Object.values(FILE_TYPES)].flat();\n    }\n\n    isValid = validTypes.includes(type);\n\n    if (!isValid) {\n      errorMsg = 'This type of file is not allowed to upload';\n    }\n\n    return {\n      isValid: errorMsg === '',\n      errorMsg\n    };\n  };\n\n  const onFiles = async newFiles => {\n    let selectedFiles = [...newFiles];\n    selectedFiles.map(file => {\n      const {\n        name,\n        size,\n        lastModified,\n        type\n      } = file;\n      const {\n        isValid,\n        errorMsg\n      } = checkFileValidity(size, type);\n      Object.assign(file, {\n        key: `${name}${size}${lastModified}`,\n        isValid,\n        errorMsg\n      });\n    });\n\n    if (multiple) {\n      setFiles(oldFiles => [...oldFiles, ...selectedFiles]);\n    } else {\n      setFiles(selectedFiles);\n    }\n  };\n\n  const uploadValidFiles = () => {\n    if (uploading || files.length == 0) return;\n    const validFiles = files.filter(f => !f.uploaded || !f.isDefault);\n    if (validFiles.length <= 0 || validFiles.length > fileLength) return Toast.error(`Please select maximum ${fileLength} files only.`);\n    setUploadingTrue();\n    fileListRef.current && fileListRef.current.uploadFiles().then(res => {\n      const {\n        data\n      } = res[0];\n\n      if (data.code === 'OK') {\n        Toast.success(data.message);\n        let isErr = data.data.filter(x => !x.status);\n\n        if (!!isErr && isErr.length) {\n          setError(isErr);\n        }\n\n        onSuccess(data);\n      }\n    }).catch(onError).finally(() => {\n      let uploadedFiles = [...files];\n      uploadedFiles.map(file => {\n        Object.assign(file, {\n          uploaded: true\n        });\n      });\n      setFiles(uploadedFiles);\n      setUploadingFalse();\n    });\n  };\n\n  const handleClose = () => {\n    setFiles([]);\n    onRequestClose && onRequestClose();\n  };\n\n  useEffect(() => {\n    !!uploadOnSelect && uploadValidFiles();\n  }, [files]);\n  const onRemoveFile = useCallback(fileKey => {\n    setFiles(oldFiles => [...oldFiles.filter(file => file.key !== fileKey)]);\n  }, [files]);\n\n  const getFileInputProps = () => {\n    let props = {};\n    props['multiple'] = !!multiple;\n\n    if (allowedTypes.length > 0) {\n      props['accept'] = allowedTypes.join(',');\n    } else {\n      props['accept'] = [...Object.values(extensions)].flat().join(',');\n    }\n\n    return props;\n  };\n\n  const [events, {\n    isHovering\n  }] = useDrop({\n    onFiles\n  });\n  return /*#__PURE__*/React.createElement(ReactModal, {\n    shouldCloseOnEsc: shouldClose,\n    shouldCloseOnOverlayClick: shouldClose,\n    isOpen: visible,\n    contentLabel: \"File Upload Modal\",\n    onRequestClose: onRequestClose,\n    className: className,\n    appElement: document.getElementById('root'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"uploadPopup\",\n    style: {\n      zIndex: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row borderBottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: 'p15 m0 text-center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, title), /*#__PURE__*/React.createElement(Button, {\n    size: \"lg\",\n    onClick: openFilePicker,\n    disabled: uploading,\n    style: {\n      marginRight: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, \"+ Select Files\")), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, events, {\n    className: `borderBottom p15 modalBody ${!!isHovering ? 'filehover' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    type: \"file\",\n    style: {\n      display: 'none'\n    },\n    ref: inputRef,\n    onChange: e => onFiles(e.target.files)\n  }, getFileInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  })), files.length == 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"no-files\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 15\n    }\n  }, \"Please select any file to upload or DROP\")) : /*#__PURE__*/React.createElement(FileList, {\n    ref: fileListRef,\n    files: files,\n    allowedTypes: allowedTypes,\n    onRemoveFile: onRemoveFile,\n    uploading: uploading,\n    extraData: extraData,\n    extraHeaders: extraHeaders,\n    uploadUrl: uploadUrl,\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'upload_footer text-right borderTop p15',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"lg\",\n    type: \"secondary\",\n    onClick: handleClose,\n    disabled: uploading,\n    style: {\n      marginRight: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n    size: \"lg\",\n    onClick: uploadValidFiles,\n    loading: uploading,\n    disabled: uploading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }, uploading ? 'Uploading...' : 'Upload'))));\n};\n\nexport default Uploader;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/components/common/Upload/Uploader.js"],"names":["React","useCallback","useEffect","useRef","useState","ReactModal","FileList","Button","useBoolean","useDrop","Toast","FILE_CATEGORY","IMAGE","PDF","DOC","XLS","JSON","EXE","FILE_TYPES","MEDIA","CSV","extensions","Uploader","visible","shouldClose","onRequestClose","defaultList","className","title","multiple","allowedTypes","maxSizeInMB","fileLength","uploadOnSelect","uploadUrl","extraHeaders","extraData","onSuccess","onError","flat","files","setFiles","uploading","setUploadingTrue","setUploadingFalse","inputRef","fileListRef","error","setError","Array","isArray","length","defaultFiles","map","file","defaultListProperties","isValid","uploaded","isDefault","path","key","name","split","pop","oldFiles","openFilePicker","current","click","checkFileValidity","size","type","errorMsg","validTypes","Object","values","includes","onFiles","newFiles","selectedFiles","lastModified","assign","uploadValidFiles","validFiles","filter","f","uploadFiles","then","res","data","code","success","message","isErr","x","status","catch","finally","uploadedFiles","handleClose","onRemoveFile","fileKey","getFileInputProps","props","join","events","isHovering","document","getElementById","zIndex","marginRight","display","e","target"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactModal from 'react-modal';\nimport FileList from './FileList';\nimport Button from './../Button';\nimport { useBoolean, useDrop } from './../../../hooks';\nimport { Toast } from '../../../components/common';\n\nexport const FILE_CATEGORY = {\n  IMAGE: 'IMAGE',\n  PDF: 'PDF',\n  DOC: 'DOC',\n  XLS: 'XLS',\n  JSON: 'JSON',\n  EXE: 'EXE',\n};\nexport const FILE_TYPES = {\n  IMAGE: ['image/png', 'image/jpeg', 'image/jpg', 'image/webp'],\n  PDF: ['application/pdf'],\n  DOC: [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  ],\n  MEDIA: ['audio/webm', 'video/webm', 'audio/mpeg', 'video/mpeg', 'video/mp4'],\n  CSV: ['text/csv'],\n  XLS: [\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  ],\n  JSON: ['application/json', 'application/javascript'], // application/javascript is use for JSONP(JSON with padding)\n  EXE: [\n    'application/octet-stream',\n    'application/x-msdownload',\n    'application/exe',\n    'application/x-ms-dos-executable',\n  ],\n};\n\nexport const extensions = {\n  IMAGE: ['.png', '.jpeg', '.webp', '.jpg', '.jpeg'],\n  PDF: ['.pdf'],\n  DOC: ['.doc', '.docx'],\n  MEDIA: ['.mp3', '.mp4', '.webm'],\n  CSV: ['.csv'],\n  XLS: ['.xls', '.xlsx'],\n  JSON: ['.json'],\n  EXE: ['.exe'],\n};\n\nconst Uploader = ({\n  visible = false, //is modal now visible\n  shouldClose = false, //can user close by clicking in overlay or ESC key?\n  onRequestClose = () => { }, //handle close modal\n  defaultList = [], // sample : [ {path} ]\n  className = 'virtual-visit-wrap',\n  title = 'Upload Files', //Modal Title\n  multiple = false, //can user select multiple files\n  allowedTypes = [], //leave empty if allow any type of file\n  maxSizeInMB = 1,\n  fileLength,\n  uploadOnSelect = false, //start Uploading files as soon as user select files\n  uploadUrl, //request endpoint to upload url\n  extraHeaders = {}, //extra headers to pass while uploading file\n  extraData = {}, //extra data to pass while uploading file\n  onSuccess = () => { }, //Callback when files are uploaded\n  onError = () => { }, //Callback when any error while uploading files\n}) => {\n  allowedTypes = [...allowedTypes.flat()];\n\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploadingTrue, setUploadingFalse] = useBoolean(false);\n  const inputRef = useRef(null);\n  const fileListRef = useRef(null);\n  const [error, setError] = useState([]);\n\n  useEffect(() => {\n    if (\n      (!!defaultList && Array.isArray(defaultList) && defaultList.length > 0) ||\n      defaultList?.length > fileLength\n    ) {\n      let defaultFiles = defaultList.map((file) => {\n        const defaultListProperties = {\n          isValid: true,\n          uploaded: true,\n          isDefault: true,\n        };\n        if (typeof file === 'string') {\n          return {\n            ...defaultListProperties,\n            path: file,\n            key: file,\n            name: file.split('/').pop(),\n          };\n        } else if (typeof file === 'object') {\n          return {\n            ...file,\n            ...defaultListProperties,\n            path: file?.name ? file.name : null,\n            key: file?.name ? file.name : null,\n            name: file?.name ? file.name.split('/').pop() : null,\n          };\n        }\n      });\n      if (!!multiple) {\n        setFiles((oldFiles) => [...defaultFiles, ...oldFiles]);\n      } else {\n        setFiles(defaultFiles);\n      }\n    }\n  }, [defaultList, multiple]);\n\n  const openFilePicker = () => {\n    if (uploading) return;\n    inputRef && inputRef.current.click();\n  };\n\n  const checkFileValidity = (size, type) => {\n    let isValid = true,\n      errorMsg = '',\n      validTypes = [...allowedTypes];\n\n    isValid = size <= maxSizeInMB * 1000 * 1000;\n    if (!isValid) {\n      errorMsg = `Please select files less than ${maxSizeInMB} MB`;\n    }\n    if (validTypes.length == 0) {\n      validTypes = [...Object.values(FILE_TYPES)].flat();\n    }\n\n    isValid = validTypes.includes(type);\n    if (!isValid) {\n      errorMsg = 'This type of file is not allowed to upload';\n    }\n\n    return { isValid: errorMsg === '', errorMsg };\n  };\n\n  const onFiles = async (newFiles) => {\n    let selectedFiles = [...newFiles];\n\n    selectedFiles.map((file) => {\n      const { name, size, lastModified, type } = file;\n      const { isValid, errorMsg } = checkFileValidity(size, type);\n      Object.assign(file, {\n        key: `${name}${size}${lastModified}`,\n        isValid,\n        errorMsg,\n      });\n    });\n    if (multiple) {\n      setFiles((oldFiles) => [...oldFiles, ...selectedFiles]);\n    } else {\n      setFiles(selectedFiles);\n    }\n  };\n\n  const uploadValidFiles = () => {\n    if (uploading || files.length == 0) return;\n    const validFiles = files.filter((f) => !f.uploaded || !f.isDefault);\n    if (validFiles.length <= 0 || validFiles.length > fileLength)\n      return Toast.error(`Please select maximum ${fileLength} files only.`);\n    setUploadingTrue();\n    fileListRef.current &&\n      fileListRef.current\n        .uploadFiles()\n        .then((res) => {\n          const { data } = res[0];\n          if (data.code === 'OK') {\n            Toast.success(data.message);\n            let isErr = data.data.filter((x) => !x.status);\n            if (!!isErr && isErr.length) {\n              setError(isErr);\n            }\n            onSuccess(data);\n          }\n        })\n        .catch(onError)\n        .finally(() => {\n          let uploadedFiles = [...files];\n          uploadedFiles.map((file) => {\n            Object.assign(file, { uploaded: true });\n          });\n          setFiles(uploadedFiles);\n          setUploadingFalse();\n        });\n  };\n\n  const handleClose = () => {\n    setFiles([]);\n    onRequestClose && onRequestClose();\n  };\n\n  useEffect(() => {\n    !!uploadOnSelect && uploadValidFiles();\n  }, [files]);\n\n  const onRemoveFile = useCallback(\n    (fileKey) => {\n      setFiles((oldFiles) => [\n        ...oldFiles.filter((file) => file.key !== fileKey),\n      ]);\n    },\n    [files]\n  );\n\n  const getFileInputProps = () => {\n    let props = {};\n    props['multiple'] = !!multiple;\n    if (allowedTypes.length > 0) {\n      props['accept'] = allowedTypes.join(',');\n    } else {\n      props['accept'] = [...Object.values(extensions)].flat().join(',');\n    }\n    return props;\n  };\n\n  const [events, { isHovering }] = useDrop({ onFiles });\n\n  return (\n    <ReactModal\n      shouldCloseOnEsc={shouldClose}\n      shouldCloseOnOverlayClick={shouldClose}\n      isOpen={visible}\n      contentLabel='File Upload Modal'\n      onRequestClose={onRequestClose}\n      className={className}\n      appElement={document.getElementById('root')}\n    >\n      <div className='uploadPopup' style={{ zIndex: 'auto' }}>\n        {/* Modal Header */}\n        <div className='row borderBottom'>\n          <h3 className={'p15 m0 text-center'}>{title}</h3>\n          <Button\n            size='lg'\n            onClick={openFilePicker}\n            disabled={uploading}\n            style={{ marginRight: 10 }}\n          >\n            + Select Files\n          </Button>\n        </div>\n\n        {/* Modal Body */}\n        <div\n          {...events}\n          className={`borderBottom p15 modalBody ${\n            !!isHovering ? 'filehover' : ''\n            }`}\n        >\n          <input\n            type='file'\n            style={{ display: 'none' }}\n            ref={inputRef}\n            onChange={(e) => onFiles(e.target.files)}\n            {...getFileInputProps()}\n          />\n          {files.length == 0 ? (\n            <div className='no-files'>\n              <p>Please select any file to upload or DROP</p>\n            </div>\n          ) : (\n              <FileList\n                ref={fileListRef}\n                files={files}\n                allowedTypes={allowedTypes}\n                onRemoveFile={onRemoveFile}\n                uploading={uploading}\n                extraData={extraData}\n                extraHeaders={extraHeaders}\n                uploadUrl={uploadUrl}\n                error={error}\n              />\n            )}\n        </div>\n\n        {/* Modal Footer */}\n        <div className={'upload_footer text-right borderTop p15'}>\n          <Button\n            size='lg'\n            type='secondary'\n            onClick={handleClose}\n            disabled={uploading}\n            style={{ marginRight: 10 }}\n          >\n            Close\n          </Button>\n          <Button\n            size='lg'\n            onClick={uploadValidFiles}\n            loading={uploading}\n            disabled={uploading}\n          >\n            {uploading ? 'Uploading...' : 'Upload'}\n          </Button>\n        </div>\n      </div>\n    </ReactModal>\n  );\n};\nexport default Uploader;\n"]},"metadata":{},"sourceType":"module"}