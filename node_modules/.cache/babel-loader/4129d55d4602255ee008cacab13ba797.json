{"ast":null,"code":"import React from 'react';\nimport { CURRENT_VERSION } from '../constants/versionControl'; // version from response - first param, local version second param\n\nconst semverGreaterThan = (versionA, versionB) => {\n  if (versionB && versionA) {\n    if (parseFloat(versionB) > parseFloat(versionA)) {\n      localStorage.setItem('latestVersion', versionB.toString());\n      return true;\n    }\n  }\n\n  return false;\n};\n\nclass CacheBuster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      isLatestVersion: false,\n      refreshCacheAndReload: () => {\n        console.log('Clearing cache and hard reloading...');\n\n        if (caches) {\n          // Service worker cache should be cleared with caches.delete()\n          caches.keys().then(function (names) {\n            for (let name of names) caches.delete(name);\n          });\n        } // delete browser cache and hard reload\n\n\n        window.location.reload(true);\n      }\n    };\n  }\n\n  componentDidMount() {\n    const latestVersion = localStorage.getItem('latestVersion');\n    const currentVersion = CURRENT_VERSION;\n    console.log('local storage latest Version', latestVersion);\n    console.log('current Version', currentVersion);\n    const shouldForceRefresh = semverGreaterThan(latestVersion, currentVersion);\n\n    if (shouldForceRefresh) {\n      console.log(`We have a new version - ${latestVersion}. Should force refresh`);\n      this.setState({\n        loading: false,\n        isLatestVersion: false\n      });\n    } else {\n      console.log(`You already have the latest version - ${latestVersion}. No cache refresh needed.`);\n      this.setState({\n        loading: false,\n        isLatestVersion: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      isLatestVersion,\n      refreshCacheAndReload\n    } = this.state;\n    return this.props.children({\n      loading,\n      isLatestVersion,\n      refreshCacheAndReload\n    });\n  }\n\n}\n\nexport default CacheBuster;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/CacheBuster.js"],"names":["React","CURRENT_VERSION","semverGreaterThan","versionA","versionB","parseFloat","localStorage","setItem","toString","CacheBuster","Component","constructor","props","state","loading","isLatestVersion","refreshCacheAndReload","console","log","caches","keys","then","names","name","delete","window","location","reload","componentDidMount","latestVersion","getItem","currentVersion","shouldForceRefresh","setState","render","children"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,6BAAhC,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC9C,MAAIA,QAAQ,IAAID,QAAhB,EAA0B;AACtB,QAAIE,UAAU,CAACD,QAAD,CAAV,GAAuBC,UAAU,CAACF,QAAD,CAArC,EAAiD;AAC7CG,MAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCH,QAAQ,CAACI,QAAT,EAAtC;AACA,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH,CARD;;AAUA,MAAMC,WAAN,SAA0BT,KAAK,CAACU,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,eAAe,EAAE,KAFR;AAGTC,MAAAA,qBAAqB,EAAE,MAAM;AACzBC,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;;AACA,YAAIC,MAAJ,EAAY;AACR;AACAA,UAAAA,MAAM,CAACC,IAAP,GAAcC,IAAd,CAAmB,UAAUC,KAAV,EAAiB;AAChC,iBAAK,IAAIC,IAAT,IAAiBD,KAAjB,EAAwBH,MAAM,CAACK,MAAP,CAAcD,IAAd;AAC3B,WAFD;AAGH,SAPwB,CASzB;;;AACAE,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACH;AAdQ,KAAb;AAgBH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,aAAa,GAAGvB,YAAY,CAACwB,OAAb,CAAqB,eAArB,CAAtB;AACA,UAAMC,cAAc,GAAG9B,eAAvB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CW,aAA5C;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Ba,cAA/B;AACA,UAAMC,kBAAkB,GAAG9B,iBAAiB,CAAC2B,aAAD,EAAgBE,cAAhB,CAA5C;;AACA,QAAIC,kBAAJ,EAAwB;AACpBf,MAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0BW,aAAc,wBAArD;AACA,WAAKI,QAAL,CAAc;AAAEnB,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,eAAe,EAAE;AAAnC,OAAd;AACH,KAHD,MAGO;AACHE,MAAAA,OAAO,CAACC,GAAR,CAAa,yCAAwCW,aAAc,4BAAnE;AACA,WAAKI,QAAL,CAAc;AAAEnB,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,eAAe,EAAE;AAAnC,OAAd;AACH;AACJ;;AACDmB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEpB,MAAAA,OAAF;AAAWC,MAAAA,eAAX;AAA4BC,MAAAA;AAA5B,QAAsD,KAAKH,KAAjE;AACA,WAAO,KAAKD,KAAL,CAAWuB,QAAX,CAAoB;AAAErB,MAAAA,OAAF;AAAWC,MAAAA,eAAX;AAA4BC,MAAAA;AAA5B,KAApB,CAAP;AACH;;AArCqC;;AAwC1C,eAAeP,WAAf","sourcesContent":["import React from 'react';\nimport { CURRENT_VERSION } from '../constants/versionControl'\n\n// version from response - first param, local version second param\nconst semverGreaterThan = (versionA, versionB) => {\n    if (versionB && versionA) {\n        if (parseFloat(versionB) > parseFloat(versionA)) {\n            localStorage.setItem('latestVersion', versionB.toString())\n            return true\n        }\n    }\n    return false\n};\n\nclass CacheBuster extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            isLatestVersion: false,\n            refreshCacheAndReload: () => {\n                console.log('Clearing cache and hard reloading...')\n                if (caches) {\n                    // Service worker cache should be cleared with caches.delete()\n                    caches.keys().then(function (names) {\n                        for (let name of names) caches.delete(name);\n                    });\n                }\n\n                // delete browser cache and hard reload\n                window.location.reload(true);\n            }\n        };\n    }\n    componentDidMount() {\n        const latestVersion = localStorage.getItem('latestVersion')\n        const currentVersion = CURRENT_VERSION\n        console.log('local storage latest Version', latestVersion)\n        console.log('current Version', currentVersion)\n        const shouldForceRefresh = semverGreaterThan(latestVersion, currentVersion);\n        if (shouldForceRefresh) {\n            console.log(`We have a new version - ${latestVersion}. Should force refresh`);\n            this.setState({ loading: false, isLatestVersion: false });\n        } else {\n            console.log(`You already have the latest version - ${latestVersion}. No cache refresh needed.`);\n            this.setState({ loading: false, isLatestVersion: true });\n        }\n    }\n    render() {\n        const { loading, isLatestVersion, refreshCacheAndReload } = this.state;\n        return this.props.children({ loading, isLatestVersion, refreshCacheAndReload });\n    }\n}\n\nexport default CacheBuster;"]},"metadata":{},"sourceType":"module"}