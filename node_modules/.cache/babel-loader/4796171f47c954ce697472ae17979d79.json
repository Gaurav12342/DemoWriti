{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Customers/ImagingDiagnostics/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport Table from '../../../components/common/Table/index';\nimport PageHead from '../../../containers/Customers/ImagingDiagnostics/components/PageHead';\nimport axios from '../../../services/api/config';\nimport { Edit } from '../../../assets/images/resident-detail/index';\nimport { CLIENTELE_TYPE } from '../../../constants/Customer';\nimport { imagingDiagnosticsPaginate, imagingDiagnosticsUpdate } from '../../../services/api/routes/customer';\nimport routes from '../../../routes/constant';\nimport ActiveDeactive from '../../../components/common/ActiveDeactive';\n\nconst _ = require('lodash');\n\nconst ImagingDiagnostics = props => {\n  const [loading, setLoading] = useState(false);\n  const [filter, setFilter] = useState({\n    page: 1,\n    limit: 10,\n    fields: [],\n    find: {},\n    filter: {\n      type: CLIENTELE_TYPE.IMAGING_DIAGNOSTIC\n    },\n    sortBy: {\n      createdAt: 'DESC'\n    }\n  });\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  useEffect(() => {\n    if (filter.hasOwnProperty('search') && filter.search['keyword']) {\n      const delayDebounceFn = setTimeout(() => {\n        fetch();\n      }, 600);\n      return () => clearTimeout(delayDebounceFn);\n    } else fetch();\n  }, [filter]);\n\n  const modifiedList = list => {\n    let modifiedList = list.map(current => {\n      return current;\n    });\n    return modifiedList;\n  };\n\n  const fetch = () => {\n    setLoading(true);\n    axios({ ...imagingDiagnosticsPaginate,\n      data: {\n        query: { ...filter\n        }\n      }\n    }).then(response => {\n      if (response.data.code === 'OK') {\n        let updatedList = modifiedList(response.data.data.data);\n        setData(updatedList);\n        setTotal(response.data.data.count);\n        setLoading(false);\n      } else {\n        setLoading(false);\n      }\n    }).catch(err => {\n      setLoading(false);\n    });\n  };\n\n  const handleTableChange = (pagination, tfilter, sorter) => {\n    if (!pagination) return;\n    let tempFilter = filter;\n    tempFilter = { ...tempFilter,\n      page: pagination.current,\n      limit: pagination.pageSize\n    };\n\n    if (tfilter && Object.keys(tfilter).length) {\n      if (tfilter.isActive && tfilter.isActive.length) {\n        tempFilter.find.isActive = tfilter.isActive;\n      } else if (tempFilter.find.isActive) {\n        delete tempFilter.find['isActive'];\n      }\n\n      tempFilter.page = pagination.current;\n    } else {}\n\n    setFilter(tempFilter);\n  };\n\n  const onShowSizeChange = size => {\n    if (size) {\n      setFilter(prevFilter => ({ ...prevFilter,\n        limit: size,\n        page: 1\n      }));\n    }\n  };\n\n  const handleSearch = event => {\n    let value = event.target.value;\n    let obj = { ...filter,\n      pageNo: 1,\n      search: {\n        keyword: value,\n        keys: ['name', 'emails.email']\n      }\n    };\n    setFilter(obj);\n  };\n\n  const handleActiveDeactive = record => {\n    let tempData = data.map(rec => {\n      if (rec._id === record._id) {\n        return { ...rec,\n          isActive: !rec.isActive\n        };\n      } else {\n        return rec;\n      }\n    });\n    setData(tempData);\n  };\n\n  const getColumns = () => [{\n    title: 'Sr.No',\n    keyword: 'index',\n    dataIndex: 'index',\n    render: (text, record, index) => (filter.page - 1) * filter.limit + (index + 1)\n  }, {\n    title: 'Name.',\n    dataIndex: 'name',\n    render: (text, record) => /*#__PURE__*/React.createElement(React.Fragment, null, text ? text : '')\n  }, {\n    title: 'Email',\n    dataIndex: 'emails',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, text ? text[0].email : '')\n  }, {\n    title: 'Phone No',\n    dataIndex: 'phone',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: 'capitalize'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, text ? text : ' ')\n  }, {\n    title: 'Unique No',\n    dataIndex: 'uniqueNo',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: 'capitalize'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, text ? text : ' ')\n  }, {\n    title: 'Active',\n    dataIndex: 'isActive',\n    render: (text, record) => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: 'capitalize'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ActiveDeactive, {\n      documentId: record._id,\n      API: imagingDiagnosticsUpdate,\n      record: record,\n      isActive: record.isActive,\n      model: \"master\",\n      onActiveDeactive: record => {\n        handleActiveDeactive(record);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    })),\n    filters: [{\n      text: 'Active',\n      value: true\n    }, {\n      text: 'De-active',\n      value: false\n    }],\n    onFilter: (value, record) => record.isActive === value\n  }, {\n    title: 'Action',\n    showRefresh: true,\n    render: (text, record) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        props.history.push(`${routes.imagingUpsert.path}/${record._id}`);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Edit, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 15\n      }\n    }, \"Edit\"))))\n  }];\n\n  const handleRedirect = () => {\n    props.history.push(routes.imagingUpsert.path);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pmr_wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageHead, {\n    total: total,\n    onRedirect: handleRedirect,\n    onSearch: handleSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columns: getColumns(),\n    datasource: data,\n    loading: loading,\n    onChange: handleTableChange,\n    pagination: {\n      current: filter.page,\n      pageSize: filter.limit,\n      total: total,\n      showSizeChanger: true,\n      onShowSizeChange: onShowSizeChange\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default ImagingDiagnostics;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Customers/ImagingDiagnostics/index.js"],"names":["React","useEffect","useState","Table","PageHead","axios","Edit","CLIENTELE_TYPE","imagingDiagnosticsPaginate","imagingDiagnosticsUpdate","routes","ActiveDeactive","_","require","ImagingDiagnostics","props","loading","setLoading","filter","setFilter","page","limit","fields","find","type","IMAGING_DIAGNOSTIC","sortBy","createdAt","data","setData","total","setTotal","hasOwnProperty","search","delayDebounceFn","setTimeout","fetch","clearTimeout","modifiedList","list","map","current","query","then","response","code","updatedList","count","catch","err","handleTableChange","pagination","tfilter","sorter","tempFilter","pageSize","Object","keys","length","isActive","onShowSizeChange","size","prevFilter","handleSearch","event","value","target","obj","pageNo","keyword","handleActiveDeactive","record","tempData","rec","_id","getColumns","title","dataIndex","render","text","index","email","textTransform","filters","onFilter","showRefresh","history","push","imagingUpsert","path","handleRedirect","showSizeChanger"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Table from '../../../components/common/Table/index';\nimport PageHead from '../../../containers/Customers/ImagingDiagnostics/components/PageHead';\nimport axios from '../../../services/api/config';\nimport { Edit } from '../../../assets/images/resident-detail/index';\nimport { CLIENTELE_TYPE } from '../../../constants/Customer';\nimport {\n  imagingDiagnosticsPaginate,\n  imagingDiagnosticsUpdate,\n} from '../../../services/api/routes/customer';\nimport routes from '../../../routes/constant';\nimport ActiveDeactive from '../../../components/common/ActiveDeactive';\nconst _ = require('lodash');\n\nconst ImagingDiagnostics = (props) => {\n  const [loading, setLoading] = useState(false);\n  const [filter, setFilter] = useState({\n    page: 1,\n    limit: 10,\n    fields: [],\n    find: {},\n    filter: {\n      type: CLIENTELE_TYPE.IMAGING_DIAGNOSTIC,\n    },\n    sortBy: { createdAt: 'DESC' },\n  });\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n\n  useEffect(() => {\n    if (filter.hasOwnProperty('search') && filter.search['keyword']) {\n      const delayDebounceFn = setTimeout(() => {\n        fetch();\n      }, 600);\n      return () => clearTimeout(delayDebounceFn);\n    } else fetch();\n  }, [filter]);\n\n  const modifiedList = (list) => {\n    let modifiedList = list.map((current) => {\n      return current;\n    });\n    return modifiedList;\n  };\n\n  const fetch = () => {\n    setLoading(true);\n    axios({ ...imagingDiagnosticsPaginate, data: { query: { ...filter } } })\n      .then((response) => {\n        if (response.data.code === 'OK') {\n          let updatedList = modifiedList(response.data.data.data);\n          setData(updatedList);\n          setTotal(response.data.data.count);\n          setLoading(false);\n        } else {\n          setLoading(false);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  };\n  const handleTableChange = (pagination, tfilter, sorter) => {\n    if (!pagination) return;\n    let tempFilter = filter;\n    tempFilter = {\n      ...tempFilter,\n      page: pagination.current,\n      limit: pagination.pageSize,\n    };\n    if (tfilter && Object.keys(tfilter).length) {\n      if (tfilter.isActive && tfilter.isActive.length) {\n        tempFilter.find.isActive = tfilter.isActive;\n      } else if (tempFilter.find.isActive) {\n        delete tempFilter.find['isActive'];\n      }\n      tempFilter.page = pagination.current;\n    } else {\n    }\n    setFilter(tempFilter);\n  };\n\n  const onShowSizeChange = (size) => {\n    if (size) {\n      setFilter((prevFilter) => ({ ...prevFilter, limit: size , page: 1}));\n    }\n  };\n\n  const handleSearch = (event) => {\n    let value = event.target.value;\n    let obj = {\n      ...filter,\n      pageNo: 1,\n      search: {\n        keyword: value,\n        keys: ['name', 'emails.email'],\n      },\n    };\n    setFilter(obj);\n  };\n\n  const handleActiveDeactive = (record) => {\n    let tempData = data.map((rec) => {\n      if (rec._id === record._id) {\n        return { ...rec, isActive: !rec.isActive };\n      } else {\n        return rec;\n      }\n    });\n    setData(tempData);\n  };\n\n  const getColumns = () => [\n    {\n      title: 'Sr.No',\n      keyword: 'index',\n      dataIndex: 'index',\n      render: (text, record, index) =>\n        (filter.page - 1) * filter.limit + (index + 1),\n    },\n    {\n      title: 'Name.',\n      dataIndex: 'name',\n      render: (text, record) => <>{text ? text : ''}</>,\n    },\n    {\n      title: 'Email',\n      dataIndex: 'emails',\n      render: (text) => <span>{text ? text[0].email : ''}</span>,\n    },\n    {\n      title: 'Phone No',\n      dataIndex: 'phone',\n      render: (text) => (\n        <span style={{ textTransform: 'capitalize' }}>{text ? text : ' '}</span>\n      ),\n    },\n    {\n      title: 'Unique No',\n      dataIndex: 'uniqueNo',\n      render: (text) => (\n        <span style={{ textTransform: 'capitalize' }}>{text ? text : ' '}</span>\n      ),\n    },\n    {\n      title: 'Active',\n      dataIndex: 'isActive',\n      render: (text, record) => (\n        <span style={{ textTransform: 'capitalize' }}>\n          <ActiveDeactive\n            documentId={record._id}\n            API={imagingDiagnosticsUpdate}\n            record={record}\n            isActive={record.isActive}\n            model='master'\n            onActiveDeactive={(record) => {\n              handleActiveDeactive(record);\n            }}\n          />\n        </span>\n      ),\n      filters: [\n        { text: 'Active', value: true },\n        { text: 'De-active', value: false },\n      ],\n      onFilter: (value, record) => record.isActive === value,\n    },\n    {\n      title: 'Action',\n      showRefresh: true,\n      render: (text, record) => (\n        <>\n          <div className='actions'>\n            <a\n              onClick={() => {\n                props.history.push(\n                  `${routes.imagingUpsert.path}/${record._id}`\n                );\n              }}\n            >\n              <Edit />\n              <p>Edit</p>\n            </a>\n          </div>\n        </>\n      ),\n    },\n  ];\n\n  const handleRedirect = () => {\n    props.history.push(routes.imagingUpsert.path);\n  };\n\n  return (\n    <>\n      <div className='container'>\n        <div className='pmr_wrap'>\n          <PageHead\n            total={total}\n            onRedirect={handleRedirect}\n            onSearch={handleSearch}\n          />\n          <Table\n            columns={getColumns()}\n            datasource={data}\n            loading={loading}\n            onChange={handleTableChange}\n            pagination={{\n              current: filter.page,\n              pageSize: filter.limit,\n              total: total,\n              showSizeChanger: true,\n              onShowSizeChange: onShowSizeChange,\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ImagingDiagnostics;\n"]},"metadata":{},"sourceType":"module"}