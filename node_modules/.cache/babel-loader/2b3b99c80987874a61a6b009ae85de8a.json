{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/MedReviewTodo/components/TodoListContainer.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { TodoSubCategory, ViewTypeFilter } from '../../../components/Todo';\nimport { getTodoCounts } from '../../../services/api/routes/todoDashboard';\nimport ResidentList from './../../PrescriptionTodo/components/ResidentList';\nimport axios from '../../../services/api/services/common';\nimport { todoDashboardUpdate } from '../../../services/socket/routes/todo';\nimport queryString from \"query-string\";\nimport { TODO_CATEGORY, SUB_CATEGORY, MAP_TODOS } from '../../../constants/todo';\nimport { DEVICE_VIEW } from '../../../constants/prescription';\nimport { isDrOrNp } from '../../../util/common';\nimport { getDeviceView } from '../../../util/todo';\nimport _ from 'lodash';\nconst {\n  PMR,\n  NURSE_REVIEW_1,\n  NURSE_REVIEW_2\n} = SUB_CATEGORY.MED_REVIEW;\n\nconst TodoListContainer = props => {\n  const {\n    socket,\n    authUser,\n    viewType,\n    todoListContainerProps,\n    category,\n    subCategory\n  } = props;\n  const {\n    activeSubCategory,\n    onChangeListview,\n    onsetActiveTodo,\n    onSetActiveSubCategory\n  } = todoListContainerProps;\n  const [query, setQuery] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isPrimaryFilter, setIsPrimaryFilter] = useState(false);\n  const [dashboardData, setDashboardData] = useState([]);\n  const [todoList, setTodoList] = useState([]);\n  const [dashboardCount, setDashboardCount] = useState(0);\n  const [filter, setFilter] = useState({\n    category: TODO_CATEGORY.MED_REVIEW\n  });\n  useEffect(() => {\n    const location = props.location;\n    let queryObj = queryString.parse(location.search);\n    queryObj = { ...queryObj,\n      category: parseInt(category),\n      subCategory: parseInt(subCategory),\n      viewType: parseInt(viewType)\n    };\n    let obj = getDeviceView(queryObj, authUser);\n    queryObj.viewType = obj === null || obj === void 0 ? void 0 : obj.viewType;\n    setIsPrimaryFilter(obj === null || obj === void 0 ? void 0 : obj.deviceView);\n    handleSetQuery(queryObj);\n  }, []);\n  useEffect(() => {\n    // get dashboard count\n    fetch();\n  }, [filter]);\n  useEffect(() => {\n    if (query && (dashboardData === null || dashboardData === void 0 ? void 0 : dashboardData.length) > 0) {\n      let activeSubcat = dashboardData.find(x => x.type === query.subCategory);\n      if (activeSubcat) onSetActiveSubCategory(activeSubcat);\n    }\n  }, [query, dashboardData]);\n  useEffect(() => {\n    //update dashboard count\n    if (socket) {\n      socket.on(todoDashboardUpdate, handleDashboardUpdate);\n      return () => {\n        socket.off(todoDashboardUpdate);\n      };\n    }\n  }, [dashboardData]);\n\n  const handleSetQuery = queryObj => {\n    if (queryObj) {\n      setQuery(queryObj);\n    }\n  };\n\n  const handleDashboardUpdate = data => {\n    var _filter$homeAreaId;\n\n    if (filter && ((_filter$homeAreaId = filter.homeAreaId) === null || _filter$homeAreaId === void 0 ? void 0 : _filter$homeAreaId.length) > 0) return;\n    let tempData = [...dashboardData];\n    tempData.map(x => {\n      if (x.todoCategory === data.todoCategory) {\n        x.data = x.data.map(todo => {\n          let updatedTodo = data.data.find(y => y.type === todo.type);\n          if (updatedTodo) todo.value = updatedTodo.value;\n          return todo;\n        });\n      }\n\n      x.count = _.map(x.data, \"value\").reduce((a, b) => a + b, 0);\n      return x;\n    });\n    setDashboardData(tempData);\n  };\n\n  const fetch = () => {\n    // get dashboard count\n    setLoading(true);\n    axios({ ...getTodoCounts,\n      data: filter\n    }).then(data => {\n      if (data.code === 'OK') {\n        const dashData = data.data[0].data || [];\n        const filtered = dashData.filter(d => ![PMR, NURSE_REVIEW_1, NURSE_REVIEW_2].includes(d.type));\n        setDashboardData(filtered);\n        setDashboardCount(data.data[0].count);\n      }\n\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n    });\n  };\n\n  const handleTodoCat = todo => {\n    console.log('todo => ', todo);\n    let queryObj = { ...query,\n      subCategory: todo.type\n    };\n    let obj = getDeviceView(queryObj, authUser);\n    queryObj.viewType = obj.viewType;\n    setIsPrimaryFilter(obj.deviceView);\n    setQuery(queryObj);\n    onSetActiveSubCategory(todo);\n  };\n\n  const handleViewType = viewType => {\n    let queryObj = { ...query,\n      viewType: viewType\n    };\n    setQuery(queryObj);\n    onChangeListview(viewType);\n  };\n\n  const handleHomeAreaChange = val => {\n    let tempFilter = { ...filter,\n      homeAreaId: val ? [val] : undefined\n    };\n    setFilter(tempFilter);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, query ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TodoSubCategory, Object.assign({\n    todos: dashboardData,\n    dashboardCount: dashboardCount,\n    loading: loading,\n    onSetActiveSubCategory: handleTodoCat,\n    onHomeAreaChange: handleHomeAreaChange,\n    onChangeListview: handleViewType,\n    activeSubCategory: activeSubCategory,\n    query: query,\n    isPrimaryFilter: isPrimaryFilter\n  }, {\n    category,\n    subCategory\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(ResidentList, Object.assign({\n    type: 'medReview',\n    query: query,\n    onsetActiveTodo: onsetActiveTodo\n  }, {\n    category,\n    subCategory\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }))) : null);\n};\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser,\n    socket\n  } = auth;\n  return {\n    authUser,\n    socket\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(TodoListContainer));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/MedReviewTodo/components/TodoListContainer.js"],"names":["React","Component","useState","useEffect","connect","withRouter","TodoSubCategory","ViewTypeFilter","getTodoCounts","ResidentList","axios","todoDashboardUpdate","queryString","TODO_CATEGORY","SUB_CATEGORY","MAP_TODOS","DEVICE_VIEW","isDrOrNp","getDeviceView","_","PMR","NURSE_REVIEW_1","NURSE_REVIEW_2","MED_REVIEW","TodoListContainer","props","socket","authUser","viewType","todoListContainerProps","category","subCategory","activeSubCategory","onChangeListview","onsetActiveTodo","onSetActiveSubCategory","query","setQuery","loading","setLoading","isPrimaryFilter","setIsPrimaryFilter","dashboardData","setDashboardData","todoList","setTodoList","dashboardCount","setDashboardCount","filter","setFilter","location","queryObj","parse","search","parseInt","obj","deviceView","handleSetQuery","fetch","length","activeSubcat","find","x","type","on","handleDashboardUpdate","off","data","homeAreaId","tempData","map","todoCategory","todo","updatedTodo","y","value","count","reduce","a","b","then","code","dashData","filtered","d","includes","catch","err","handleTodoCat","console","log","handleViewType","handleHomeAreaChange","val","tempFilter","undefined","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { TodoSubCategory, ViewTypeFilter } from '../../../components/Todo';\nimport { getTodoCounts } from '../../../services/api/routes/todoDashboard';\nimport ResidentList from './../../PrescriptionTodo/components/ResidentList';\nimport axios from '../../../services/api/services/common'\nimport { todoDashboardUpdate } from '../../../services/socket/routes/todo'\nimport queryString from \"query-string\";\nimport { TODO_CATEGORY, SUB_CATEGORY, MAP_TODOS } from '../../../constants/todo';\nimport { DEVICE_VIEW } from '../../../constants/prescription'\nimport { isDrOrNp } from '../../../util/common'\nimport { getDeviceView } from '../../../util/todo'\nimport _ from 'lodash'\nconst { PMR, NURSE_REVIEW_1, NURSE_REVIEW_2 } = SUB_CATEGORY.MED_REVIEW;\nconst TodoListContainer = props => {\n    const { socket, authUser, viewType, todoListContainerProps, category, subCategory } = props;\n    const { activeSubCategory,\n        onChangeListview,\n        onsetActiveTodo,\n        onSetActiveSubCategory } = todoListContainerProps;\n\n    const [query, setQuery] = useState(null)\n    const [loading, setLoading] = useState(false);\n    const [isPrimaryFilter, setIsPrimaryFilter] = useState(false);\n    const [dashboardData, setDashboardData] = useState([]);\n    const [todoList, setTodoList] = useState([]);\n    const [dashboardCount, setDashboardCount] = useState(0);\n    const [filter, setFilter] = useState({\n        category: TODO_CATEGORY.MED_REVIEW\n    });\n\n    useEffect(() => {\n        const location = props.location;\n        let queryObj = queryString.parse(location.search);\n        queryObj = {\n            ...queryObj,\n            category: parseInt(category),\n            subCategory: parseInt(subCategory),\n            viewType: parseInt(viewType),\n        }\n        let obj = getDeviceView(queryObj, authUser)\n        queryObj.viewType = obj?.viewType\n        setIsPrimaryFilter(obj?.deviceView)\n        handleSetQuery(queryObj)\n    }, [])\n\n    useEffect(() => {\n        // get dashboard count\n        fetch();\n    }, [filter]);\n\n    useEffect(() => {\n        if (query && dashboardData?.length > 0) {\n            let activeSubcat = dashboardData.find(x => x.type === query.subCategory)\n            if (activeSubcat)\n                onSetActiveSubCategory(activeSubcat)\n        }\n    }, [query, dashboardData])\n\n    useEffect(() => {\n        //update dashboard count\n        if (socket) {\n            socket.on(todoDashboardUpdate, handleDashboardUpdate)\n            return () => {\n                socket.off(todoDashboardUpdate);\n            };\n        }\n    }, [dashboardData])\n\n    const handleSetQuery = (queryObj) => {\n        if (queryObj) {\n            setQuery(queryObj)\n        }\n    }\n\n    const handleDashboardUpdate = (data) => {\n        if (filter && filter.homeAreaId?.length > 0)\n            return\n        let tempData = [...dashboardData]\n        tempData.map(x => {\n            if (x.todoCategory === data.todoCategory) {\n                x.data = x.data.map(todo => {\n                    let updatedTodo = data.data.find(y => y.type === todo.type)\n                    if (updatedTodo)\n                        todo.value = updatedTodo.value\n                    return todo\n                })\n            }\n            x.count = _.map(x.data, \"value\").reduce((a, b) => a + b, 0)\n            return x\n        })\n        setDashboardData(tempData);\n    }\n\n    const fetch = () => {\n        // get dashboard count\n        setLoading(true);\n        axios({ ...getTodoCounts, data: filter }).then((data) => {\n            if (data.code === 'OK') {\n                const dashData = data.data[0].data || [];\n                const filtered = dashData.filter(d => ![PMR, NURSE_REVIEW_1, NURSE_REVIEW_2].includes(d.type))\n                setDashboardData(filtered)\n                setDashboardCount(data.data[0].count)\n            }\n            setLoading(false);\n        }).catch(err => {\n            setLoading(false);\n        })\n    };\n\n\n    const handleTodoCat = (todo) => {\n        console.log('todo => ', todo)\n        let queryObj = {\n            ...query,\n            subCategory: todo.type,\n        }\n        let obj = getDeviceView(queryObj, authUser)\n        queryObj.viewType = obj.viewType\n        setIsPrimaryFilter(obj.deviceView)\n        setQuery(queryObj)\n        onSetActiveSubCategory(todo)\n    }\n\n    const handleViewType = (viewType) => {\n        let queryObj = {\n            ...query,\n            viewType: viewType,\n        }\n        setQuery(queryObj)\n        onChangeListview(viewType)\n    }\n\n    const handleHomeAreaChange = (val) => {\n        let tempFilter = {\n            ...filter,\n            homeAreaId: val ? [val] : undefined\n        }\n        setFilter(tempFilter)\n    }\n\n    return <>\n        {\n            query ?\n                <>\n                    <TodoSubCategory\n                        todos={dashboardData}\n                        dashboardCount={dashboardCount}\n                        loading={loading}\n                        onSetActiveSubCategory={handleTodoCat}\n                        onHomeAreaChange={handleHomeAreaChange}\n                        onChangeListview={handleViewType}\n                        activeSubCategory={activeSubCategory}\n                        query={query}\n                        isPrimaryFilter={isPrimaryFilter}\n                        {...{ category, subCategory }}\n                    />\n                    <ResidentList type={'medReview'} query={query} onsetActiveTodo={onsetActiveTodo} {...{ category, subCategory }} />\n                </>\n                : null\n        }\n    </>\n\n}\nconst mapStateToProps = ({ auth }) => {\n    const { authUser, socket } = auth\n    return {\n        authUser, socket\n    }\n}\nexport default withRouter(connect(mapStateToProps)(TodoListContainer));"]},"metadata":{},"sourceType":"module"}