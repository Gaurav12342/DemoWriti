{"ast":null,"code":"import axios from 'axios';\nimport { SOURCE_MEDIUM } from '../../constants/common';\nimport { API_URL } from './routes/common';\nimport { Toast } from '../../components/common/Toast';\nimport { refreshToken } from '../../appRedux/actions/Auth';\nimport CommonService, { getApiUrl } from '../../services/api/services/common';\nimport { tokenRefresh } from '../../services/api/routes/auth';\nimport { userLogout, isInvalidTokenError } from '../../util/common';\nimport { decryptData } from '../../util/Crypto';\nimport _ from 'lodash';\nimport { isPharmacyUser } from '../../constants/User'; // const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNWNmZjkyNTQ4ZWExMGY0ZDAzOTMxNThjIiwibmFtZSI6IkphbmUsIFN0YWNpIiwic2Vzc2lvbklkIjoiYmE3YjM0YTYtM2IwYy00ZWE2LWEzY2YtZTYzNzYwYTdlNjc2IiwiaG9tZUlkIjoiNWNkOTYzZWExZmQxNjAzYTA5YWU3ZjlmIiwidHlwZSI6NTIsInBhcmVudENsaWVudGVsZSI6W3siaWQiOiI1Y2Q5NjNlYTFmZDE2MDNhMDlhZTdmYTAifSx7ImlkIjoiNWRhMDBjYzIxYzQ0MzAyNjlkYTg5MWZjIn1dLCJsb2dpbkZyb20iOjEsInN1Yk51cnNlVHlwZSI6M30sImlhdCI6MTYwMjMxMjkyNSwiZXhwIjoxNjMzNDE2OTI1LCJhdWQiOiJyeC53cml0aS5jYSIsImlzcyI6InJ4LndyaXRpLmNhIn0.OsoGOlgqqu4huekkEJCVKlATYtcZAE6PpIiDUsvzspc'\n\nlet previousRequest = {};\nconst instance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Cache-Control': 'no-cache',\n    'Content-Type': 'application/json',\n    sourceMedium: SOURCE_MEDIUM['WEB'],\n    deviceType: SOURCE_MEDIUM['WEB'],\n    'Allow-Access-Control-Allow-Origin': '*'\n  }\n}); //request interceptors\n\ninstance.interceptors.request.use(config => {\n  let tenantId;\n  let excludeTenant = JSON.parse(localStorage.getItem('excludeTenant')) || false;\n  tenantId = excludeTenant ? localStorage.getItem('tenantId') : undefined;\n  const homeId = excludeTenant ? localStorage.getItem('homeId') : undefined;\n  const token = JSON.parse(localStorage.getItem('token'));\n  if (!config.headers.Authorization) config.headers.Authorization = token ? `JWT ${token}` : '';\n\n  if (!config.headers.isCustom) {\n    var _authUser$pharmacyId, _authUser$homeId, _authUser$homeId$phar;\n\n    const authUser = decryptData(localStorage.getItem('user'));\n    config.headers.homeIdentifier = tenantId || '';\n    config.headers.homeId = homeId;\n    if (authUser) config.headers.pharmacyId = isPharmacyUser(authUser.type) ? authUser === null || authUser === void 0 ? void 0 : (_authUser$pharmacyId = authUser.pharmacyId) === null || _authUser$pharmacyId === void 0 ? void 0 : _authUser$pharmacyId._id : authUser === null || authUser === void 0 ? void 0 : (_authUser$homeId = authUser.homeId) === null || _authUser$homeId === void 0 ? void 0 : (_authUser$homeId$phar = _authUser$homeId.pharmacyId) === null || _authUser$homeId$phar === void 0 ? void 0 : _authUser$homeId$phar._id;\n  }\n\n  delete config.headers.isCustom;\n  if (process.env.PUBLIC_URL === 'production') config.baseURL = '/';\n  return config;\n}, error => Promise.reject(error)); // //response interceptors\n// instance.interceptors.response.use(\n//   (response) => Promise.resolve(response),\n//   (error) => {\n//     // ()\n//     if (!error.response)\n//       Toast.error(error.message || 'Network error - something went wrong');\n//     if (error.response && error.response.data) {\n//       if (error.response.data.code !== 'E_INVALID_TOKEN')\n//         Toast.error(error.response.data.message);\n//       if (error.response.data.code === 'E_UNAUTHORIZED') {\n//         userLogout();\n//       } else if (error.response.data.code === 'E_INVALID_TOKEN') {\n//         //refresh token\n//         const { method, url } = tokenRefresh;\n//         const user = decryptData(localStorage.getItem('user'));\n//         let token = localStorage.getItem('refreshToken');\n//         const req = {\n//           refreshToken: 'jwt ' + JSON.parse(token),\n//         };\n//         let canCall = true;\n//         if (previousRequest && previousRequest.url) {\n//           if (previousRequest.url !== error.config.url) {\n//             previousRequest = error.config;\n//           } else {\n//             canCall = false;\n//           }\n//         } else {\n//           previousRequest = error.config;\n//         }\n//         if (canCall) {\n//           let tokenResponse = CommonService({\n//             ...tokenRefresh,\n//             method,\n//             url,\n//             data: req,\n//           }).then(async (data) => {\n//             if (data && data.code === 'OK') {\n//               localStorage.setItem('token', JSON.stringify(data.data.token));\n//               // refreshToken(res)\n//               // previousRequest.headers['token'] = 'JWT' + data.data.token;\n//               previousRequest.headers['Authorization'] = 'JWT ' + data.data.token;\n//               let res = await instance(previousRequest); // call API which had return expire token error\n//               return Promise.resolve(res);\n//             }\n//           });\n//           if (tokenResponse) return Promise.resolve(tokenResponse);\n//         }\n//       } else {\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\nexport default instance;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/services/api/config.js"],"names":["axios","SOURCE_MEDIUM","API_URL","Toast","refreshToken","CommonService","getApiUrl","tokenRefresh","userLogout","isInvalidTokenError","decryptData","_","isPharmacyUser","previousRequest","instance","create","baseURL","headers","sourceMedium","deviceType","interceptors","request","use","config","tenantId","excludeTenant","JSON","parse","localStorage","getItem","undefined","homeId","token","Authorization","isCustom","authUser","homeIdentifier","pharmacyId","type","_id","process","env","PUBLIC_URL","error","Promise","reject"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { SOURCE_MEDIUM } from '../../constants/common';\nimport { API_URL } from './routes/common';\nimport { Toast } from '../../components/common/Toast';\nimport { refreshToken } from '../../appRedux/actions/Auth';\nimport CommonService, { getApiUrl } from '../../services/api/services/common';\nimport { tokenRefresh } from '../../services/api/routes/auth';\nimport { userLogout, isInvalidTokenError } from '../../util/common';\nimport { decryptData } from '../../util/Crypto';\nimport _ from 'lodash';\nimport { isPharmacyUser } from '../../constants/User'\n\n// const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNWNmZjkyNTQ4ZWExMGY0ZDAzOTMxNThjIiwibmFtZSI6IkphbmUsIFN0YWNpIiwic2Vzc2lvbklkIjoiYmE3YjM0YTYtM2IwYy00ZWE2LWEzY2YtZTYzNzYwYTdlNjc2IiwiaG9tZUlkIjoiNWNkOTYzZWExZmQxNjAzYTA5YWU3ZjlmIiwidHlwZSI6NTIsInBhcmVudENsaWVudGVsZSI6W3siaWQiOiI1Y2Q5NjNlYTFmZDE2MDNhMDlhZTdmYTAifSx7ImlkIjoiNWRhMDBjYzIxYzQ0MzAyNjlkYTg5MWZjIn1dLCJsb2dpbkZyb20iOjEsInN1Yk51cnNlVHlwZSI6M30sImlhdCI6MTYwMjMxMjkyNSwiZXhwIjoxNjMzNDE2OTI1LCJhdWQiOiJyeC53cml0aS5jYSIsImlzcyI6InJ4LndyaXRpLmNhIn0.OsoGOlgqqu4huekkEJCVKlATYtcZAE6PpIiDUsvzspc'\nlet previousRequest = {};\nconst instance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Cache-Control': 'no-cache',\n    'Content-Type': 'application/json',\n    sourceMedium: SOURCE_MEDIUM['WEB'],\n    deviceType: SOURCE_MEDIUM['WEB'],\n    'Allow-Access-Control-Allow-Origin': '*',\n  },\n});\n\n//request interceptors\ninstance.interceptors.request.use(\n  (config) => {\n\n    let tenantId\n    let excludeTenant = JSON.parse(localStorage.getItem('excludeTenant')) || false;\n    tenantId = excludeTenant ? localStorage.getItem('tenantId') : undefined;\n    const homeId = excludeTenant ? localStorage.getItem('homeId') : undefined;\n    const token = JSON.parse(localStorage.getItem('token'));\n    if (!config.headers.Authorization)\n      config.headers.Authorization = token ? `JWT ${token}` : '';\n    if (!config.headers.isCustom) {\n      const authUser = decryptData(localStorage.getItem('user'));\n      config.headers.homeIdentifier = tenantId || '';\n      config.headers.homeId = homeId;\n      if (authUser)\n        config.headers.pharmacyId = isPharmacyUser(authUser.type) ? authUser?.pharmacyId?._id : authUser?.homeId?.pharmacyId?._id;\n    }\n    delete config.headers.isCustom\n\n    if (process.env.PUBLIC_URL === 'production') config.baseURL = '/';\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// //response interceptors\n// instance.interceptors.response.use(\n//   (response) => Promise.resolve(response),\n//   (error) => {\n//     // ()\n//     if (!error.response)\n//       Toast.error(error.message || 'Network error - something went wrong');\n//     if (error.response && error.response.data) {\n//       if (error.response.data.code !== 'E_INVALID_TOKEN')\n//         Toast.error(error.response.data.message);\n//       if (error.response.data.code === 'E_UNAUTHORIZED') {\n//         userLogout();\n//       } else if (error.response.data.code === 'E_INVALID_TOKEN') {\n//         //refresh token\n//         const { method, url } = tokenRefresh;\n//         const user = decryptData(localStorage.getItem('user'));\n//         let token = localStorage.getItem('refreshToken');\n//         const req = {\n//           refreshToken: 'jwt ' + JSON.parse(token),\n//         };\n//         let canCall = true;\n//         if (previousRequest && previousRequest.url) {\n//           if (previousRequest.url !== error.config.url) {\n//             previousRequest = error.config;\n//           } else {\n//             canCall = false;\n//           }\n//         } else {\n//           previousRequest = error.config;\n//         }\n//         if (canCall) {\n//           let tokenResponse = CommonService({\n//             ...tokenRefresh,\n//             method,\n//             url,\n//             data: req,\n//           }).then(async (data) => {\n//             if (data && data.code === 'OK') {\n//               localStorage.setItem('token', JSON.stringify(data.data.token));\n//               // refreshToken(res)\n//               // previousRequest.headers['token'] = 'JWT' + data.data.token;\n//               previousRequest.headers['Authorization'] = 'JWT ' + data.data.token;\n//               let res = await instance(previousRequest); // call API which had return expire token error\n//               return Promise.resolve(res);\n//             }\n//           });\n//           if (tokenResponse) return Promise.resolve(tokenResponse);\n//         }\n//       } else {\n\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}