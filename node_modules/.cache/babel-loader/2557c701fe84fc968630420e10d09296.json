{"ast":null,"code":"import moment from 'moment';\nexport const dateTimeFormat = 'MM/DD/YYYY, HH:mm',\n      dateFormat = 'MM/DD/YYYY',\n      dateTimeFormat_AM_PM = 'MM/DD/YYYY, h:mm a',\n      currentDate = format => moment().format(format),\n      displayDateTime = date => {\n  return date ? moment(date).format('MM/DD/YYYY, HH:mm:ss') : '-';\n},\n      // displayDateAndTime = (date) => {\n//   return date ? moment(date).format(dateTimeFormat) : '-';\n// },\n// displayDateTime_AM_PM = (date) => {\n//   return date ? moment(date).format('MM/DD/YYYY, h:mm A') : '-';\n// },\n// displayCustomDateFormat = (date) => {\n//   return date ? moment(date).format('Do MMMM, YYYY | HH:mm a') : '-';\n// },\ndisplayDate = (date, format) => {\n  return date ? moment(date, format).format('MM/DD/YYYY') : '-';\n},\n      displayDateByFormat = (date, format) => {\n  return date ? moment(date).format(format) : '-';\n},\n      displayTime = (date, format) => {\n  return date ? moment(date, format).format('HH:mm') : '-';\n},\n      displyFromNow = date => {\n  return date ? moment(date).fromNow() : '-';\n},\n      getDays = date => {\n  return date ? moment().diff(date, 'days') + ' days ago' : null;\n},\n      displayDOB = date => {\n  if (!date) return '-';\n  const age = moment().diff(moment(date), 'years');\n  return `${moment(date).format('MM/DD/YYYY')} (${age} Years)`;\n},\n      DobValidationForAdult = current => {\n  return current && current > moment().subtract(18, 'years');\n},\n      displayDateBySubtractDays = (date, days) => {\n  if (!date || typeof days === 'undefined') return '-';\n  return moment(date).subtract(days, 'days').format('MM/DD/YYYY');\n},\n      getAgeByDOB = (date, format) => {\n  return moment().diff(date, 'years');\n},\n      disabledDateAfterToday = current => {\n  return current && current > moment().endOf('day');\n},\n      setTimeToZero = date => {\n  return moment(date).utcOffset(0).hours(0).minutes(0).seconds(0).milliseconds(0).toISOString();\n},\n      getTimeDuration = (endDate, startDate) => {\n  let diff = moment(endDate).diff(moment(startDate));\n  let duration = moment.duration(diff); //return obj\n\n  let hour = duration.get('hours');\n  let min = duration.get('minutes');\n  let sec = duration.get('seconds');\n  let str = min + ' min ' + sec + ' sec';\n  if (hour) str = hour + ' hr ' + str;\n  return str;\n},\n      getMomentDifference = (endDate, startDate, diffBy) => {\n  return moment(endDate).diff(moment(startDate), diffBy);\n},\n      disabledHours = selectedDate => {\n  let hours = [],\n      disabledHrs = [];\n\n  for (let i = 0; i < 24; i++) {\n    hours.push(i);\n  }\n\n  if (moment(selectedDate).format(dateFormat) === moment().format(dateFormat)) disabledHrs = hours.filter(x => x < moment().hour());\n  return disabledHrs;\n},\n      disabledMinutes = selectedDate => {\n  let minutes = [],\n      disabledMin = [];\n\n  for (let i = 0; i < 60; i++) {\n    minutes.push(i);\n  }\n\n  if (moment(selectedDate).format(dateFormat) === moment().format(dateFormat) && moment(selectedDate).hour() === moment().hour()) disabledMin = minutes.filter(x => x <= moment().minute());\n  return disabledMin;\n},\n      setMomentObj = date => {\n  return moment(date);\n};","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/util/moment.js"],"names":["moment","dateTimeFormat","dateFormat","dateTimeFormat_AM_PM","currentDate","format","displayDateTime","date","displayDate","displayDateByFormat","displayTime","displyFromNow","fromNow","getDays","diff","displayDOB","age","DobValidationForAdult","current","subtract","displayDateBySubtractDays","days","getAgeByDOB","disabledDateAfterToday","endOf","setTimeToZero","utcOffset","hours","minutes","seconds","milliseconds","toISOString","getTimeDuration","endDate","startDate","duration","hour","get","min","sec","str","getMomentDifference","diffBy","disabledHours","selectedDate","disabledHrs","i","push","filter","x","disabledMinutes","disabledMin","minute","setMomentObj"],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nexport const dateTimeFormat = 'MM/DD/YYYY, HH:mm',\n  dateFormat = 'MM/DD/YYYY',\n  dateTimeFormat_AM_PM = 'MM/DD/YYYY, h:mm a',\n  currentDate = (format) => moment().format(format),\n  displayDateTime = (date) => {\n    return date ? moment(date).format('MM/DD/YYYY, HH:mm:ss') : '-';\n  },\n  // displayDateAndTime = (date) => {\n  //   return date ? moment(date).format(dateTimeFormat) : '-';\n  // },\n  // displayDateTime_AM_PM = (date) => {\n  //   return date ? moment(date).format('MM/DD/YYYY, h:mm A') : '-';\n  // },\n  // displayCustomDateFormat = (date) => {\n  //   return date ? moment(date).format('Do MMMM, YYYY | HH:mm a') : '-';\n  // },\n  displayDate = (date, format) => {\n    return date ? moment(date, format).format('MM/DD/YYYY') : '-';\n  },\n  displayDateByFormat = (date, format) => {\n    return date ? moment(date).format(format) : '-';\n  },\n  displayTime = (date, format) => {\n    return date ? moment(date, format).format('HH:mm') : '-';\n  },\n  displyFromNow = (date) => {\n    return date ? moment(date).fromNow() : '-';\n  },\n  getDays = (date) => {\n    return date ? moment().diff(date, 'days') + ' days ago' : null;\n  },\n  displayDOB = (date) => {\n    if (!date) return '-';\n    const age = moment().diff(moment(date), 'years');\n    return `${moment(date).format('MM/DD/YYYY')} (${age} Years)`;\n  },\n  DobValidationForAdult = (current) => {\n    return current && current > moment().subtract(18, 'years');\n  },\n  displayDateBySubtractDays = (date, days) => {\n    if (!date || typeof days === 'undefined') return '-';\n    return moment(date).subtract(days, 'days').format('MM/DD/YYYY');\n  },\n  getAgeByDOB = (date, format) => {\n    return moment().diff(date, 'years');\n  },\n  disabledDateAfterToday = (current) => {\n    return current && current > moment().endOf('day');\n  },\n  setTimeToZero = (date) => {\n    return moment(date)\n      .utcOffset(0)\n      .hours(0)\n      .minutes(0)\n      .seconds(0)\n      .milliseconds(0)\n      .toISOString();\n  },\n  getTimeDuration = (endDate, startDate) => {\n    let diff = moment(endDate).diff(moment(startDate));\n    let duration = moment.duration(diff); //return obj\n    let hour = duration.get('hours');\n    let min = duration.get('minutes');\n    let sec = duration.get('seconds');\n    let str = min + ' min ' + sec + ' sec';\n    if (hour) str = hour + ' hr ' + str;\n    return str;\n  },\n  getMomentDifference = (endDate, startDate, diffBy) => {\n    return moment(endDate).diff(moment(startDate), diffBy);\n  },\n  disabledHours = (selectedDate) => {\n    let hours = [],\n      disabledHrs = [];\n    for (let i = 0; i < 24; i++) {\n      hours.push(i);\n    }\n    if (moment(selectedDate).format(dateFormat) === moment().format(dateFormat))\n      disabledHrs = hours.filter((x) => x < moment().hour());\n    return disabledHrs;\n  },\n  disabledMinutes = (selectedDate) => {\n    let minutes = [],\n      disabledMin = [];\n    for (let i = 0; i < 60; i++) {\n      minutes.push(i);\n    }\n    if (\n      moment(selectedDate).format(dateFormat) === moment().format(dateFormat) &&\n      moment(selectedDate).hour() === moment().hour()\n    )\n      disabledMin = minutes.filter((x) => x <= moment().minute());\n    return disabledMin;\n  },\n  setMomentObj = (date) => {\n    return moment(date)\n  }\n"]},"metadata":{},"sourceType":"module"}