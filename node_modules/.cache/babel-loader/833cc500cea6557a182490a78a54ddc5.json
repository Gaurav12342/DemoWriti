{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/components/common/Table/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport Columns from './Columns';\nimport PropTypes from 'prop-types';\nimport Rows from './Rows';\nimport Pagination from './Pagination/Pagination';\nimport DisplayNodata from './NoData';\n\nconst _ = require('lodash');\n\nconst sort = {\n  ASC: 'ASC',\n  DESC: 'DESC'\n};\n\nfunction Table(props) {\n  const {\n    columns,\n    filter,\n    datasource,\n    pagination,\n    onChange,\n    resultCol,\n    loading,\n    onShowSizeChange,\n    showResult,\n    style,\n    rowClassName,\n    rowId,\n    setStylesToColumn,\n    renderSubTable\n  } = props;\n  const [C_columns, setColumns] = useState([]);\n  const [D_dataSource, setDataSource] = useState([]);\n  const [filterChanged, setFilterChanged] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [P_Pagination, setPagination] = useState(null);\n  const [isOnFilter, SetIsOnFilter] = useState(false);\n  const [addedFilters, setAddedFilters] = useState({});\n  const [range, setRange] = useState([]);\n  const [addedSorter, setAddedSorters] = useState({});\n  useEffect(() => {\n    setColumnsAndRows();\n    setLoading(true);\n    setDefaultPagination();\n  }, []);\n  useEffect(() => {\n    if (isLoading) {\n      setLoading(false);\n    }\n  }, [C_columns, D_dataSource]);\n  useEffect(() => {\n    if (P_Pagination) {\n      if (P_Pagination.total !== pagination.total) {\n        setDefaultPagination();\n      } else if (P_Pagination.page !== pagination.page) {\n        setDefaultPagination();\n      } else if (P_Pagination.limit !== pagination.limit) {\n        setDefaultPagination();\n      }\n    }\n  }, [pagination]);\n  useEffect(() => {\n    if (!filterChanged && Object.keys(addedFilters).length > 0) {\n      setFilterChanged(true);\n    }\n\n    upDateData();\n  }, [addedFilters]);\n  useEffect(() => {\n    upDateData();\n  }, [addedSorter]);\n  useEffect(() => {\n    upDateData();\n  }, [loading]);\n  useEffect(() => {\n    setData(datasource);\n    setColumnsAndRows();\n  }, [datasource]);\n\n  const upDateData = () => {\n    if (!(D_dataSource && D_dataSource.length)) {\n      setData(_.cloneDeep(datasource));\n    } else {\n      setData(D_dataSource);\n    }\n  };\n\n  const setDefaultPagination = () => {\n    if (Object.keys(pagination).length) {\n      let tempRange = Array.from(Array(pagination.pageSize).keys());\n      setRange(tempRange);\n      setPagination({\n        current: 1,\n        pageSize: pagination.pageSize,\n        total: pagination.total\n      });\n    }\n  };\n\n  const setData = dataSource => {\n    let dataItems = dataSource;\n\n    if (P_Pagination) {\n      if (P_Pagination.total !== pagination.total || P_Pagination.pageSize !== pagination.pageSize || P_Pagination.current !== pagination.current) {\n        setPagination({\n          current: 1,\n          pageSize: pagination.pageSize,\n          total: pagination.total\n        });\n      }\n    }\n\n    setDataSource(dataItems);\n  };\n\n  const sortData = data => {\n    if (data && data.length) {\n      let tempDataSource = [].concat.apply([], data);\n      Object.keys(addedSorter).map(key => {\n        let sortedResult = tempDataSource.sort((a, b) => {\n          if (typeof a[key] === 'string') {\n            let s1 = a[key].toUpperCase();\n            let s2 = b[key].toUpperCase();\n\n            if (s1 < s2) {\n              return addedSorter[key] === sort.ASC ? -1 : 1;\n            }\n\n            if (s1 > s2) {\n              return addedSorter[key] === sort.ASC ? 1 : -1;\n            }\n\n            return 0;\n          } else {\n            return addedSorter[key] === sort.ASC ? a[key] - b[key] : b[key] - a[key];\n          }\n        });\n        tempDataSource = sortedResult;\n      });\n      setData(tempDataSource);\n    }\n  };\n\n  const setFilter = (isChecked, val, dataIndex) => {\n    let temp = addedFilters[dataIndex];\n\n    if (temp) {\n      let index = temp.indexOf(val);\n\n      if (isChecked) {\n        if (index < 0) {\n          temp.push(val);\n        }\n      } else if (index >= 0) {\n        temp.splice(index, 1);\n      }\n    }\n\n    if (temp === undefined && isChecked) {\n      temp = [val];\n    }\n\n    let tempfilter = { ...addedFilters,\n      [dataIndex]: temp\n    };\n    setAddedFilters(prevState => ({ ...prevState,\n      [dataIndex]: temp\n    })); // setOnFilter(false)\n    // handleTableChange(P_Pagination, tempfilter, addedSorter)\n  };\n\n  const setColumnsAndRows = () => {\n    let tempColumns = [];\n    columns.forEach(obj => {\n      let columnClassname, rowClassname;\n\n      if (obj.classname) {\n        columnClassname = 'p_head ' + obj.classname;\n        rowClassname = 'patient_order_d ' + obj.classname;\n      } else {\n        columnClassname = 'p_head';\n        rowClassname = 'patient_order_d';\n      }\n\n      if (obj.width) {\n        obj.style = {\n          width: obj.width\n        };\n      } // obj.filters && obj.filters.map((filterData) => {\n      // setFilter(filterData.val, filterData.text\n      //     , filterData.defaultCheack);\n      //setFilter(filterData.defaultChecked, filterData.value, obj.dataIndex);\n      //console.log('filterData',filterData)\n      // })\n\n\n      tempColumns.push({ ...obj,\n        columnClassname,\n        rowClassname\n      });\n    });\n    setColumns(tempColumns);\n  };\n\n  const clearFilter = dataIndex => {\n    setLoading(true);\n    setOnFilter(false);\n\n    let tempAddedFilters = _.cloneDeep(addedFilters);\n\n    let shouldClear = Object.keys(tempAddedFilters).length > 0;\n\n    if (tempAddedFilters[dataIndex]) {\n      delete tempAddedFilters[dataIndex];\n    }\n\n    setAddedFilters(tempAddedFilters);\n\n    if (pagination) {\n      if (shouldClear) {\n        let tempPagination = { ...P_Pagination,\n          current: 1,\n          total: datasource.length\n        };\n        setPagination(tempPagination);\n        handleTableChange(tempPagination, tempAddedFilters, addedSorter);\n      }\n    } else {\n      handleTableChange(null, tempAddedFilters, addedSorter);\n    }\n\n    setData(_.cloneDeep(datasource));\n  };\n\n  const setSorter = key => {\n    let tempSorter = addedSorter;\n\n    if (tempSorter[key]) {\n      tempSorter[key] = tempSorter[key] === sort.DESC ? sort.ASC : sort.DESC;\n    } else {\n      tempSorter[key] = sort.ASC;\n    }\n\n    setAddedSorters(tempSorter);\n    let tempPagination = null;\n\n    if (pagination) {\n      tempPagination = _.cloneDeep(P_Pagination);\n      tempPagination.current = 1;\n      setPagination(tempPagination);\n    }\n\n    handleTableChange(tempPagination, addedFilters, tempSorter);\n    sortData(D_dataSource);\n  };\n\n  const handleTableChange = (pagination, filter, sorter) => {\n    if (onChange) {\n      onChange(pagination, filter, sorter);\n    }\n  };\n\n  const onPageChange = pageNo => {\n    const {\n      pageSize,\n      total\n    } = P_Pagination;\n    const tempPagination = {\n      current: pageNo,\n      pageSize,\n      total\n    };\n    let tempRange = [];\n\n    for (let i = 0; i < pageSize; i++) {\n      tempRange.push(i);\n    }\n\n    setRange(tempRange);\n    setPagination(tempPagination);\n    handleTableChange(tempPagination, addedFilters, addedSorter);\n  };\n\n  const setOnFilter = () => {\n    if (isOnFilter) {\n      if (filterChanged) {\n        handleTableChange(P_Pagination, addedFilters, addedSorter);\n        setFilterChanged(false);\n      }\n    }\n\n    SetIsOnFilter(state => !state);\n  };\n\n  const handleTableReafresh = () => {\n    clearState();\n  };\n\n  const clearState = () => {\n    setDefaultPagination();\n    SetIsOnFilter(false);\n    setAddedFilters({});\n    setAddedSorters({});\n    handleTableChange({\n      current: 1,\n      pageSize: pagination.pageSize,\n      total: pagination.total\n    }, {});\n  };\n\n  const handleSizeChange = val => {\n    if (typeof val === 'string') {\n      val = parseInt(val);\n    }\n\n    setLoading(true);\n    setPagination(prevPagination => ({ ...prevPagination,\n      pageSize: val\n    }));\n\n    if (pagination && pagination.onShowSizeChange) {\n      pagination.onShowSizeChange(val);\n    }\n  };\n\n  let currentPage = 1;\n\n  if (P_Pagination && P_Pagination.current && D_dataSource) {\n    currentPage = P_Pagination.current;\n  }\n\n  let pageRangeDisplayed = 1;\n\n  if (P_Pagination && P_Pagination.total && P_Pagination.total > P_Pagination.pageSize) {\n    pageRangeDisplayed = parseInt(P_Pagination.total / P_Pagination.pageSize);\n    let mod = P_Pagination.total % P_Pagination.pageSize;\n\n    if (mod > 0) {\n      pageRangeDisplayed += 1;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.noLRPad ? 'data_table_wrap no_lr_pad' : 'data_table_wrap',\n    style: style ? style : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"data_table_cotainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"data_table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 21\n    }\n  }, isLoading || isLoading ? /*#__PURE__*/React.createElement(DisplayNodata, {\n    loading: isLoading || isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 54\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Columns, Object.assign({}, props, {\n    columns: C_columns,\n    setSorter: setSorter,\n    addedFilters: addedFilters,\n    isOnFilter: isOnFilter,\n    setOnFilter: setOnFilter,\n    setFilter: setFilter,\n    clearFilter: clearFilter,\n    filterDataSource: setOnFilter,\n    onTableReafresh: handleTableReafresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 41\n    }\n  }))), loading || isLoading ? /*#__PURE__*/React.createElement(DisplayNodata, {\n    loading: loading || isLoading ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 45\n    }\n  }) : datasource && datasource.length ? D_dataSource && D_dataSource.length ? /*#__PURE__*/React.createElement(Rows, {\n    columns: C_columns,\n    rowId: rowId,\n    showResult: showResult,\n    isData: datasource,\n    resultCol: resultCol,\n    renderSubTable: renderSubTable,\n    datasource: pagination ? D_dataSource : D_dataSource,\n    range: range,\n    rowClassName: rowClassName,\n    setStylesToColumn: setStylesToColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 53\n    }\n  }) : null : /*#__PURE__*/React.createElement(DisplayNodata, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 51\n    }\n  }))))), loading ? null : D_dataSource && D_dataSource.length && P_Pagination ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'inline'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    total: P_Pagination.total,\n    pageRangeDisplayed: pageRangeDisplayed,\n    itemsCountPerPage: P_Pagination.pageSize,\n    activePage: P_Pagination.current,\n    onPageChange: onPageChange,\n    pagination: pagination,\n    onSizeChange: handleSizeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 29\n    }\n  })) : null);\n}\n\nexport default Table;\nTable.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  datasource: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filter: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    limit: PropTypes.number.isRequired,\n    filter: PropTypes.object\n  }),\n  pagination: PropTypes.shape({\n    pageSize: PropTypes.number,\n    total: PropTypes.number,\n    showSizeChanger: PropTypes.bool,\n    onShowSizeChange: PropTypes.func\n  })\n};","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/components/common/Table/index.js"],"names":["React","useState","useEffect","Columns","PropTypes","Rows","Pagination","DisplayNodata","_","require","sort","ASC","DESC","Table","props","columns","filter","datasource","pagination","onChange","resultCol","loading","onShowSizeChange","showResult","style","rowClassName","rowId","setStylesToColumn","renderSubTable","C_columns","setColumns","D_dataSource","setDataSource","filterChanged","setFilterChanged","isLoading","setLoading","P_Pagination","setPagination","isOnFilter","SetIsOnFilter","addedFilters","setAddedFilters","range","setRange","addedSorter","setAddedSorters","setColumnsAndRows","setDefaultPagination","total","page","limit","Object","keys","length","upDateData","setData","cloneDeep","tempRange","Array","from","pageSize","current","dataSource","dataItems","sortData","data","tempDataSource","concat","apply","map","key","sortedResult","a","b","s1","toUpperCase","s2","setFilter","isChecked","val","dataIndex","temp","index","indexOf","push","splice","undefined","tempfilter","prevState","tempColumns","forEach","obj","columnClassname","rowClassname","classname","width","clearFilter","setOnFilter","tempAddedFilters","shouldClear","tempPagination","handleTableChange","setSorter","tempSorter","sorter","onPageChange","pageNo","i","state","handleTableReafresh","clearState","handleSizeChange","parseInt","prevPagination","currentPage","pageRangeDisplayed","mod","noLRPad","display","propTypes","arrayOf","object","isRequired","shape","number","showSizeChanger","bool","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Columns from './Columns'\nimport PropTypes from 'prop-types'\nimport Rows from './Rows'\nimport Pagination from './Pagination/Pagination'\nimport DisplayNodata from './NoData';\n\nconst _ = require('lodash')\nconst sort = {\n    ASC: 'ASC',\n    DESC: 'DESC'\n}\nfunction Table(props) {\n\n    const { columns, filter, datasource, pagination, onChange, resultCol, loading, onShowSizeChange,\n        showResult, style, rowClassName, rowId, setStylesToColumn, renderSubTable } = props\n    const [C_columns, setColumns] = useState([])\n    const [D_dataSource, setDataSource] = useState([])\n    const [filterChanged, setFilterChanged] = useState(false)\n    const [isLoading, setLoading] = useState(false)\n    const [P_Pagination, setPagination] = useState(null)\n    const [isOnFilter, SetIsOnFilter] = useState(false)\n    const [addedFilters, setAddedFilters] = useState({})\n    const [range, setRange] = useState([])\n    const [addedSorter, setAddedSorters] = useState({})\n\n    useEffect(() => {\n        setColumnsAndRows()\n        setLoading(true)\n        setDefaultPagination()\n    }, [])\n\n    useEffect(() => {\n        if (isLoading) {\n            setLoading(false)\n        }\n    }, [C_columns, D_dataSource])\n\n    useEffect(() => {\n        if (P_Pagination) {\n            if (P_Pagination.total !== pagination.total) {\n                setDefaultPagination()\n            }\n            else if (P_Pagination.page !== pagination.page) {\n                setDefaultPagination()\n            }\n            else if (P_Pagination.limit !== pagination.limit) {\n                setDefaultPagination()\n            }\n        }\n    }, [pagination])\n\n    useEffect(() => {\n        if (!filterChanged && Object.keys(addedFilters).length > 0) {\n            setFilterChanged(true)\n        }\n        upDateData()\n    }, [addedFilters])\n\n    useEffect(() => {\n        upDateData()\n    }, [addedSorter])\n\n    useEffect(() => {\n        upDateData()\n    }, [loading])\n\n    useEffect(() => {\n        setData(datasource)\n        setColumnsAndRows()\n    }, [datasource])\n\n    const upDateData = () => {\n        if (!(D_dataSource && D_dataSource.length)) {\n            setData(_.cloneDeep(datasource))\n        }\n        else {\n            setData(D_dataSource)\n        }\n    }\n    const setDefaultPagination = () => {\n        if (Object.keys(pagination).length) {\n            let tempRange = Array.from(Array(pagination.pageSize).keys())\n            setRange(tempRange)\n            setPagination({ current: 1, pageSize: pagination.pageSize, total: pagination.total })\n        }\n    }\n\n    const setData = (dataSource) => {\n        let dataItems = dataSource\n        if (P_Pagination) {\n            if ((P_Pagination.total !== pagination.total) ||\n                (P_Pagination.pageSize !== pagination.pageSize)\n                || P_Pagination.current !== pagination.current) {\n                setPagination({ current: 1, pageSize: pagination.pageSize, total: pagination.total })\n            }\n        }\n        setDataSource(dataItems)\n    }\n\n    const sortData = (data) => {\n        if (data && data.length) {\n            let tempDataSource = [].concat.apply([], data)\n            Object.keys(addedSorter).map(key => {\n                let sortedResult = tempDataSource.sort((a, b) => {\n                    if (typeof a[key] === 'string') {\n                        let s1 = a[key].toUpperCase()\n                        let s2 = b[key].toUpperCase()\n                        if (s1 < s2) {\n                            return (addedSorter[key] === sort.ASC) ? -1 : 1\n                        }\n                        if (s1 > s2) {\n                            return (addedSorter[key] === sort.ASC) ? 1 : -1\n                        }\n                        return 0\n                    }\n                    else {\n                        return addedSorter[key] === sort.ASC ? a[key] - b[key] : b[key] - a[key]\n                    }\n                })\n                tempDataSource = sortedResult\n            })\n            setData(tempDataSource)\n        }\n    }\n    const setFilter = (isChecked, val, dataIndex) => {\n        let temp = addedFilters[dataIndex]\n        if (temp) {\n            let index = temp.indexOf(val)\n            if (isChecked) {\n                if (index < 0) {\n                    temp.push(val)\n                }\n            }\n            else if (index >= 0) {\n                temp.splice(index, 1)\n            }\n        }\n        if (temp === undefined && isChecked) {\n            temp = [val]\n        }\n        let tempfilter = { ...addedFilters, [dataIndex]: temp }\n        setAddedFilters(prevState => ({ ...prevState, [dataIndex]: temp }))\n\n        // setOnFilter(false)\n        // handleTableChange(P_Pagination, tempfilter, addedSorter)\n    }\n\n    const setColumnsAndRows = () => {\n        let tempColumns = []\n        columns.forEach(obj => {\n            let columnClassname, rowClassname\n            if (obj.classname) {\n                columnClassname = 'p_head ' + obj.classname\n                rowClassname = 'patient_order_d ' + obj.classname\n            }\n            else {\n                columnClassname = 'p_head'\n                rowClassname = 'patient_order_d'\n            }\n            if (obj.width) {\n                obj.style = { width: obj.width }\n            }\n\n           // obj.filters && obj.filters.map((filterData) => {\n                // setFilter(filterData.val, filterData.text\n                //     , filterData.defaultCheack);\n                //setFilter(filterData.defaultChecked, filterData.value, obj.dataIndex);\n                //console.log('filterData',filterData)\n           // })\n            tempColumns.push({ ...obj, columnClassname, rowClassname })\n        })\n        setColumns(tempColumns)\n    }\n\n    const clearFilter = (dataIndex) => {\n        setLoading(true)\n        setOnFilter(false)\n        let tempAddedFilters = _.cloneDeep(addedFilters)\n        let shouldClear = Object.keys(tempAddedFilters).length > 0\n        if (tempAddedFilters[dataIndex]) {\n            delete tempAddedFilters[dataIndex]\n        }\n        setAddedFilters(tempAddedFilters)\n        if (pagination) {\n            if (shouldClear) {\n                let tempPagination = { ...P_Pagination, current: 1, total: datasource.length }\n                setPagination(tempPagination)\n                handleTableChange(tempPagination, tempAddedFilters, addedSorter)\n            }\n        }\n        else {\n            handleTableChange(null, tempAddedFilters, addedSorter)\n        }\n        setData(_.cloneDeep(datasource))\n    }\n\n    const setSorter = (key) => {\n        let tempSorter = addedSorter\n        if (tempSorter[key]) {\n            tempSorter[key] = tempSorter[key] === sort.DESC ? sort.ASC : sort.DESC\n        }\n        else {\n            tempSorter[key] = sort.ASC\n        }\n        setAddedSorters(tempSorter)\n        let tempPagination = null\n        if (pagination) {\n            tempPagination = _.cloneDeep(P_Pagination)\n            tempPagination.current = 1\n            setPagination(tempPagination)\n        }\n        handleTableChange(tempPagination, addedFilters, tempSorter)\n        sortData(D_dataSource)\n    }\n\n    const handleTableChange = (pagination, filter, sorter) => {\n        if (onChange) {\n            onChange(pagination, filter, sorter)\n        }\n    }\n    const onPageChange = (pageNo) => {\n        const { pageSize, total } = P_Pagination\n        const tempPagination = {\n            current: pageNo,\n            pageSize,\n            total\n        }\n        let tempRange = []\n        for (let i = 0; i < pageSize; i++) {\n            tempRange.push(i)\n        }\n        setRange(tempRange)\n        setPagination(tempPagination)\n        handleTableChange(tempPagination, addedFilters, addedSorter)\n    }\n\n    const setOnFilter = () => {\n        if (isOnFilter) {\n            if (filterChanged) {\n                handleTableChange(P_Pagination, addedFilters, addedSorter)\n                setFilterChanged(false)\n            }\n        }\n        SetIsOnFilter(state => !state)\n    }\n\n    const handleTableReafresh = () => {\n        clearState()\n    }\n\n    const clearState = () => {\n        setDefaultPagination()\n        SetIsOnFilter(false)\n        setAddedFilters({})\n        setAddedSorters({})\n\n        handleTableChange({\n            current: 1,\n            pageSize: pagination.pageSize,\n            total: pagination.total\n        }, {})\n    }\n\n    const handleSizeChange = (val) => {\n        if (typeof val === 'string') {\n            val = parseInt(val)\n        }\n        setLoading(true)\n        setPagination(prevPagination => ({\n            ...prevPagination, pageSize: val\n        }))\n        if (pagination && pagination.onShowSizeChange) {\n            pagination.onShowSizeChange(val)\n        }\n    }\n\n    let currentPage = 1\n    if (P_Pagination && P_Pagination.current && D_dataSource) {\n        currentPage = P_Pagination.current\n    }\n\n    let pageRangeDisplayed = 1\n    if (P_Pagination && P_Pagination.total && P_Pagination.total > P_Pagination.pageSize) {\n        pageRangeDisplayed = parseInt(P_Pagination.total / P_Pagination.pageSize)\n        let mod = (P_Pagination.total % P_Pagination.pageSize)\n        if (mod > 0) {\n            pageRangeDisplayed += 1\n        }\n    }\n    return (\n        <>\n            <div className={props.noLRPad ? 'data_table_wrap no_lr_pad' : 'data_table_wrap'} style={style ? style : null}>\n                <div className=\"data_table_cotainer\">\n                    <table className=\"data_table\">\n                        {\n                            isLoading || isLoading ? <DisplayNodata loading={isLoading || isLoading} />\n                                : <>\n                                    <>\n                                        <Columns {...props}\n                                            columns={C_columns}\n                                            setSorter={setSorter}\n                                            addedFilters={addedFilters}\n                                            isOnFilter={isOnFilter}\n                                            setOnFilter={setOnFilter}\n                                            setFilter={setFilter}\n                                            clearFilter={clearFilter}\n                                            filterDataSource={setOnFilter}\n                                            onTableReafresh={handleTableReafresh}\n                                        />\n                                    </>\n                                    {/* <div className=\"scroll_wrapper\"> */}\n                                    {\n                                        loading || isLoading ?\n                                            < DisplayNodata loading={loading || isLoading ? true : false} />\n                                            :\n                                            datasource && datasource.length ?\n                                                D_dataSource && D_dataSource.length ?\n                                                    <Rows columns={C_columns}\n                                                        rowId={rowId}\n                                                        showResult={showResult}\n                                                        isData={datasource}\n                                                        resultCol={resultCol}\n                                                        renderSubTable={renderSubTable}\n                                                        datasource={pagination ? D_dataSource : D_dataSource}\n                                                        range={range}\n                                                        rowClassName={rowClassName}\n                                                        setStylesToColumn={setStylesToColumn} />\n                                                    : null\n                                                : <DisplayNodata />\n\n                                    }\n                                    {/* </div>  */}\n                                </>\n                        }\n                    </table>\n                </div>\n            </div>\n            {\n                loading ? null :\n                    D_dataSource && D_dataSource.length && P_Pagination ?\n                        <div style={{ display: 'inline' }}>\n                            <Pagination\n                                total={P_Pagination.total}\n                                pageRangeDisplayed={pageRangeDisplayed}\n                                itemsCountPerPage={P_Pagination.pageSize}\n                                activePage={P_Pagination.current}\n                                onPageChange={onPageChange}\n                                pagination={pagination}\n                                onSizeChange={handleSizeChange}\n                            />\n                        </div> : null\n            }\n        </>\n    )\n}\nexport default Table\nTable.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n    datasource: PropTypes.arrayOf(PropTypes.object).isRequired,\n    filter: PropTypes.shape({\n        page: PropTypes.number.isRequired,\n        limit: PropTypes.number.isRequired,\n        filter: PropTypes.object\n    }),\n    pagination: PropTypes.shape({\n        pageSize: PropTypes.number,\n        total: PropTypes.number,\n        showSizeChanger: PropTypes.bool,\n        onShowSizeChange: PropTypes.func,\n    })\n}\n"]},"metadata":{},"sourceType":"module"}