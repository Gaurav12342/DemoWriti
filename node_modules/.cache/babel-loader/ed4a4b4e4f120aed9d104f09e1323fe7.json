{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/PmrGroup/components/Upsert/index.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { createForm } from 'rc-form';\nimport { withRouter } from 'react-router-dom';\nimport { Toast, Dialog } from '../../../../components/common';\nimport { upsertPmrGroup } from '../../../../services/api/routes/pmr';\nimport { getResidents } from '../../../../services/api/routes/resident';\nimport axios from '../../../../services/api/config';\nimport UpsertForm from './UpsertForm';\nimport moment from 'moment-timezone';\nimport { STATUS } from '../../../../constants/resident';\n\nconst _ = require('lodash');\n\nconst Upsert = props => {\n  const {\n    form,\n    visible,\n    onCancel,\n    data,\n    onOk,\n    authUser\n  } = props;\n\n  const homeAreaId = _.find(data === null || data === void 0 ? void 0 : data.homeAreaIds, 'id');\n\n  const [isSetPref, setIsSetPref] = useState(true);\n  const [residentList, setResidentList] = useState('');\n  const [loadResident, setLoadResident] = useState(false);\n  const [saveLoader, setSaveLoader] = useState(false);\n  const errorRef = useRef(false); // const [homeArea, setHomeArea] = useState(homeAreaId?.id ?? '');\n\n  const [homeArea, setHomeArea] = useState(_.map(data === null || data === void 0 ? void 0 : data.homeAreaIds, dd => {\n    return dd.id;\n  }));\n  const [selectedResident, setSelectedResident] = useState([]);\n  const [total, setTotal] = useState('');\n  const [filter, setFilter] = useState({\n    sortBy: {\n      mergeLFName: 'ASC'\n    },\n    fields: [],\n    find: {},\n    populate: [{\n      homeAreaId: ['name']\n    }, {\n      pmrGroup: ['groupName', 'status', 'patients']\n    }, {\n      'physicianId': [\"mergeLFName\", \"type\", {\n        \"assignedCustomer\": [\"isActive\", \"homeId\", {\n          \"designationId\": [\"name\", \"code\", \"parentId\"]\n        }]\n      }]\n    }]\n  });\n  useEffect(() => {\n    if (homeArea) {\n      if (filter.hasOwnProperty('search') && filter.search['keyword']) {\n        const delayDebounceFn = setTimeout(() => {\n          getResidentList();\n        }, 600);\n        return () => clearTimeout(delayDebounceFn);\n      } else getResidentList();\n    }\n  }, [homeArea, filter]);\n\n  const handleSelectedResident = data => {\n    setSelectedResident(data);\n  };\n\n  const handleHomeArea = value => {\n    setHomeArea(value);\n  };\n\n  const getResidentList = () => {\n    var _authUser$homeId, _authUser$homeId2;\n\n    setLoadResident(true);\n    axios({ ...getResidents,\n      data: {\n        query: { ...filter,\n          find: {\n            homeAreaId: homeArea,\n            status: STATUS.ACTIVE\n          }\n        }\n      },\n      headers: {\n        homeId: (_authUser$homeId = authUser.homeId) === null || _authUser$homeId === void 0 ? void 0 : _authUser$homeId._id,\n        homeIdentifier: (_authUser$homeId2 = authUser.homeId) === null || _authUser$homeId2 === void 0 ? void 0 : _authUser$homeId2.homeIdentifier,\n        isCustom: true\n      }\n    }).then(response => {\n      if (response.data.code === 'OK') {\n        let u = [];\n\n        let userGroupWise = _.groupBy(response.data.data.data, x => {\n          return x.homeAreaId.name;\n        });\n\n        userGroupWise = _.map(userGroupWise, user => {\n          u.push(_.sortBy(user, [\"mergeLFName\"]));\n        });\n        u = _.flatten(u);\n\n        _.map(u, function (x) {\n          if (data) {\n            _.map(data === null || data === void 0 ? void 0 : data.patients, dd => {\n              if (x._id == dd.id) {\n                x.id = x._id;\n                x.selected = true;\n                setSelectedResident(data === null || data === void 0 ? void 0 : data.patients);\n              } // else if(selectedResident.find(x => x.id === dd.id)){\n              //   x.selected = true\n              // }\n\n            });\n          }\n\n          x.id = x._id;\n\n          if (selectedResident.find(y => y.id === x.id)) {\n            x.selected = true;\n          }\n\n          delete x._id;\n          return x;\n        }); // setSelectedResident(old => [...old,data?.patients.filter(x => !!x.selected)]);\n\n\n        setResidentList(u);\n        setTotal(response.data.data.count);\n        setLoadResident(false);\n      } else {\n        setLoadResident(false);\n      }\n    }).catch(error => {\n      setLoadResident(false);\n    });\n  };\n\n  const handleSearch = e => {\n    let value = e.target.value;\n    let obj = { ...filter,\n      page: 1,\n      search: {\n        keyword: value,\n        keys: ['mergeLFName']\n      }\n    };\n    setFilter(obj);\n  };\n\n  const handleSave = () => {\n    setSaveLoader(true);\n    form.validateFields((error, values) => {\n      if (!error) {\n        var _authUser$pharmacyId;\n\n        let obj = _.clone(values);\n\n        obj.timeZone = moment.tz.guess(true);\n        const dateStart = new Date(obj.endDate);\n        const dateEnd = new Date(obj.startDate);\n        obj.endDate = dateStart.toISOString();\n        obj.startDate = dateEnd.toISOString();\n        obj.pharmacyId = authUser === null || authUser === void 0 ? void 0 : (_authUser$pharmacyId = authUser.pharmacyId) === null || _authUser$pharmacyId === void 0 ? void 0 : _authUser$pharmacyId._id;\n\n        if (selectedResident) {\n          let abc = [];\n\n          _.map(selectedResident, data => {\n            abc.push(data.id);\n          });\n\n          obj.patients = abc;\n        }\n\n        if (data === null || data === void 0 ? void 0 : data._id) {\n          obj.id = data._id;\n        }\n\n        if (obj === null || obj === void 0 ? void 0 : obj.homeAreaIds) {\n          let abc = [];\n          obj.homeAreaIds.map(data => {\n            abc.push({\n              id: data\n            });\n          });\n          obj.homeAreaIds = abc;\n        }\n\n        if (values.pushDays && values.dueDays && _.size(values.dueDays) > 0 && _.size(values.pushDays) > 0) {\n          obj.dueDays = parseInt(values.dueDays);\n          obj.pushDays = parseInt(values.pushDays);\n        }\n\n        if (selectedResident && selectedResident.length > 0) {\n          if (data && data._id) {\n            let {\n              method,\n              url,\n              baseURL\n            } = upsertPmrGroup;\n            axios({\n              method,\n              url,\n              baseURL,\n              data: obj\n            }).then(response => {\n              if (response.data.code === 'OK') {\n                setSaveLoader(false);\n                Toast.success(response.data.message);\n                onCancel();\n                onOk();\n              }\n            }).catch(error => {\n              setSaveLoader(false);\n              Toast.error(error);\n            });\n          } else {\n            let {\n              method,\n              url,\n              baseURL\n            } = upsertPmrGroup;\n            axios({\n              method,\n              url,\n              baseURL,\n              data: obj\n            }).then(response => {\n              if (response.data.code === 'OK') {\n                setSaveLoader(false);\n                Toast.success(response.data.message);\n                onCancel();\n                onOk();\n              }\n            }).catch(error => {\n              setSaveLoader(false);\n              Toast.error(error);\n            });\n          }\n        } else {\n          setSaveLoader(false);\n          Toast.error('Please select the resident.');\n        }\n      } else {\n        setSaveLoader(false);\n        Toast.error(error);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dialog, {\n    visible: visible,\n    title: `${data && data._id ? 'Edit' : 'Add'} PMR Schedule Group`,\n    onOk: handleSave,\n    onCancel: onCancel,\n    okText: `${data && data._id ? 'Update' : 'Save'}`,\n    okButtonProps: {\n      loading: saveLoader\n    },\n    style: {\n      width: '900px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UpsertForm, {\n    form: form,\n    getDetail: data,\n    isSetPref: isSetPref,\n    loadResident: loadResident,\n    residentList: residentList,\n    total: total // defaultValues={homeAreaId?.id}\n    ,\n    defaultValues: _.map(data === null || data === void 0 ? void 0 : data.homeAreaIds, dd => {\n      return dd.id;\n    }),\n    onHomeArea: handleHomeArea,\n    onHomeAreaValue: homeArea,\n    onResidentId: handleSelectedResident,\n    onSearch: handleSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser\n  } = auth;\n  return {\n    authUser\n  };\n};\n\nexport default connect(mapStateToProps)(createForm()(withRouter(Upsert)));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/PmrGroup/components/Upsert/index.js"],"names":["React","useEffect","useState","useRef","connect","createForm","withRouter","Toast","Dialog","upsertPmrGroup","getResidents","axios","UpsertForm","moment","STATUS","_","require","Upsert","props","form","visible","onCancel","data","onOk","authUser","homeAreaId","find","homeAreaIds","isSetPref","setIsSetPref","residentList","setResidentList","loadResident","setLoadResident","saveLoader","setSaveLoader","errorRef","homeArea","setHomeArea","map","dd","id","selectedResident","setSelectedResident","total","setTotal","filter","setFilter","sortBy","mergeLFName","fields","populate","pmrGroup","hasOwnProperty","search","delayDebounceFn","setTimeout","getResidentList","clearTimeout","handleSelectedResident","handleHomeArea","value","query","status","ACTIVE","headers","homeId","_id","homeIdentifier","isCustom","then","response","code","u","userGroupWise","groupBy","x","name","user","push","flatten","patients","selected","y","count","catch","error","handleSearch","e","target","obj","page","keyword","keys","handleSave","validateFields","values","clone","timeZone","tz","guess","dateStart","Date","endDate","dateEnd","startDate","toISOString","pharmacyId","abc","pushDays","dueDays","size","parseInt","length","method","url","baseURL","success","message","loading","width","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { createForm } from 'rc-form';\nimport { withRouter } from 'react-router-dom';\nimport { Toast, Dialog } from '../../../../components/common';\nimport { upsertPmrGroup } from '../../../../services/api/routes/pmr';\nimport { getResidents } from '../../../../services/api/routes/resident';\nimport axios from '../../../../services/api/config';\nimport UpsertForm from './UpsertForm';\nimport moment from 'moment-timezone';\nimport { STATUS } from '../../../../constants/resident';\nconst _ = require('lodash');\n\nconst Upsert = (props) => {\n  const { form, visible, onCancel, data, onOk, authUser } = props;\n  const homeAreaId = _.find(data?.homeAreaIds, 'id');\n  const [isSetPref, setIsSetPref] = useState(true);\n  const [residentList, setResidentList] = useState('');\n  const [loadResident, setLoadResident] = useState(false);\n  const [saveLoader, setSaveLoader] = useState(false);\n  const errorRef = useRef(false);\n\n  // const [homeArea, setHomeArea] = useState(homeAreaId?.id ?? '');\n  const [homeArea, setHomeArea] = useState(\n    _.map(data?.homeAreaIds, (dd) => {\n      return dd.id;\n    })\n  );\n\n  const [selectedResident, setSelectedResident] = useState([]);\n  const [total, setTotal] = useState('');\n  const [filter, setFilter] = useState({\n    sortBy: { mergeLFName: 'ASC' },\n    fields: [],\n    find: {},\n    populate: [\n      {\n        homeAreaId: ['name'],\n      },\n      { pmrGroup: ['groupName', 'status', 'patients'] },\n      {\n        'physicianId': [\n          \"mergeLFName\",\n          \"type\",\n          {\n            \"assignedCustomer\": [\n              \"isActive\",\n              \"homeId\",\n              {\n                \"designationId\": [\n                  \"name\",\n                  \"code\",\n                  \"parentId\"\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n  });\n\n  useEffect(() => {\n    if (homeArea) {\n      if (filter.hasOwnProperty('search') && filter.search['keyword']) {\n        const delayDebounceFn = setTimeout(() => {\n          getResidentList();\n        }, 600);\n        return () => clearTimeout(delayDebounceFn);\n      } else getResidentList();\n    }\n  }, [homeArea, filter]);\n\n  const handleSelectedResident = (data) => {\n    setSelectedResident(data);\n  };\n\n  const handleHomeArea = (value) => {\n    setHomeArea(value);\n  };\n\n  const getResidentList = () => {\n    setLoadResident(true);\n    axios({\n      ...getResidents,\n      data: {\n        query: {\n          ...filter,\n          find: {\n            homeAreaId: homeArea,\n            status: STATUS.ACTIVE,\n          },\n        },\n      },\n      headers: {\n        homeId: authUser.homeId?._id,\n        homeIdentifier: authUser.homeId?.homeIdentifier,\n        isCustom: true,\n      },\n    })\n      .then((response) => {\n        if (response.data.code === 'OK') {\n          let u = []\n          let userGroupWise = _.groupBy(response.data.data.data, (x) => {\n            return x.homeAreaId.name\n          });\n          userGroupWise = _.map(userGroupWise, (user) => {\n            u.push(_.sortBy(user, [\"mergeLFName\"]))\n\n          })\n          u = _.flatten(u)\n          _.map(u, function (x) {\n            if (data) {\n              _.map(data?.patients, (dd) => {\n                if (x._id == dd.id) {\n                  x.id = x._id;\n                  x.selected = true;\n                  setSelectedResident(data?.patients);\n                }\n                // else if(selectedResident.find(x => x.id === dd.id)){\n                //   x.selected = true\n                // }\n              });\n            }\n            x.id = x._id;\n            if (selectedResident.find(y => y.id === x.id)) {\n              x.selected = true\n            }\n            delete x._id;\n            return x;\n          });\n          // setSelectedResident(old => [...old,data?.patients.filter(x => !!x.selected)]);\n          setResidentList(u);\n          setTotal(response.data.data.count);\n          setLoadResident(false);\n        } else {\n          setLoadResident(false);\n        }\n      })\n      .catch((error) => {\n        setLoadResident(false);\n      });\n  };\n\n  const handleSearch = (e) => {\n    let value = e.target.value;\n    let obj = {\n      ...filter,\n      page: 1,\n      search: {\n        keyword: value,\n        keys: ['mergeLFName'],\n      },\n    };\n    setFilter(obj);\n  };\n\n  const handleSave = () => {\n    setSaveLoader(true);\n    form.validateFields((error, values) => {\n      if (!error) {\n        let obj = _.clone(values);\n        obj.timeZone = moment.tz.guess(true);\n        const dateStart = new Date(obj.endDate);\n        const dateEnd = new Date(obj.startDate);\n        obj.endDate = dateStart.toISOString();\n        obj.startDate = dateEnd.toISOString();\n        obj.pharmacyId = authUser?.pharmacyId?._id;\n\n        if (selectedResident) {\n          let abc = [];\n          _.map(selectedResident, (data) => {\n            abc.push(data.id);\n          });\n          obj.patients = abc;\n        }\n        if (data?._id) {\n          obj.id = data._id;\n        }\n        if (obj?.homeAreaIds) {\n          let abc = [];\n          obj.homeAreaIds.map((data) => {\n            abc.push({ id: data });\n          });\n          obj.homeAreaIds = abc;\n        }\n        if (\n          values.pushDays &&\n          values.dueDays &&\n          _.size(values.dueDays) > 0 &&\n          _.size(values.pushDays) > 0\n        ) {\n          obj.dueDays = parseInt(values.dueDays);\n          obj.pushDays = parseInt(values.pushDays);\n        }\n        if (selectedResident && selectedResident.length > 0) {\n          if (data && data._id) {\n            let { method, url, baseURL } = upsertPmrGroup;\n            axios({ method, url, baseURL, data: obj })\n              .then((response) => {\n                if (response.data.code === 'OK') {\n                  setSaveLoader(false);\n                  Toast.success(response.data.message);\n                  onCancel();\n                  onOk();\n                }\n              })\n              .catch((error) => {\n                setSaveLoader(false);\n                Toast.error(error);\n              });\n          } else {\n            let { method, url, baseURL } = upsertPmrGroup;\n            axios({ method, url, baseURL, data: obj })\n              .then((response) => {\n                if (response.data.code === 'OK') {\n                  setSaveLoader(false);\n                  Toast.success(response.data.message);\n                  onCancel();\n                  onOk();\n                }\n              })\n              .catch((error) => {\n                setSaveLoader(false);\n                Toast.error(error);\n              });\n          }\n        } else {\n          setSaveLoader(false);\n          Toast.error('Please select the resident.');\n        }\n      } else {\n        setSaveLoader(false);\n        Toast.error(error);\n      }\n    });\n  };\n\n  return (\n    <>\n      <Dialog\n        visible={visible}\n        title={`${data && data._id ? 'Edit' : 'Add'} PMR Schedule Group`}\n        onOk={handleSave}\n        onCancel={onCancel}\n        okText={`${data && data._id ? 'Update' : 'Save'}`}\n        okButtonProps={{ loading: saveLoader }}\n        style={{ width: '900px' }}\n      >\n        <UpsertForm\n          form={form}\n          getDetail={data}\n          isSetPref={isSetPref}\n          loadResident={loadResident}\n          residentList={residentList}\n          total={total}\n          // defaultValues={homeAreaId?.id}\n          defaultValues={_.map(data?.homeAreaIds, (dd) => {\n            return dd.id;\n          })}\n          onHomeArea={handleHomeArea}\n          onHomeAreaValue={homeArea}\n          onResidentId={handleSelectedResident}\n          onSearch={handleSearch}\n        />\n      </Dialog>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ auth }) => {\n  const { authUser } = auth;\n  return {\n    authUser,\n  };\n};\n\nexport default connect(mapStateToProps)(createForm()(withRouter(Upsert)));\n"]},"metadata":{},"sourceType":"module"}