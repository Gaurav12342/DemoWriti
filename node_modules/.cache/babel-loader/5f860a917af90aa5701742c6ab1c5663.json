{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/DynamicModal/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport DynamicModal from './DynamicModal';\nimport { Toast } from '../../../../components/common/index';\n\nconst _ = require('lodash');\n\nfunction DynamicModalMain(props) {\n  const {\n    onCloseModal,\n    isVisible,\n    selectedBodyParts,\n    bodyPartsCodeList,\n    pickedBodyPartsOpt,\n    radioData,\n    residentName,\n    residentAge,\n    data,\n    isEdit,\n    onOk,\n    P_isDeleted,\n    onDynamicModalChange,\n    roomNo\n  } = props;\n  const [optionList, setOptionList] = useState([]);\n  const [title, setTitle] = useState([]);\n  const [alertText, setAlertText] = useState([]);\n  const [detectedNonIgnorableWords, setDetectedNonIgnorableWords] = useState([]);\n  const [selectedCodes, setSelectedCodes] = useState([]);\n  const [textFields, setTextFields] = useState([]);\n  const [errorMessage, setErrorMessage] = useState([]);\n  const [selectedTextInput, setSelectedTextInput] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isDeleted, setIsDeleted] = useState({});\n  const [nonIgnorableWords, setNonIgnorableWords] = useState([]);\n  const [currentSelectedCodes, setCurrentSelectedCodes] = useState([]);\n  useEffect(() => {\n    setIsDeleted(P_isDeleted);\n\n    let tempData = _.cloneDeep(data),\n        tempOptionList = [];\n\n    let title = '';\n\n    if (tempData.isClickable) {\n      tempOptionList = tempData.optionItems;\n    } else {\n      tempOptionList = radioData.optionItems;\n      tempOptionList = tempOptionList.map(opt => {\n        return { ...opt,\n          parent: radioData.code\n        };\n      });\n    }\n\n    console.log('tempData => ', tempData);\n    title = tempData.optionItems.length && tempData.optionItems[0].viewType === 5 ? tempData.optionItems[0].name : '';\n    title = title.split('<NAME>').join(residentName).split('<AGE>').join(residentAge);\n    title = title + roomNo;\n    setTitle(title);\n    setOptionList(tempOptionList);\n    setSelectedCodes(_.cloneDeep(bodyPartsCodeList));\n\n    if (pickedBodyPartsOpt.hasOwnProperty(data.label)) {\n      if (radioData) {\n        if (pickedBodyPartsOpt[data.label][radioData.label]) {\n          setSelectedOptions(pickedBodyPartsOpt[data.label][radioData.label].optionItems);\n          setCurrentSelectedCodes(pickedBodyPartsOpt[data.label][radioData.label].bodyCodes);\n          setOtherOption(pickedBodyPartsOpt[data.label][radioData.label], \"other\");\n        }\n      } else {\n        setSelectedOptions(pickedBodyPartsOpt[data.label].optionItems);\n        setCurrentSelectedCodes(pickedBodyPartsOpt[data.label].bodyCodes);\n        setOtherOption(pickedBodyPartsOpt[data.label], \"other\");\n      }\n    }\n  }, []);\n\n  const setOtherOption = (obj, key) => {\n    if (obj.hasOwnProperty(key)) {\n      setSelectedTextInput(obj[key]);\n    }\n  };\n\n  const handleItemChange = e => {\n    setOptions(e.name);\n    setCode(e.code);\n  };\n\n  const setOptions = val => {\n    let tempOptions = _.cloneDeep(selectedOptions);\n\n    if (tempOptions.indexOf(val) >= 0) {\n      tempOptions.splice(tempOptions.indexOf(val), 1);\n    } else {\n      tempOptions.push(val);\n    }\n\n    setSelectedOptions(tempOptions);\n  };\n\n  const setCode = (code, parentCode) => {\n    let tempCodeList = _.cloneDeep(selectedCodes);\n\n    let cIndex = tempCodeList.indexOf(code);\n\n    if (cIndex >= 0) {\n      tempCodeList.splice(cIndex, 1);\n    } else {\n      tempCodeList.push(code);\n    }\n\n    let index = currentSelectedCodes.indexOf(code);\n\n    if (index >= 0) {\n      currentSelectedCodes.splice(index, 1);\n    } else {\n      currentSelectedCodes.push(code);\n    }\n\n    setSelectedCodes(tempCodeList); // selectedCodes = tempCodeList\n  };\n\n  const removeBodyCode = (codeList, label, tempCodeList) => {\n    if (Object.keys(codeList[label]).length > 0) {\n      Object.keys(codeList[label]).forEach(k => {\n        if (codeList[label][k] && codeList[label][k].bodyCodes) {\n          let removeCodeList = _.cloneDeep(codeList[label][k].bodyCodes);\n\n          if (removeCodeList.length > 0) {\n            tempCodeList = tempCodeList.filter(code => {\n              let tIndex = removeCodeList.indexOf(code);\n\n              if (tIndex >= 0) {\n                removeCodeList.splice(tIndex, 1);\n                return false;\n              }\n\n              return true;\n            });\n          }\n        }\n      });\n    }\n\n    return tempCodeList;\n  };\n\n  const getTextInputName = (data, k) => {\n    if (data.optionItems.length) {\n      let result;\n      data.optionItems.forEach(obj => {\n        if (obj.code === k) {\n          result = obj;\n        }\n      });\n      return result;\n    }\n\n    return;\n  };\n\n  const handleOk = event => {\n    if (alertText.length > 0) {\n      Toast.warn('please remove non ignorable words');\n      return;\n    }\n\n    let tempCodeList = [...selectedCodes];\n    let erMes = '';\n    optionList.forEach(opt => {\n      if (opt.isMandatory && tempCodeList.indexOf(opt.code) < 0) {\n        erMes = \", \" + opt.name + \" \";\n      }\n    });\n\n    if (erMes.length > 0) {\n      erMes = \"Please Fill Out these Fields\" + erMes;\n      setErrorMessage(erMes);\n      return;\n    }\n\n    Object.keys(selectedTextInput).forEach(k => {\n      if (selectedTextInput[k].length > 0) {\n        let result = radioData ? getTextInputName(radioData, k) : getTextInputName(data, k);\n\n        if (result && selectedOptions.indexOf(result.name) < 0) {\n          selectedOptions.push(result.name);\n        }\n      }\n    });\n\n    let bodyPartsSelected = _.cloneDeep(selectedBodyParts);\n\n    if (selectedOptions.length == 0) {\n      setCurrentSelectedCodes([]); // currentSelectedCodes.length = 0\n    }\n\n    if (currentSelectedCodes.length && selectedOptions.length) {\n      if (tempCodeList.indexOf(data.code) < 0) {\n        tempCodeList.push(data.code);\n      }\n\n      optionList.some(opt => {\n        if (radioData && tempCodeList.indexOf(opt.code) >= 0) {\n          if (tempCodeList.indexOf(opt.parent) < 0) {\n            tempCodeList.push(opt.parent);\n          }\n\n          return true;\n        }\n      });\n\n      if (!bodyPartsSelected.includes(data.label)) {\n        if (isEdit && isDeleted.hasOwnProperty(data.label) && isDeleted[data.label]) {\n          setIsDeleted({ ...isDeleted,\n            [data.label]: false\n          });\n        }\n\n        bodyPartsSelected.push(data.label);\n      }\n\n      let bodyObject = {};\n\n      if (radioData) {\n        let otherPickedParts = {};\n\n        if (pickedBodyPartsOpt[data.label]) {\n          otherPickedParts = pickedBodyPartsOpt[data.label];\n          Object.keys(otherPickedParts).forEach(k => {\n            if (k !== radioData.label) {\n              tempCodeList = removeBodyCode(_.cloneDeep(pickedBodyPartsOpt), data.label, _.cloneDeep(tempCodeList));\n\n              if (tempCodeList.indexOf(data.code) < 0) {\n                tempCodeList.push(data.code);\n              }\n            }\n          });\n        }\n\n        bodyObject = { ...pickedBodyPartsOpt,\n          [data.label]: {\n            [radioData.label]: {\n              optionItems: [...selectedOptions],\n              bodyCodes: [...currentSelectedCodes, data.code, radioData.code],\n              other: { ...selectedTextInput\n              }\n            }\n          }\n        };\n      } else {\n        bodyObject = { ...pickedBodyPartsOpt,\n          [data.label]: {\n            optionItems: [...selectedOptions],\n            bodyCodes: [...currentSelectedCodes, data.code],\n            other: { ...selectedTextInput\n            }\n          }\n        };\n      }\n\n      onDynamicModalChange(bodyObject, bodyPartsSelected, tempCodeList, isDeleted);\n    } else {\n      let tempPickedParts = pickedBodyPartsOpt;\n      let tempIndex = bodyPartsSelected.indexOf(data.label);\n\n      if (tempIndex >= 0) {\n        bodyPartsSelected.splice(bodyPartsSelected.indexOf(data.label), 1);\n      }\n\n      delete tempPickedParts[data.label];\n\n      if (isEdit && isDeleted.hasOwnProperty(data.label)) {\n        setIsDeleted({ ...isDeleted,\n          [data.label]: true\n        });\n      }\n\n      tempCodeList.splice(tempCodeList.indexOf(data.code), 1);\n\n      if (radioData && tempCodeList.indexOf(radioData.code) >= 0) {\n        tempCodeList.splice(tempCodeList.indexOf(radioData.code), 1);\n      }\n\n      onDynamicModalChange(tempPickedParts, bodyPartsSelected, tempCodeList, isDeleted);\n    }\n\n    onCloseModal();\n  };\n\n  const handleTextChange = (val, inputOption) => {\n    if (inputOption.nonIgnorableWords) {\n      if (nonIgnorableWords.length === 0) {\n        setNonIgnorableWords(inputOption.nonIgnorableWords.split(',')); // console.log(\"inside nonIgnorableWords\", nonIgnorableWords)\n      }\n\n      let inputTexts = val.split(' ');\n      let detectedWords = '';\n      inputTexts.forEach(words => {\n        if (nonIgnorableWords.includes(words)) {\n          detectedWords = detectedWords.length == 0 ? words : detectedWords + ',' + words;\n        }\n      });\n\n      if (detectedWords.length > 0) {\n        let alertText = inputOption.nonIgnorableWordsNotes.replace('(insert typed word)', detectedWords);\n        setDetectedNonIgnorableWords(detectedWords);\n        setAlertText(alertText);\n      } else {\n        if (detectedNonIgnorableWords.length > 0) {\n          setDetectedNonIgnorableWords('');\n          setAlertText('');\n        }\n      }\n    }\n\n    let tempTextInputs = selectedTextInput;\n    let obj = { ...tempTextInputs,\n      [inputOption.code]: val\n    };\n\n    let tempCodeList = _.cloneDeep(selectedCodes);\n\n    let codeIndex = tempCodeList.indexOf(inputOption.code);\n\n    if (val.length > 0 && codeIndex < 0) {\n      tempCodeList.push(inputOption.code);\n    } else if (val.length === 0 && codeIndex >= 0) {\n      tempCodeList.splice(codeIndex, 1);\n    }\n\n    let currentCodeIndex = currentSelectedCodes.indexOf(inputOption.code);\n\n    if (val.length > 0 && currentCodeIndex < 0) {\n      currentSelectedCodes.push(inputOption.code);\n    } else if (val.length === 0 && currentCodeIndex >= 0) {\n      currentSelectedCodes.splice(currentCodeIndex, 1);\n    }\n\n    setSelectedTextInput(obj);\n    setSelectedCodes(tempCodeList);\n    let tIndex = selectedOptions.indexOf(inputOption.name);\n\n    if (!val && tIndex >= 0) {\n      selectedOptions.splice(tIndex, 1);\n    }\n\n    setSelectedTextInput({ ...selectedTextInput,\n      ...obj\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(DynamicModal, {\n    onCloseModal: onCloseModal,\n    isVisible: isVisible,\n    onOk: handleOk,\n    data: data,\n    title: title,\n    optionList: optionList,\n    handleItemChange: handleItemChange,\n    handleTextChange: handleTextChange,\n    selectedBodyParts: _.cloneDeep(selectedBodyParts),\n    selectedTextInput: _.cloneDeep(selectedTextInput),\n    selectedCodes: _.cloneDeep(selectedCodes),\n    errorMessage: errorMessage,\n    alertText: alertText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  });\n}\n\nexport default DynamicModalMain;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/DynamicModal/index.js"],"names":["React","useState","useEffect","DynamicModal","Toast","_","require","DynamicModalMain","props","onCloseModal","isVisible","selectedBodyParts","bodyPartsCodeList","pickedBodyPartsOpt","radioData","residentName","residentAge","data","isEdit","onOk","P_isDeleted","onDynamicModalChange","roomNo","optionList","setOptionList","title","setTitle","alertText","setAlertText","detectedNonIgnorableWords","setDetectedNonIgnorableWords","selectedCodes","setSelectedCodes","textFields","setTextFields","errorMessage","setErrorMessage","selectedTextInput","setSelectedTextInput","selectedOptions","setSelectedOptions","isDeleted","setIsDeleted","nonIgnorableWords","setNonIgnorableWords","currentSelectedCodes","setCurrentSelectedCodes","tempData","cloneDeep","tempOptionList","isClickable","optionItems","map","opt","parent","code","console","log","length","viewType","name","split","join","hasOwnProperty","label","bodyCodes","setOtherOption","obj","key","handleItemChange","e","setOptions","setCode","val","tempOptions","indexOf","splice","push","parentCode","tempCodeList","cIndex","index","removeBodyCode","codeList","Object","keys","forEach","k","removeCodeList","filter","tIndex","getTextInputName","result","handleOk","event","warn","erMes","isMandatory","bodyPartsSelected","some","includes","bodyObject","otherPickedParts","other","tempPickedParts","tempIndex","handleTextChange","inputOption","inputTexts","detectedWords","words","nonIgnorableWordsNotes","replace","tempTextInputs","codeIndex","currentCodeIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport DynamicModal from './DynamicModal'\nimport { Toast } from '../../../../components/common/index'\nconst _ = require('lodash')\nfunction DynamicModalMain(props) {\n\n    const { onCloseModal, isVisible, selectedBodyParts, bodyPartsCodeList, pickedBodyPartsOpt, radioData,\n        residentName, residentAge, data, isEdit, onOk, P_isDeleted, onDynamicModalChange, roomNo } = props\n    const [optionList, setOptionList] = useState([])\n    const [title, setTitle] = useState([])\n    const [alertText, setAlertText] = useState([])\n    const [detectedNonIgnorableWords, setDetectedNonIgnorableWords] = useState([])\n    const [selectedCodes, setSelectedCodes] = useState([])\n    const [textFields, setTextFields] = useState([])\n    const [errorMessage, setErrorMessage] = useState([])\n    const [selectedTextInput, setSelectedTextInput] = useState([])\n    const [selectedOptions, setSelectedOptions] = useState([])\n    const [isDeleted, setIsDeleted] = useState({})\n    const [nonIgnorableWords, setNonIgnorableWords] = useState([])\n    const [currentSelectedCodes, setCurrentSelectedCodes] = useState([])\n\n    useEffect(() => {\n        setIsDeleted(P_isDeleted)\n        let tempData = _.cloneDeep(data), tempOptionList = []\n        let title = ''\n        if (tempData.isClickable) {\n            tempOptionList = tempData.optionItems\n        }\n        else {\n            tempOptionList = radioData.optionItems\n            tempOptionList = tempOptionList.map(opt => { return { ...opt, parent: radioData.code } })\n        }\n        console.log('tempData => ',tempData)\n        title = tempData.optionItems.length &&\n            tempData.optionItems[0].viewType === 5 ? tempData.optionItems[0].name : ''\n        title = title.split('<NAME>').join(residentName).split('<AGE>').join(residentAge)\n        title = title + (roomNo)\n        setTitle(title)\n        setOptionList(tempOptionList)\n        setSelectedCodes(_.cloneDeep(bodyPartsCodeList))\n\n        if (pickedBodyPartsOpt.hasOwnProperty(data.label)) {\n            if (radioData) {\n                if (pickedBodyPartsOpt[data.label][radioData.label]) {\n                    setSelectedOptions(pickedBodyPartsOpt[data.label][radioData.label].optionItems)\n                    setCurrentSelectedCodes(pickedBodyPartsOpt[data.label][radioData.label].bodyCodes)\n                    setOtherOption(pickedBodyPartsOpt[data.label][radioData.label], \"other\")\n                }\n            }\n            else {\n                setSelectedOptions(pickedBodyPartsOpt[data.label].optionItems)\n                setCurrentSelectedCodes(pickedBodyPartsOpt[data.label].bodyCodes)\n                setOtherOption(pickedBodyPartsOpt[data.label], \"other\")\n            }\n        }\n    }, [])\n\n    const setOtherOption = (obj, key) => {\n        if (obj.hasOwnProperty(key)) {\n            setSelectedTextInput(obj[key])\n        }\n    }\n    const handleItemChange = e => {\n        setOptions(e.name)\n        setCode(e.code)\n    }\n    const setOptions = (val) => {\n        let tempOptions = _.cloneDeep(selectedOptions)\n        if (tempOptions.indexOf(val) >= 0) {\n            tempOptions.splice(tempOptions.indexOf(val), 1)\n        }\n        else {\n            tempOptions.push(val)\n        }\n        setSelectedOptions(tempOptions)\n    }\n    const setCode = (code, parentCode) => {\n        let tempCodeList = _.cloneDeep(selectedCodes)\n        let cIndex = tempCodeList.indexOf(code)\n        if (cIndex >= 0) {\n            tempCodeList.splice(cIndex, 1)\n        }\n        else {\n            tempCodeList.push(code)\n        }\n        let index = currentSelectedCodes.indexOf(code)\n        if (index >= 0) {\n            currentSelectedCodes.splice(index, 1)\n        }\n        else {\n            currentSelectedCodes.push(code)\n        }\n        setSelectedCodes(tempCodeList)\n        // selectedCodes = tempCodeList\n    }\n    const removeBodyCode = (codeList, label, tempCodeList) => {\n        if (Object.keys(codeList[label]).length > 0) {\n            Object.keys(codeList[label]).forEach(k => {\n                if (codeList[label][k] && codeList[label][k].bodyCodes) {\n                    let removeCodeList = _.cloneDeep(codeList[label][k].bodyCodes)\n                    if (removeCodeList.length > 0) {\n                        tempCodeList = tempCodeList.filter(code => {\n                            let tIndex = removeCodeList.indexOf(code)\n                            if (tIndex >= 0) {\n                                removeCodeList.splice(tIndex, 1)\n                                return false\n                            }\n                            return true\n                        })\n                    }\n                }\n            })\n        }\n        return tempCodeList\n    }\n    const getTextInputName = (data, k) => {\n        if (data.optionItems.length) {\n            let result\n            data.optionItems.forEach(obj => {\n                if (obj.code === k) {\n                    result = obj\n                }\n            })\n            return result\n        }\n        return\n    }\n    const handleOk = (event) => {\n        if (alertText.length > 0) {\n            Toast.warn('please remove non ignorable words')\n            return\n        }\n        let tempCodeList = [...selectedCodes]\n        let erMes = ''\n\n        optionList.forEach(opt => {\n            if (opt.isMandatory && tempCodeList.indexOf(opt.code) < 0) {\n                erMes = \", \" + opt.name + \" \"\n            }\n        })\n        if (erMes.length > 0) {\n            erMes = \"Please Fill Out these Fields\" + erMes\n            setErrorMessage(erMes)\n            return\n        }\n        Object.keys(selectedTextInput).forEach(k => {\n            if (selectedTextInput[k].length > 0) {\n                let result = radioData ? getTextInputName(radioData, k) : getTextInputName(data, k)\n                if (result && selectedOptions.indexOf(result.name) < 0) {\n                    selectedOptions.push(result.name)\n                }\n            }\n        })\n        let bodyPartsSelected = _.cloneDeep(selectedBodyParts)\n        if (selectedOptions.length == 0) {\n            setCurrentSelectedCodes([])\n            // currentSelectedCodes.length = 0\n        }\n        if (currentSelectedCodes.length && selectedOptions.length) {\n            if (tempCodeList.indexOf(data.code) < 0) {\n                tempCodeList.push(data.code)\n            }\n            optionList.some(opt => {\n                if (radioData && tempCodeList.indexOf(opt.code) >= 0) {\n                    if (tempCodeList.indexOf(opt.parent) < 0) {\n                        tempCodeList.push(opt.parent)\n                    }\n                    return true\n                }\n            })\n            if (!bodyPartsSelected.includes(data.label)) {\n                if (isEdit && isDeleted.hasOwnProperty(data.label) && isDeleted[data.label]) {\n                    setIsDeleted({ ...isDeleted, [data.label]: false })\n                }\n                bodyPartsSelected.push(data.label)\n            }\n            let bodyObject = {}\n            if (radioData) {\n                let otherPickedParts = {}\n                if (pickedBodyPartsOpt[data.label]) {\n                    otherPickedParts = pickedBodyPartsOpt[data.label]\n                    Object.keys(otherPickedParts).forEach(k => {\n                        if (k !== radioData.label) {\n                            tempCodeList = removeBodyCode(_.cloneDeep(pickedBodyPartsOpt), data.label, _.cloneDeep(tempCodeList))\n                            if (tempCodeList.indexOf(data.code) < 0) {\n                                tempCodeList.push(data.code)\n                            }\n                        }\n                    })\n                }\n                bodyObject = {\n                    ...pickedBodyPartsOpt,\n                    [data.label]: {\n                        [radioData.label]: {\n                            optionItems: [...selectedOptions],\n                            bodyCodes: [...currentSelectedCodes, data.code, radioData.code],\n                            other: { ...selectedTextInput }\n                        }\n                    }\n                }\n            }\n            else {\n                bodyObject = {\n                    ...pickedBodyPartsOpt,\n                    [data.label]: {\n                        optionItems: [...selectedOptions],\n                        bodyCodes: [...currentSelectedCodes, data.code],\n                        other: { ...selectedTextInput }\n                    }\n                }\n            }\n            onDynamicModalChange(bodyObject, bodyPartsSelected, tempCodeList, isDeleted)\n\n        }\n        else {\n            let tempPickedParts = pickedBodyPartsOpt\n            let tempIndex = bodyPartsSelected.indexOf(data.label)\n            if (tempIndex >= 0) {\n                bodyPartsSelected.splice(bodyPartsSelected.indexOf(data.label), 1)\n            }\n            delete tempPickedParts[data.label]\n            if (isEdit && isDeleted.hasOwnProperty(data.label)) {\n                setIsDeleted({ ...isDeleted, [data.label]: true })\n            }\n            tempCodeList.splice(tempCodeList.indexOf(data.code), 1)\n            if (radioData && tempCodeList.indexOf(radioData.code) >= 0) {\n                tempCodeList.splice(tempCodeList.indexOf(radioData.code), 1)\n            }\n            onDynamicModalChange(tempPickedParts, bodyPartsSelected, tempCodeList, isDeleted)\n        }\n        onCloseModal()\n    }\n    const handleTextChange = (val, inputOption) => {\n        if (inputOption.nonIgnorableWords) {\n            if (nonIgnorableWords.length === 0) {\n                setNonIgnorableWords(inputOption.nonIgnorableWords.split(','))\n                // console.log(\"inside nonIgnorableWords\", nonIgnorableWords)\n            }\n            let inputTexts = val.split(' ')\n            let detectedWords = ''\n            inputTexts.forEach(words => {\n                if (nonIgnorableWords.includes(words)) {\n                    detectedWords = detectedWords.length == 0 ? words : detectedWords + ',' + words\n                }\n            })\n            if (detectedWords.length > 0) {\n                let alertText = inputOption.nonIgnorableWordsNotes.replace('(insert typed word)', detectedWords)\n                setDetectedNonIgnorableWords(detectedWords)\n                setAlertText(alertText)\n            }\n            else {\n                if (detectedNonIgnorableWords.length > 0) {\n                    setDetectedNonIgnorableWords('')\n                    setAlertText('')\n                }\n            }\n        }\n        let tempTextInputs = selectedTextInput\n        let obj = {\n            ...tempTextInputs,\n            [inputOption.code]: val\n        }\n        let tempCodeList = _.cloneDeep(selectedCodes)\n        let codeIndex = tempCodeList.indexOf(inputOption.code)\n        if (val.length > 0 && codeIndex < 0) {\n            tempCodeList.push(inputOption.code)\n        } else if (val.length === 0 && codeIndex >= 0) {\n            tempCodeList.splice(codeIndex, 1)\n        }\n\n        let currentCodeIndex = currentSelectedCodes.indexOf(inputOption.code)\n        if (val.length > 0 && currentCodeIndex < 0) {\n            currentSelectedCodes.push(inputOption.code)\n        } else if (val.length === 0 && currentCodeIndex >= 0) {\n            currentSelectedCodes.splice(currentCodeIndex, 1)\n        }\n        setSelectedTextInput(obj)\n        setSelectedCodes(tempCodeList)\n\n        let tIndex = selectedOptions.indexOf(inputOption.name)\n        if (!val && tIndex >= 0) {\n            selectedOptions.splice(tIndex, 1)\n        }\n        setSelectedTextInput({ ...selectedTextInput, ...obj })\n    }\n    return (<DynamicModal\n        onCloseModal={onCloseModal}\n        isVisible={isVisible}\n        onOk={handleOk}\n        data={data}\n        title={title}\n        optionList={optionList}\n        handleItemChange={handleItemChange}\n        handleTextChange={handleTextChange}\n        selectedBodyParts={_.cloneDeep(selectedBodyParts)}\n        selectedTextInput={_.cloneDeep(selectedTextInput)}\n        selectedCodes={_.cloneDeep(selectedCodes)}\n        errorMessage={errorMessage}\n        alertText={alertText}\n    />)\n}\nexport default DynamicModalMain"]},"metadata":{},"sourceType":"module"}