{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/TodoDashboard/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport Dashboard from './Dashboard';\nimport axios from '../../services/api/services/common';\nimport { getTodoCounts } from '../../services/api/routes/todoDashboard';\nimport { todoDashboardUpdate } from '../../services/socket/routes/todo';\nimport { TODO_CATEGORY } from '../../constants/todo';\nimport _ from 'lodash';\nimport { isModuleAccessible, canPerformAction } from '../../util/common';\nimport { MODULE, ACTIONS } from '../../constants/subscription';\nimport { getMappedTodoKey } from '../../util/todo';\n\nconst Todo = props => {\n  const {\n    socket,\n    authUser\n  } = props;\n  const [loading, setLoading] = useState(false);\n  const [filter, setFilter] = useState({});\n  const [dashboardData, setDashboardData] = useState([]);\n  useEffect(() => {\n    fetch();\n  }, [filter]);\n  useEffect(() => {\n    if (socket) socket.on(todoDashboardUpdate, handleDashboardUpdate);\n  }, [dashboardData]);\n\n  const fetch = () => {\n    setLoading(true);\n    axios({ ...getTodoCounts,\n      data: filter\n    }).then(data => {\n      if (data.code === 'OK') {\n        filterData(data.data);\n      }\n\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n    });\n  };\n\n  const handleDashboardUpdate = data => {\n    var _filter$homeAreaId;\n\n    console.log(\"handleDashboardUpdate data => \", data);\n    if (filter && ((_filter$homeAreaId = filter.homeAreaId) === null || _filter$homeAreaId === void 0 ? void 0 : _filter$homeAreaId.length) > 0) return;\n    let tempData = [...dashboardData];\n    tempData.map(x => {\n      if (x.todoCategory === data.todoCategory) {\n        x.data = x.data.map(todo => {\n          let updatedTodo = data.data.find(y => y.type === todo.type);\n          if (updatedTodo) todo.value = updatedTodo.value;\n          return todo;\n        });\n      }\n\n      x.count = _.map(x.data, \"value\").reduce((a, b) => a + b, 0);\n      return x;\n    });\n    setDashboardData(tempData);\n  };\n\n  const filterData = async data => {\n    let tempData = [...data]; // tempData = await Promise.all(tempData.map(async x => {\n    //     if (isModuleAccessible(x.todoCategory)) {\n    //         x.data = await Promise.all(x.data.map(block => {\n    //             let key = getMappedTodoKey(block.type)\n    //             console.log(\"filterData -> key\", key)\n    //             if (canPerformAction({\n    //                 moduleId: x.todoCategory,\n    //                 subModuleId: x.subModule,\n    //                 actiontoCheck: ACTIONS[key].CODE\n    //             })) {\n    //                 return block\n    //             }\n    //         }))\n    //         return x\n    //     }\n    // }))\n\n    setDashboardData(tempData);\n    console.log(\"filterData -> tempData\", tempData);\n    return tempData;\n  };\n\n  const handleHomeAreaChange = val => {\n    let tempFilter = {\n      homeAreaId: val ? [val] : undefined\n    };\n    setFilter(tempFilter);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dashboard, Object.assign({\n    dashboardData: dashboardData,\n    authUser: authUser,\n    loading: loading,\n    onHomeAreaChange: handleHomeAreaChange\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser,\n    socket\n  } = auth;\n  return {\n    authUser,\n    socket\n  };\n};\n\nexport default connect(mapStateToProps)(Todo);","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/TodoDashboard/index.js"],"names":["React","useEffect","useState","connect","Dashboard","axios","getTodoCounts","todoDashboardUpdate","TODO_CATEGORY","_","isModuleAccessible","canPerformAction","MODULE","ACTIONS","getMappedTodoKey","Todo","props","socket","authUser","loading","setLoading","filter","setFilter","dashboardData","setDashboardData","fetch","on","handleDashboardUpdate","data","then","code","filterData","catch","err","console","log","homeAreaId","length","tempData","map","x","todoCategory","todo","updatedTodo","find","y","type","value","count","reduce","a","b","handleHomeAreaChange","val","tempFilter","undefined","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport Dashboard from './Dashboard'\nimport axios from '../../services/api/services/common'\nimport { getTodoCounts } from '../../services/api/routes/todoDashboard'\nimport { todoDashboardUpdate } from '../../services/socket/routes/todo'\nimport { TODO_CATEGORY } from '../../constants/todo'\nimport _ from 'lodash'\nimport { isModuleAccessible, canPerformAction } from '../../util/common'\nimport { MODULE, ACTIONS } from '../../constants/subscription'\nimport { getMappedTodoKey } from '../../util/todo'\n\nconst Todo = (props) => {\n    const { socket, authUser } = props\n    const [loading, setLoading] = useState(false);\n    const [filter, setFilter] = useState({});\n    const [dashboardData, setDashboardData] = useState([]);\n\n    useEffect(() => {\n        fetch();\n    }, [filter]);\n\n    useEffect(() => {\n        if (socket)\n            socket.on(todoDashboardUpdate, handleDashboardUpdate)\n    }, [dashboardData])\n\n    const fetch = () => {\n        setLoading(true);\n        axios({ ...getTodoCounts, data: filter }).then((data) => {\n            if (data.code === 'OK') {\n                filterData(data.data)\n            }\n            setLoading(false);\n        }).catch(err => {\n            setLoading(false);\n        })\n    };\n\n    const handleDashboardUpdate = (data) => {\n        console.log(\"handleDashboardUpdate data => \", data)\n        if (filter && filter.homeAreaId?.length > 0)\n            return\n        let tempData = [...dashboardData]\n        tempData.map(x => {\n            if (x.todoCategory === data.todoCategory) {\n                x.data = x.data.map(todo => {\n                    let updatedTodo = data.data.find(y => y.type === todo.type)\n                    if (updatedTodo)\n                        todo.value = updatedTodo.value\n                    return todo\n                })\n            }\n            x.count = _.map(x.data, \"value\").reduce((a, b) => a + b, 0)\n            return x\n        })\n        setDashboardData(tempData);\n    }\n\n    const filterData = async (data) => {\n        let tempData = [...data]\n\n        // tempData = await Promise.all(tempData.map(async x => {\n        //     if (isModuleAccessible(x.todoCategory)) {\n        //         x.data = await Promise.all(x.data.map(block => {\n        //             let key = getMappedTodoKey(block.type)\n        //             console.log(\"filterData -> key\", key)\n        //             if (canPerformAction({\n        //                 moduleId: x.todoCategory,\n        //                 subModuleId: x.subModule,\n        //                 actiontoCheck: ACTIONS[key].CODE\n        //             })) {\n        //                 return block\n        //             }\n\n        //         }))\n        //         return x\n        //     }\n        // }))\n        setDashboardData(tempData)\n        console.log(\"filterData -> tempData\", tempData)\n        return tempData\n    }\n\n    const handleHomeAreaChange = (val) => {\n        let tempFilter = {\n            homeAreaId: val ? [val] : undefined\n        }\n        setFilter(tempFilter)\n    }\n\n    return <>\n        <Dashboard dashboardData={dashboardData}\n            authUser={authUser}\n            loading={loading}\n            onHomeAreaChange={handleHomeAreaChange}\n            {...props}\n        />\n    </>\n}\n\nconst mapStateToProps = ({ auth }) => {\n    const { authUser, socket } = auth\n    return {\n        authUser,\n        socket\n    }\n}\nexport default connect(mapStateToProps)(Todo)"]},"metadata":{},"sourceType":"module"}