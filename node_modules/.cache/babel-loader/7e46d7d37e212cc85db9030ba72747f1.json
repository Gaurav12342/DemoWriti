{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/ResidentDetail/View/ArchiveTab/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport axios from '../../../../services/api/config';\nimport { archivePaginate } from '../../../../services/api/routes/archive';\nimport { View, Notes, Reminder } from '../../../../assets/images/pmr/index'; // import ViewNotesModal from './components/ViewNotesModal';\n\nimport { MODULE } from '../../../../constants/subscription';\nimport { createForm } from 'rc-form';\nimport { useSelector } from 'react-redux';\nimport Table from './../DigitalBinder/Table';\nimport { displayDateTime } from '../../../../util/moment';\nimport { getUserNameWithDesignation } from '../../../../util/common';\nimport { PMR_STATUS } from '../../../../constants/pmr';\nimport { STATUS as PRESCRIPTION_STATUS } from '../../../../constants/prescription';\nimport NotesModal from '../../../../components/NotesPopup/List';\nimport ReminderModal from '../../../../components/ReminderPopup/List';\nimport { X_RAY_TODO_TYPES, TODO_CATEGORY, SUB_CATEGORY, DEVICE_VIEW } from '../../../../constants/todo';\n\nconst _ = require('lodash');\n\nconst DATA_TYPE = {\n  \"RESIDENT_DOCUMENT\": 1,\n  \"PRESCRIPTION\": 2,\n  \"PMR\": 3\n};\n\nconst lower = (val = '') => typeof val === 'string' && val.toLowerCase() || val;\n\nconst DigitalBinder = ({\n  form,\n  onFetchData,\n  isTabActive\n}) => {\n  const {\n    authUser,\n    currentResidentId\n  } = useSelector(state => ({\n    authUser: state.auth.authUser,\n    currentResidentId: state.resident.currentResidentId\n  }));\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [viewNotesVisible, setViewNotesVisible] = useState(false);\n  const [getSpecificDigitalBinder, setSpecificDigitalBinder] = useState('');\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const tableRef = React.useRef();\n  const allData = React.useRef([]);\n  const currentModalData = React.useRef();\n  const [filter, setFilter] = useState({\n    query: {},\n    \"RESIDENT_DOCUMENT\": {\n      \"populate\": [{\n        \"residentId\": [\"mergeLFName\", \"status\"]\n      }, {\n        \"masterId\": [\"_id\", \"name\"]\n      }, {\n        \"deleteReason\": []\n      }]\n    },\n    \"PRESCRIPTION\": {\n      \"populate\": [{\n        \"residentId\": [\"mergeLFName\", \"status\"]\n      }, {\n        \"homeAreaId\": [\"name\", \"stlCode\"]\n      }, {\n        \"addedBy\": [\"mergeLFName\", \"type\", {\n          \"assignedCustomer\": [\"isActive\", \"homeId\", {\n            \"designationId\": [\"name\", \"code\", \"parentId\"]\n          }]\n        }]\n      }, {\n        \"physicianId\": [\"mergeLFName\", \"type\", {\n          \"assignedCustomer\": [\"isActive\", \"homeId\", {\n            \"designationId\": [\"name\", \"code\", \"parentId\"]\n          }]\n        }]\n      }, {\n        \"prescriptionMedication\": []\n      }, {\n        \"verbalOrderBy\": [\"mergeLFName\"]\n      }]\n    },\n    \"PMR\": {\n      \"populate\": [{\n        \"physicianId\": [\"mergeLFName\", \"type\", {\n          \"assignedCustomer\": [\"isActive\", \"homeId\", {\n            \"designationId\": [\"name\", \"code\", \"parentId\"]\n          }]\n        }]\n      }]\n    }\n  });\n  useEffect(() => {\n    if (!isTabActive) return;\n    fetch();\n  }, [isTabActive, filter]);\n  const columns = React.useMemo(() => [{\n    Header: 'Sr. No.',\n    Cell: ({\n      row\n    }) => row.index + 1\n  }, {\n    Header: 'Type',\n    accessor: 'orderNumber',\n    Cell: ({\n      cell: {\n        value\n      },\n      row: {\n        original\n      }\n    }) => {\n      if (original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }\n        }, \"Rx Order\"), /*#__PURE__*/React.createElement(\"p\", {\n          style: {\n            color: '#609fae'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }\n        }, value));\n      }\n\n      if (original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }\n        }, \"Resident Document\"), /*#__PURE__*/React.createElement(\"p\", {\n          style: {\n            color: '#609fae'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }\n        }, original.masterId.name));\n      }\n\n      if (original.DATA_TYPE === DATA_TYPE.PMR) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }\n        }, \"PMR\"), /*#__PURE__*/React.createElement(\"p\", {\n          style: {\n            color: '#609fae'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }\n        }, original.pmrId));\n      }\n    }\n  }, {\n    Header: 'Archive by',\n    accessor: 'physicianId.mergeLFName',\n    Cell: ({\n      cell: {\n        value\n      },\n      row: {\n        original\n      }\n    }) => /*#__PURE__*/React.createElement(React.Fragment, null, original.physicianId && getUserNameWithDesignation(original.physicianId) || \"-\")\n  }, {\n    Header: 'Date & Time',\n    accessor: 'createdAt',\n    Cell: ({\n      cell: {\n        value\n      }\n    }) => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: 'capitalize'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }, displayDateTime(value))\n  }, {\n    Header: 'Staus',\n    accessor: 'status',\n    Cell: ({\n      row: {\n        original\n      }\n    }) => {\n      const status = original.status;\n\n      if (original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 18\n          }\n        }, _.invert(PRESCRIPTION_STATUS)[status]);\n      }\n\n      if (original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 18\n          }\n        }, \"-\");\n      }\n\n      if (original.DATA_TYPE === DATA_TYPE.PMR) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 18\n          }\n        }, _.invert(PMR_STATUS)[status]);\n      }\n    }\n  }, {\n    Header: 'Action',\n    accessor: 'action',\n    Cell: ({\n      cell: {\n        value\n      },\n      row: {\n        original\n      }\n    }) => {\n      var _original$notesCount;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => createNotesModal(original),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Notes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }\n      }), ((_original$notesCount = original.notesCount) === null || _original$notesCount === void 0 ? void 0 : _original$notesCount.length) > 0 ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"todo tot read\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }\n      }, original.notesCount.length) : null, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }\n      }, \"Notes\")));\n    },\n    disableGlobalFilter: true,\n    hasRefresh: true\n  }], []);\n\n  const onShowSizeChange = size => {\n    if (size) {\n      setFilter(prevFilter => ({ ...prevFilter,\n        limit: size,\n        page: 1\n      }));\n    }\n  };\n\n  const fetch = () => {\n    setLoading(true);\n    let {\n      method,\n      url,\n      baseURL\n    } = archivePaginate;\n    axios({\n      method,\n      url,\n      baseURL,\n      data: { ...filter,\n        ...{\n          query: { ...filter.query,\n            find: {\n              residentId: currentResidentId\n            }\n          }\n        }\n      }\n    }).then(response => {\n      if (response && response.data.code == 'OK') {\n        let dataArray = [];\n\n        _.map(response.data.data, data => {\n          if (data['RESIDENT_DOCUMENT'] && data['RESIDENT_DOCUMENT'].data) {\n            dataArray = _.concat(dataArray, _.map(data['RESIDENT_DOCUMENT'].data, d => {\n              d.DATA_TYPE = DATA_TYPE.RESIDENT_DOCUMENT;\n              return d;\n            }));\n          }\n\n          if (data['PRESCRIPTION'] && data['PRESCRIPTION'].data) {\n            dataArray = _.concat(dataArray, _.map(data['PRESCRIPTION'].data, d => {\n              d.DATA_TYPE = DATA_TYPE.PRESCRIPTION;\n              return d;\n            }));\n          }\n\n          if (data['PMR'] && data['PMR'].data) {\n            dataArray = _.concat(dataArray, _.map(data['PMR'].data, d => {\n              d.DATA_TYPE = DATA_TYPE.PMR;\n              return d;\n            }));\n          }\n        });\n\n        allData.current = [...dataArray];\n        onFetchData({\n          tabtitle: 'Archive',\n          records: dataArray.length,\n          module: MODULE.ARCHIVED_DATA\n        });\n        handleFilter('');\n      }\n    }).catch(error => {\n      setLoading(false);\n      console.log(error);\n    });\n  };\n\n  const handleFilter = (searchVal = '') => {\n    const preFilteredData = [...allData.current];\n\n    if (searchVal.trim() === '') {\n      setData(preFilteredData);\n      setTotal(preFilteredData.length);\n    } else {\n      searchVal = searchVal.trim();\n      const filteredData = preFilteredData.filter(row => {\n        let status = row.status,\n            matchedStatus = '',\n            archiveType = '',\n            createdAt = '';\n\n        if (row.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n          matchedStatus = _.invert(PRESCRIPTION_STATUS)[status];\n          archiveType = row.orderNumber;\n          createdAt = row.orderGeneratedAt;\n        }\n\n        if (row.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n          var _row$masterId;\n\n          matchedStatus = '-';\n          archiveType = (_row$masterId = row.masterId) === null || _row$masterId === void 0 ? void 0 : _row$masterId.name;\n          createdAt = row.createdAt;\n        }\n\n        if (row.DATA_TYPE === DATA_TYPE.PMR) {\n          matchedStatus = _.invert(PMR_STATUS)[status];\n          archiveType = row.pmrId;\n          createdAt = row.createdAt;\n        } // const isPhysicianMatch = lower(row.physicianId?.mergeLFName).includes(lower(searchVal));\n\n\n        const isDateMatch = displayDateTime(createdAt).includes(lower(searchVal));\n        const isStatus = lower(matchedStatus).includes(searchVal);\n        const isArchiveType = lower(archiveType).includes(searchVal);\n        return isArchiveType || isDateMatch || isStatus;\n      });\n      setData(filteredData);\n    }\n\n    setLoading(false);\n  };\n\n  const handleViewNoteModalVisible = record => {\n    setSpecificDigitalBinder(record);\n    setViewNotesVisible(true);\n  };\n\n  const handleViewNoteModalDisable = () => {\n    setViewNotesVisible(false);\n  };\n\n  const createNotesModal = record => {\n    let filterData = {\n      residentDocumentId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.RESIDENT_DOCUMENT ? record._id : undefined,\n      prescriptionOrderId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.PRESCRIPTION ? record._id : undefined,\n      pmrId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.PMR ? record._id : undefined\n    };\n    let options = {\n      query: {\n        find: { ...filterData,\n          subCategory: SUB_CATEGORY.NOTES.GENERAL\n        },\n        populate: [{\n          addedBy: []\n        }]\n      }\n    };\n    currentModalData.current = { ...record\n    };\n    setNotesFilterOptions(options);\n    setViewNotesVisible(true);\n  };\n\n  const visibleNotesModal = (visible, record, str, noteCount) => {\n    setViewNotesVisible(visible);\n    setNotesFilterOptions({});\n\n    if (noteCount != undefined) {\n      setData(oldData => {\n        return oldData.map(d => {\n          if (d._id === currentModalData.current._id) {\n            d['notesCount'] = noteCount;\n            return d;\n          }\n\n          return d;\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resi_treat_content_wrap virtual_visit pmr_tab xray_tab digital_tab\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    form: form,\n    onSearch: handleFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    data: data,\n    isLoading: loading,\n    onTableRefresh: fetch,\n    ref: tableRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }\n  }), viewNotesVisible && /*#__PURE__*/React.createElement(NotesModal, {\n    visible: viewNotesVisible,\n    filterOptions: notesFilterOptions,\n    onCancel: (data, options) => visibleNotesModal(false, null, data, options),\n    isOnlyView: true,\n    modalTitle: `View Note - ${currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT ? currentModalData.current.residentDocId : currentModalData.current.orderNumber}`,\n    xRayNumber: currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT ? currentModalData.current.residentDocId : currentModalData.current.orderNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default createForm()(DigitalBinder);","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/ResidentDetail/View/ArchiveTab/index.js"],"names":["React","useState","useEffect","Header","axios","archivePaginate","View","Notes","Reminder","MODULE","createForm","useSelector","Table","displayDateTime","getUserNameWithDesignation","PMR_STATUS","STATUS","PRESCRIPTION_STATUS","NotesModal","ReminderModal","X_RAY_TODO_TYPES","TODO_CATEGORY","SUB_CATEGORY","DEVICE_VIEW","_","require","DATA_TYPE","lower","val","toLowerCase","DigitalBinder","form","onFetchData","isTabActive","authUser","currentResidentId","state","auth","resident","data","setData","total","setTotal","loading","setLoading","viewNotesVisible","setViewNotesVisible","getSpecificDigitalBinder","setSpecificDigitalBinder","notesFilterOptions","setNotesFilterOptions","tableData","setTableData","tableRef","useRef","allData","currentModalData","filter","setFilter","query","fetch","columns","useMemo","Cell","row","index","accessor","cell","value","original","PRESCRIPTION","color","RESIDENT_DOCUMENT","masterId","name","PMR","pmrId","physicianId","textTransform","status","invert","createNotesModal","notesCount","length","disableGlobalFilter","hasRefresh","onShowSizeChange","size","prevFilter","limit","page","method","url","baseURL","find","residentId","then","response","code","dataArray","map","concat","d","current","tabtitle","records","module","ARCHIVED_DATA","handleFilter","catch","error","console","log","searchVal","preFilteredData","trim","filteredData","matchedStatus","archiveType","createdAt","orderNumber","orderGeneratedAt","isDateMatch","includes","isStatus","isArchiveType","handleViewNoteModalVisible","record","handleViewNoteModalDisable","filterData","residentDocumentId","_id","undefined","prescriptionOrderId","options","subCategory","NOTES","GENERAL","populate","addedBy","visibleNotesModal","visible","str","noteCount","oldData","residentDocId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport axios from '../../../../services/api/config';\nimport { archivePaginate } from '../../../../services/api/routes/archive';\n\nimport { View, Notes, Reminder } from '../../../../assets/images/pmr/index';\n// import ViewNotesModal from './components/ViewNotesModal';\nimport { MODULE } from '../../../../constants/subscription';\nimport { createForm } from 'rc-form';\nimport { useSelector } from 'react-redux';\nimport Table from './../DigitalBinder/Table';\nimport { displayDateTime } from '../../../../util/moment';\nimport { getUserNameWithDesignation } from '../../../../util/common';\nimport { PMR_STATUS } from '../../../../constants/pmr';\nimport { STATUS as PRESCRIPTION_STATUS } from '../../../../constants/prescription';\nimport NotesModal from '../../../../components/NotesPopup/List';\nimport ReminderModal from '../../../../components/ReminderPopup/List';\nimport {\n  X_RAY_TODO_TYPES,\n  TODO_CATEGORY,\n  SUB_CATEGORY,\n  DEVICE_VIEW,\n} from '../../../../constants/todo';\n\nconst _ = require('lodash');\n\nconst DATA_TYPE = {\n  \"RESIDENT_DOCUMENT\": 1,\n  \"PRESCRIPTION\": 2,\n  \"PMR\": 3\n}\n\nconst lower = (val = '') => (typeof val === 'string' && val.toLowerCase()) || val\n\nconst DigitalBinder = ({ form, onFetchData, isTabActive }) => {\n\n  const { authUser, currentResidentId } = useSelector(state => ({\n    authUser: state.auth.authUser,\n    currentResidentId: state.resident.currentResidentId\n  }))\n\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [viewNotesVisible, setViewNotesVisible] = useState(false);\n  const [getSpecificDigitalBinder, setSpecificDigitalBinder] = useState('');\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [tableData, setTableData] = useState([])\n  const tableRef = React.useRef();\n  const allData = React.useRef([]);\n  const currentModalData = React.useRef();\n\n  const [filter, setFilter] = useState({\n    query: {\n\n    },\n    \"RESIDENT_DOCUMENT\": {\n      \"populate\": [{\n        \"residentId\": [\"mergeLFName\", \"status\"]\n      }, {\n        \"masterId\": [\"_id\", \"name\"]\n      }, {\n        \"deleteReason\": []\n      }]\n    },\n    \"PRESCRIPTION\": {\n      \"populate\": [{\n        \"residentId\": [\"mergeLFName\", \"status\"]\n      }, {\n        \"homeAreaId\": [\"name\", \"stlCode\"]\n      }, {\n        \"addedBy\": [\n          \"mergeLFName\",\n          \"type\",\n          {\n            \"assignedCustomer\": [\n              \"isActive\",\n              \"homeId\",\n              {\n                \"designationId\": [\n                  \"name\",\n                  \"code\",\n                  \"parentId\"\n                ]\n              }\n            ],\n          }\n        ]\n      }, {\n        \"physicianId\": [\n          \"mergeLFName\",\n          \"type\",\n          {\n            \"assignedCustomer\": [\n              \"isActive\",\n              \"homeId\",\n              {\n                \"designationId\": [\n                  \"name\",\n                  \"code\",\n                  \"parentId\"\n                ]\n              }\n            ]\n          }\n        ]\n      }, {\n        \"prescriptionMedication\": []\n      }, {\n        \"verbalOrderBy\": [\"mergeLFName\"]\n      }]\n    },\n    \"PMR\": {\n      \"populate\": [{\n        \"physicianId\": [\n          \"mergeLFName\",\n          \"type\",\n          {\n            \"assignedCustomer\": [\n              \"isActive\",\n              \"homeId\",\n              {\n                \"designationId\": [\n                  \"name\",\n                  \"code\",\n                  \"parentId\"\n                ]\n              }\n            ]\n          }\n        ]\n      }]\n    }\n  });\n\n  useEffect(() => {\n    if (!isTabActive)\n      return\n    fetch();\n  }, [isTabActive, filter]);\n\n  const columns = React.useMemo(() => ([\n    {\n      Header: 'Sr. No.',\n      Cell: ({ row }) => row.index + 1\n    },\n    {\n      Header: 'Type',\n      accessor: 'orderNumber',\n      Cell: ({ cell: { value }, row: { original } }) => {\n        if (original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n          return (\n            <>\n              <p>Rx Order</p>\n              <p style={{ color: '#609fae' }} >{value}</p>\n            </>\n          )\n        }\n        if (original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n          return (\n            <>\n              <p>Resident Document</p>\n              <p style={{ color: '#609fae' }} >{original.masterId.name}</p>\n            </>\n          )\n        }\n        if (original.DATA_TYPE === DATA_TYPE.PMR) {\n          return (\n            <>\n              <p>PMR</p>\n              <p style={{ color: '#609fae' }} >{original.pmrId}</p>\n            </>\n          )\n        }\n      }\n    },\n    {\n      Header: 'Archive by',\n      accessor: 'physicianId.mergeLFName',\n      Cell: ({ cell: { value }, row: { original } }) => (\n        <>\n          {original.physicianId && getUserNameWithDesignation(original.physicianId) || \"-\"}\n        </>\n      )\n    },\n    {\n      Header: 'Date & Time',\n      accessor: 'createdAt',\n      Cell: ({ cell: { value } }) => (\n        <span style={{ textTransform: 'capitalize' }}>{displayDateTime(value)}</span>\n      ),\n    },\n    {\n      Header: 'Staus',\n      accessor: 'status',\n      Cell: ({ row: { original } }) => {\n        const status = original.status;\n        if (original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n          return <p>{_.invert(PRESCRIPTION_STATUS)[status]}</p>\n        }\n        if (original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n          return <p>-</p>\n        }\n        if (original.DATA_TYPE === DATA_TYPE.PMR) {\n          return <p>{_.invert(PMR_STATUS)[status]}</p>\n        }\n      },\n    },\n    {\n      Header: 'Action',\n      accessor: 'action',\n      Cell: ({ cell: { value }, row: { original } }) => (\n        <div className='actions'>\n          <div\n            onClick={() => createNotesModal(original)}\n          >\n            <Notes />\n            {original.notesCount?.length > 0 ?\n              <span className=\"todo tot read\">{original.notesCount.length}</span>\n              : null}\n            <p>Notes</p>\n          </div>\n        </div>\n      ),\n      disableGlobalFilter: true,\n      hasRefresh: true\n    },\n  ]), []);\n\n  const onShowSizeChange = (size) => {\n    if (size) {\n      setFilter((prevFilter) => ({ ...prevFilter, limit: size, page: 1 }));\n    }\n  };\n\n  const fetch = () => {\n    setLoading(true);\n    let { method, url, baseURL } = archivePaginate;\n    axios({\n      method,\n      url,\n      baseURL,\n      data: {\n        ...filter,\n        ...{ query: { ...filter.query, find: { residentId: currentResidentId } } }\n      },\n    }).then(response => {\n      if (response && response.data.code == 'OK') {\n\n        let dataArray = []\n        _.map(response.data.data, data => {\n          if (data['RESIDENT_DOCUMENT'] && data['RESIDENT_DOCUMENT'].data) {\n            dataArray = _.concat(dataArray, _.map(data['RESIDENT_DOCUMENT'].data, d => {\n              d.DATA_TYPE = DATA_TYPE.RESIDENT_DOCUMENT;\n              return d\n            }))\n          }\n          if (data['PRESCRIPTION'] && data['PRESCRIPTION'].data) {\n            dataArray = _.concat(dataArray, _.map(data['PRESCRIPTION'].data, d => {\n              d.DATA_TYPE = DATA_TYPE.PRESCRIPTION;\n              return d\n            }))\n          }\n          if (data['PMR'] && data['PMR'].data) {\n            dataArray = _.concat(dataArray, _.map(data['PMR'].data, d => {\n              d.DATA_TYPE = DATA_TYPE.PMR;\n              return d\n            }))\n          }\n        })\n        allData.current = [...dataArray];\n        onFetchData({\n          tabtitle: 'Archive',\n          records: dataArray.length,\n          module: MODULE.ARCHIVED_DATA\n        })\n        handleFilter('');\n\n      }\n    }).catch((error) => {\n      setLoading(false);\n      console.log(error);\n    });\n  };\n\n  const handleFilter = (searchVal = '') => {\n    const preFilteredData = [...allData.current];\n    if (searchVal.trim() === '') {\n      setData(preFilteredData)\n      setTotal(preFilteredData.length);\n    } else {\n      searchVal = searchVal.trim();\n      const filteredData = preFilteredData.filter(row => {\n        let status = row.status, matchedStatus = '', archiveType = '', createdAt = '';\n\n        if (row.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n          matchedStatus = _.invert(PRESCRIPTION_STATUS)[status];\n          archiveType = row.orderNumber;\n          createdAt = row.orderGeneratedAt;\n        }\n        if (row.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n          matchedStatus = '-';\n          archiveType = row.masterId?.name;\n          createdAt = row.createdAt;\n        }\n        if (row.DATA_TYPE === DATA_TYPE.PMR) {\n          matchedStatus = _.invert(PMR_STATUS)[status];\n          archiveType = row.pmrId;\n          createdAt = row.createdAt;\n        }\n        // const isPhysicianMatch = lower(row.physicianId?.mergeLFName).includes(lower(searchVal));\n        const isDateMatch = displayDateTime(createdAt).includes(lower(searchVal));\n        const isStatus = lower(matchedStatus).includes(searchVal);\n        const isArchiveType = lower(archiveType).includes(searchVal);\n        return isArchiveType || isDateMatch || isStatus;\n      })\n      setData(filteredData);\n    }\n    setLoading(false);\n  }\n\n  const handleViewNoteModalVisible = (record) => {\n    setSpecificDigitalBinder(record);\n    setViewNotesVisible(true);\n  };\n\n  const handleViewNoteModalDisable = () => {\n    setViewNotesVisible(false);\n  };\n\n  const createNotesModal = (record) => {\n    let filterData = {\n      residentDocumentId:\n        record?.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT\n          ? record._id\n          : undefined,\n      prescriptionOrderId:\n        record?.DATA_TYPE == DATA_TYPE.PRESCRIPTION ? record._id : undefined,\n      pmrId: record?.DATA_TYPE == DATA_TYPE.PMR ? record._id : undefined,\n    };\n    let options = {\n      query: {\n        find: { ...filterData, subCategory: SUB_CATEGORY.NOTES.GENERAL },\n        populate: [{ addedBy: [] }],\n      },\n    };\n    currentModalData.current = { ...record };\n    setNotesFilterOptions(options);\n    setViewNotesVisible(true);\n  };\n\n  const visibleNotesModal = (visible, record, str, noteCount) => {\n    setViewNotesVisible(visible);\n    setNotesFilterOptions({});\n    if (noteCount != undefined) {\n      setData(oldData => {\n        return oldData.map(d => {\n          if (d._id === currentModalData.current._id) {\n            d['notesCount'] = noteCount;\n            return d;\n          }\n          return d;\n        })\n      })\n    }\n\n  };\n\n\n  return (\n    <div className='resi_treat_content_wrap virtual_visit pmr_tab xray_tab digital_tab'>\n      <Header form={form} onSearch={handleFilter} />\n      <Table\n        columns={columns}\n        data={data}\n        isLoading={loading}\n        onTableRefresh={fetch}\n        ref={tableRef}\n      />\n\n      {viewNotesVisible && (\n        <NotesModal\n          visible={viewNotesVisible}\n          filterOptions={notesFilterOptions}\n          onCancel={(data, options) => visibleNotesModal(false, null, data, options)}\n          isOnlyView={true}\n          modalTitle={`View Note - ${currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT\n            ? currentModalData.current.residentDocId\n            : currentModalData.current.orderNumber\n            }`}\n          xRayNumber={\n            currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT\n              ? currentModalData.current.residentDocId\n              : currentModalData.current.orderNumber\n          }\n        />\n      )}\n    </div>\n  );\n};\n\nexport default createForm()(DigitalBinder)"]},"metadata":{},"sourceType":"module"}