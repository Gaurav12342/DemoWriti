{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Customers/ImagingDiagnostics/components/ImagingTabs.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { createForm } from \"rc-form\";\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport UpsertForm from \"./UpsertForm\";\nimport SettingForm from \"../../Clientele/components/SettingForm\";\nimport { getSpecificImagingDiagnostics, imagingDiagnosticsUpsert, imagingDiagnosticsUpdate } from \"../../../../services/api/routes/customer\";\nimport { Button } from \"../../../../components/common/index\";\nimport { fileUpload } from \"../../../../services/api/routes/common\";\nimport axios from \"../../../../services/api/config\";\nimport { getAll } from \"../../../../services/api/routes/subscription\";\nimport { Toast } from \"../../../../components/common/Toast\";\nimport routes from \"../../../../routes/constant\";\nimport \"rc-tabs/assets/index.css\";\nimport Uploader, { FILE_CATEGORY, FILE_TYPES } from \"../../../../components/common/Upload/Uploader\";\nimport { MODULE, SUB_MODULE } from \"../../../../constants/subscription\";\nimport { canPerformAction } from \"../../../../util/common\";\nimport { CLIENTELE_TYPE } from \"../../../../constants/Customer\";\n\nconst _ = require(\"lodash\");\n\nconst ImagingTabs = props => {\n  var _getData$imagingDiagn, _getData$imagingDiagn2;\n\n  const {\n    form\n  } = props;\n  const {\n    validateFields\n  } = form;\n  const [getData, setData] = useState([]);\n  const [selectedTab, setSelectedTab] = useState(\"1\");\n  const [subscripData, setSubscripData] = useState([]);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [logoVisible, setLogoVisible] = useState(false);\n  const [logoData, setLogoData] = useState(undefined);\n  const [xrayVisible, setXrayVisible] = useState(false);\n  const [xrayData, setXrayData] = useState(undefined);\n  const [ultrasoundVisible, setUltrasoundVisible] = useState(false);\n  const [ultrasoundData, setsetUltrasoundData] = useState(undefined);\n  useEffect(() => {\n    fetchSubscritions();\n  }, []);\n  useEffect(() => {\n    if (props.match.params.id) {\n      getImagingDiagnostics();\n    }\n  }, [props.match.params.id]);\n\n  const fetchSubscritions = () => {\n    let {\n      method,\n      url,\n      baseURL\n    } = getAll;\n    const data = {\n      sort: {\n        createdAt: \"DESC\"\n      },\n      where: {\n        isActive: true\n      }\n    };\n    axios({\n      method,\n      url,\n      baseURL,\n      data\n    }).then(response => {\n      if (response.data.code === \"OK\") {\n        setSubscripData(response.data.data.data);\n      } else {\n        Toast.error(response.data.message);\n      }\n    }).catch(error => {\n      Toast.error(error);\n    });\n  };\n\n  const handleTabChange = key => {\n    setSelectedTab(key);\n  };\n\n  const handleAddImaging = () => {\n    setBtnLoading(true);\n    validateFields((error, value) => {\n      if (!error) {\n        let obj = _.clone(value);\n\n        obj.image = logoData;\n\n        if (obj) {\n          obj.imagingDiagnosticJSON = {\n            ultrasound: ultrasoundData,\n            xray: xrayData\n          };\n        }\n\n        if (obj) {\n          obj.printer = {\n            name: obj.printerName,\n            machineId: obj.machineId\n          };\n        }\n\n        if (obj.email && _.size(obj.email) > 0) {\n          obj.emails = [{\n            email: obj.email,\n            isPrimary: true\n          }];\n        }\n\n        if (obj.fax && _.size(obj.fax) > 0) {\n          obj.faxes = [{\n            fax: obj.fax,\n            isPrimary: true\n          }];\n        }\n\n        if (obj) {\n          obj.mobiles = [{\n            mobile: obj.phone,\n            countryCode: \"91\",\n            isPrimary: true\n          }];\n          obj.addresses = [{\n            isPrimary: true,\n            line1: obj.line1,\n            line2: obj.line2,\n            city: obj.city,\n            province: obj.province,\n            country: obj.country,\n            postalCode: obj.postalCode\n          }];\n        }\n\n        delete obj.line1;\n        delete obj.line2;\n        delete obj.postalCode;\n        delete obj.province;\n        delete obj.country;\n        delete obj.city;\n        delete obj.email;\n        delete obj.fax;\n        delete obj.ultrasound;\n        delete obj.xray;\n        delete obj.file;\n        delete obj.printerName;\n        delete obj.machineId;\n\n        if (!ultrasoundData && !xrayData || ultrasoundData && !xrayData || !ultrasoundData && xrayData) {\n          setBtnLoading(false);\n          Toast.error(`plz upload ${!ultrasoundData ? \"ultrasoundData\" : !xrayData ? \"xrayData\" : \"Plz upload files.\"} file`);\n        } else {\n          let {\n            method,\n            url,\n            baseURL\n          } = getData._id ? imagingDiagnosticsUpdate : imagingDiagnosticsUpsert;\n          url = getData && getData._id ? `${url}/${getData._id}` : url;\n          axios({\n            method,\n            url,\n            baseURL,\n            data: obj\n          }).then(response => {\n            if (response && response.data.code === \"OK\") {\n              setBtnLoading(false);\n              Toast.success(response.data.message);\n              props.history.push(routes.imagingDiagnostics.path);\n            }\n          }).catch(error => {\n            setBtnLoading(false);\n            Toast.error(error);\n          });\n        }\n      } else {\n        setBtnLoading(false);\n        Toast.error(\"Please fill required fields...!\");\n      }\n    });\n  };\n\n  const getImagingDiagnostics = () => {\n    let {\n      method,\n      url,\n      baseURL\n    } = getSpecificImagingDiagnostics;\n    url = `${url}/${props.match.params.id}`;\n    axios({\n      method,\n      url,\n      baseURL\n    }).then(response => {\n      if (response.data.code == \"OK\") {\n        let path = response.data.data;\n        setLogoData(path ? path.image : undefined);\n        setsetUltrasoundData(path ? path.imagingDiagnosticJSON.ultrasound : undefined);\n        setXrayData(path ? path.imagingDiagnosticJSON.xray : undefined);\n        setData(response.data.data);\n      }\n    }).catch(error => {\n      Toast.error(error);\n    });\n  };\n\n  const handleBackRedirect = () => {\n    props.history.push(routes.imagingDiagnostics.path);\n  };\n\n  const isEdit = !!props.match.params.id;\n  let settingParams = {\n    moduleId: MODULE.IMAGING_DIAGNOSIS,\n    subModuleId: SUB_MODULE.IMAGING_DIAGNOSIS_SETTING\n  };\n  const hasSettingPermission = canPerformAction(settingParams, true);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pmr_wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page_head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginBottom: \"-1%\",\n      fontSize: \"20px\",\n      marginLeft: \"2px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 15\n    }\n  }, props.match.params.id ? \"Edit\" : \"Add\", \" Imaging & Diagnostics\")), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginTop: \"5px\"\n    },\n    size: \"lg\",\n    onClick: () => {\n      handleBackRedirect();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }, \"Back\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pmr_list_wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patient_order_wrap\",\n    style: {\n      border: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    defaultActiveKey: selectedTab,\n    activeKey: selectedTab,\n    className: \"permission_tab_wrap\",\n    onChange: handleTabChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Basic\",\n    key: \"1\",\n    className: \"resi_treat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(UpsertForm, {\n    onLogoData: logoData,\n    onLogoVisible: () => {\n      setLogoVisible(true);\n    },\n    onXrayVisible: () => {\n      setXrayVisible(true);\n    },\n    onUltraSoundVisible: () => {\n      setUltrasoundVisible(true);\n    },\n    form: form,\n    onSave: handleAddImaging,\n    editImagningDiagnostics: getData ? getData : null,\n    onTabChange: handleTabChange,\n    editId: props.match.params.id,\n    onCancel: handleBackRedirect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 19\n    }\n  })), !!hasSettingPermission && /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Setting\",\n    key: \"2\",\n    className: \"resi_treat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(SettingForm, {\n    form: form,\n    loading: btnLoading,\n    onSave: handleAddImaging,\n    editId: props.match.params.id,\n    onCancel: handleBackRedirect,\n    subscripData: subscripData,\n    onXrayVisible: () => {\n      setXrayVisible(true);\n    },\n    onUltraSoundVisible: () => {\n      setUltrasoundVisible(true);\n    },\n    queryData: CLIENTELE_TYPE.IMAGING_DIAGNOSTIC,\n    xrayData: xrayData,\n    ultrasoundData: ultrasoundData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    }\n  }))))))), logoVisible && /*#__PURE__*/React.createElement(Uploader, {\n    visible: logoVisible,\n    onRequestClose: () => setLogoVisible(false),\n    multiple: false,\n    allowedTypes: FILE_TYPES.IMAGE,\n    uploadUrl: { ...fileUpload\n    } // defaultList={\n    //   getData?._id ? [getData?.image ? getData.image : null] : null\n    // }\n    ,\n    extraData: {\n      isUploadToS3: true,\n      category: [FILE_CATEGORY.IMAGE].join(\",\")\n    },\n    maxSizeInMB: 1,\n    onError: err => {\n      Toast.error(err);\n    },\n    onSuccess: uploaded => {\n      if (uploaded.code === \"OK\") {\n        uploaded && uploaded.data && uploaded.data.length && uploaded.data.map(data => {\n          return setLogoData(data.path);\n        });\n        setLogoVisible(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }), xrayVisible && /*#__PURE__*/React.createElement(Uploader, {\n    visible: xrayVisible,\n    onRequestClose: () => setXrayVisible(false),\n    multiple: false,\n    defaultList: (getData === null || getData === void 0 ? void 0 : getData._id) ? [(_getData$imagingDiagn = getData.imagingDiagnosticJSON) === null || _getData$imagingDiagn === void 0 ? void 0 : _getData$imagingDiagn.xray] : null,\n    uploadUrl: { ...fileUpload\n    },\n    allowedTypes: FILE_TYPES.JSON,\n    extraData: {\n      isUploadToS3: true,\n      category: [FILE_CATEGORY.JSON].join(\",\")\n    },\n    maxSizeInMB: 1,\n    onError: err => {\n      Toast.error(err);\n    },\n    onSuccess: uploaded => {\n      if (uploaded.code === \"OK\") {\n        uploaded && uploaded.data && uploaded.data.length && uploaded.data.map(data => {\n          return setXrayData(data.path);\n        });\n        setXrayVisible(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }), ultrasoundVisible && /*#__PURE__*/React.createElement(Uploader, {\n    visible: ultrasoundVisible,\n    onRequestClose: () => setUltrasoundVisible(false),\n    multiple: false,\n    uploadUrl: { ...fileUpload\n    },\n    defaultList: (getData === null || getData === void 0 ? void 0 : getData._id) ? [(_getData$imagingDiagn2 = getData.imagingDiagnosticJSON) === null || _getData$imagingDiagn2 === void 0 ? void 0 : _getData$imagingDiagn2.ultrasound] : null,\n    allowedTypes: FILE_TYPES.JSON,\n    extraData: {\n      isUploadToS3: true,\n      category: [FILE_CATEGORY.JSON].join(\",\")\n    },\n    maxSizeInMB: 1,\n    onError: err => {\n      Toast.error(err);\n    },\n    onSuccess: uploaded => {\n      if (uploaded.code === \"OK\") {\n        uploaded && uploaded.data && uploaded.data.length && uploaded.data.map(data => {\n          return setsetUltrasoundData(data.path);\n        });\n        setUltrasoundVisible(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default withRouter(createForm()(ImagingTabs));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Customers/ImagingDiagnostics/components/ImagingTabs.js"],"names":["React","useState","useEffect","withRouter","createForm","Tabs","TabPane","UpsertForm","SettingForm","getSpecificImagingDiagnostics","imagingDiagnosticsUpsert","imagingDiagnosticsUpdate","Button","fileUpload","axios","getAll","Toast","routes","Uploader","FILE_CATEGORY","FILE_TYPES","MODULE","SUB_MODULE","canPerformAction","CLIENTELE_TYPE","_","require","ImagingTabs","props","form","validateFields","getData","setData","selectedTab","setSelectedTab","subscripData","setSubscripData","btnLoading","setBtnLoading","logoVisible","setLogoVisible","logoData","setLogoData","undefined","xrayVisible","setXrayVisible","xrayData","setXrayData","ultrasoundVisible","setUltrasoundVisible","ultrasoundData","setsetUltrasoundData","fetchSubscritions","match","params","id","getImagingDiagnostics","method","url","baseURL","data","sort","createdAt","where","isActive","then","response","code","error","message","catch","handleTabChange","key","handleAddImaging","value","obj","clone","image","imagingDiagnosticJSON","ultrasound","xray","printer","name","printerName","machineId","email","size","emails","isPrimary","fax","faxes","mobiles","mobile","phone","countryCode","addresses","line1","line2","city","province","country","postalCode","file","_id","success","history","push","imagingDiagnostics","path","handleBackRedirect","isEdit","settingParams","moduleId","IMAGING_DIAGNOSIS","subModuleId","IMAGING_DIAGNOSIS_SETTING","hasSettingPermission","marginBottom","fontSize","marginLeft","marginTop","border","IMAGING_DIAGNOSTIC","IMAGE","isUploadToS3","category","join","err","uploaded","length","map","JSON"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { createForm } from \"rc-form\";\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport UpsertForm from \"./UpsertForm\";\nimport SettingForm from \"../../Clientele/components/SettingForm\";\nimport {\n  getSpecificImagingDiagnostics,\n  imagingDiagnosticsUpsert,\n  imagingDiagnosticsUpdate,\n} from \"../../../../services/api/routes/customer\";\nimport { Button } from \"../../../../components/common/index\";\nimport { fileUpload } from \"../../../../services/api/routes/common\";\nimport axios from \"../../../../services/api/config\";\nimport { getAll } from \"../../../../services/api/routes/subscription\";\nimport { Toast } from \"../../../../components/common/Toast\";\nimport routes from \"../../../../routes/constant\";\nimport \"rc-tabs/assets/index.css\";\nimport Uploader, {\n  FILE_CATEGORY,\n  FILE_TYPES,\n} from \"../../../../components/common/Upload/Uploader\";\n\nimport { MODULE, SUB_MODULE } from \"../../../../constants/subscription\";\nimport { canPerformAction } from \"../../../../util/common\";\nimport { CLIENTELE_TYPE } from \"../../../../constants/Customer\";\n\nconst _ = require(\"lodash\");\n\nconst ImagingTabs = (props) => {\n  const { form } = props;\n  const { validateFields } = form;\n  const [getData, setData] = useState([]);\n  const [selectedTab, setSelectedTab] = useState(\"1\");\n  const [subscripData, setSubscripData] = useState([]);\n  const [btnLoading, setBtnLoading] = useState(false);\n\n  const [logoVisible, setLogoVisible] = useState(false);\n  const [logoData, setLogoData] = useState(undefined);\n\n  const [xrayVisible, setXrayVisible] = useState(false);\n  const [xrayData, setXrayData] = useState(undefined);\n\n  const [ultrasoundVisible, setUltrasoundVisible] = useState(false);\n  const [ultrasoundData, setsetUltrasoundData] = useState(undefined);\n\n  useEffect(() => {\n    fetchSubscritions();\n  }, []);\n\n  useEffect(() => {\n    if (props.match.params.id) {\n      getImagingDiagnostics();\n    }\n  }, [props.match.params.id]);\n\n  const fetchSubscritions = () => {\n    let { method, url, baseURL } = getAll;\n    const data = { sort: { createdAt: \"DESC\" }, where: { isActive: true } };\n    axios({ method, url, baseURL, data })\n      .then((response) => {\n        if (response.data.code === \"OK\") {\n          setSubscripData(response.data.data.data);\n        } else {\n          Toast.error(response.data.message);\n        }\n      })\n      .catch((error) => {\n        Toast.error(error);\n      });\n  };\n\n  const handleTabChange = (key) => {\n    setSelectedTab(key);\n  };\n\n  const handleAddImaging = () => {\n    setBtnLoading(true);\n    validateFields((error, value) => {\n      if (!error) {\n        let obj = _.clone(value);\n        obj.image = logoData;\n        if (obj) {\n          obj.imagingDiagnosticJSON = {\n            ultrasound: ultrasoundData,\n            xray: xrayData,\n          };\n        }\n\n        if (obj) {\n          obj.printer = {\n            name: obj.printerName,\n            machineId: obj.machineId,\n          };\n        }\n\n        if (obj.email && _.size(obj.email) > 0) {\n          obj.emails = [{ email: obj.email, isPrimary: true }];\n        }\n        if (obj.fax && _.size(obj.fax) > 0) {\n          obj.faxes = [{ fax: obj.fax, isPrimary: true }];\n        }\n        if (obj) {\n          obj.mobiles = [\n            {\n              mobile: obj.phone,\n              countryCode: \"91\",\n              isPrimary: true,\n            },\n          ];\n\n          obj.addresses = [\n            {\n              isPrimary: true,\n              line1: obj.line1,\n              line2: obj.line2,\n              city: obj.city,\n              province: obj.province,\n              country: obj.country,\n              postalCode: obj.postalCode,\n            },\n          ];\n        }\n        delete obj.line1;\n        delete obj.line2;\n        delete obj.postalCode;\n        delete obj.province;\n        delete obj.country;\n        delete obj.city;\n        delete obj.email;\n        delete obj.fax;\n        delete obj.ultrasound;\n        delete obj.xray;\n        delete obj.file;\n        delete obj.printerName;\n        delete obj.machineId;\n\n        if (\n          (!ultrasoundData && !xrayData) ||\n          (ultrasoundData && !xrayData) ||\n          (!ultrasoundData && xrayData)\n        ) {\n          setBtnLoading(false);\n          Toast.error(\n            `plz upload ${\n            !ultrasoundData\n              ? \"ultrasoundData\"\n              : !xrayData\n                ? \"xrayData\"\n                : \"Plz upload files.\"\n            } file`\n          );\n        } else {\n          let { method, url, baseURL } = getData._id\n            ? imagingDiagnosticsUpdate\n            : imagingDiagnosticsUpsert;\n          url = getData && getData._id ? `${url}/${getData._id}` : url;\n          axios({ method, url, baseURL, data: obj })\n            .then((response) => {\n              if (response && response.data.code === \"OK\") {\n                setBtnLoading(false);\n                Toast.success(response.data.message);\n                props.history.push(routes.imagingDiagnostics.path);\n              }\n            })\n            .catch((error) => {\n              setBtnLoading(false);\n              Toast.error(error);\n            });\n        }\n      } else {\n        setBtnLoading(false);\n        Toast.error(\"Please fill required fields...!\");\n      }\n    });\n  };\n\n  const getImagingDiagnostics = () => {\n    let { method, url, baseURL } = getSpecificImagingDiagnostics;\n    url = `${url}/${props.match.params.id}`;\n    axios({ method, url, baseURL })\n      .then((response) => {\n        if (response.data.code == \"OK\") {\n          let path = response.data.data;\n          setLogoData(path ? path.image : undefined);\n          setsetUltrasoundData(\n            path ? path.imagingDiagnosticJSON.ultrasound : undefined\n          );\n          setXrayData(path ? path.imagingDiagnosticJSON.xray : undefined);\n          setData(response.data.data);\n        }\n      })\n      .catch((error) => {\n        Toast.error(error);\n      });\n  };\n\n  const handleBackRedirect = () => {\n    props.history.push(routes.imagingDiagnostics.path);\n  };\n\n  const isEdit = !!props.match.params.id;\n\n  let settingParams = {\n    moduleId: MODULE.IMAGING_DIAGNOSIS,\n    subModuleId: SUB_MODULE.IMAGING_DIAGNOSIS_SETTING,\n  };\n  const hasSettingPermission = canPerformAction(settingParams, true);\n\n  return (\n    <>\n      <div className=\"pmr_wrap\">\n        <div className=\"container\">\n          <div className=\"page_head\">\n            <span\n              style={{\n                marginBottom: \"-1%\",\n                fontSize: \"20px\",\n                marginLeft: \"2px\",\n              }}\n            >\n              <b>\n                {props.match.params.id ? \"Edit\" : \"Add\"} Imaging &amp;\n                Diagnostics\n              </b>\n            </span>\n            <Button\n              style={{ marginTop: \"5px\" }}\n              size=\"lg\"\n              onClick={() => {\n                handleBackRedirect();\n              }}\n            >\n              Back\n            </Button>\n          </div>\n          <div className=\"pmr_list_wrap\">\n            <div className=\"patient_order_wrap\" style={{ border: \"none\" }}>\n              <Tabs\n                defaultActiveKey={selectedTab}\n                activeKey={selectedTab}\n                className=\"permission_tab_wrap\"\n                onChange={handleTabChange}\n              >\n                <TabPane tab=\"Basic\" key=\"1\" className=\"resi_treat\">\n                  <UpsertForm\n                    onLogoData={logoData}\n                    onLogoVisible={() => {\n                      setLogoVisible(true);\n                    }}\n                    onXrayVisible={() => {\n                      setXrayVisible(true);\n                    }}\n                    onUltraSoundVisible={() => {\n                      setUltrasoundVisible(true);\n                    }}\n                    form={form}\n                    onSave={handleAddImaging}\n                    editImagningDiagnostics={getData ? getData : null}\n                    onTabChange={handleTabChange}\n                    editId={props.match.params.id}\n                    onCancel={handleBackRedirect}\n                  />\n                </TabPane>\n                {!!hasSettingPermission && (\n                  <TabPane tab=\"Setting\" key=\"2\" className=\"resi_treat\">\n                    <SettingForm\n                      form={form}\n                      loading={btnLoading}\n                      onSave={handleAddImaging}\n                      editId={props.match.params.id}\n                      onCancel={handleBackRedirect}\n                      subscripData={subscripData}\n                      onXrayVisible={() => {\n                        setXrayVisible(true);\n                      }}\n                      onUltraSoundVisible={() => {\n                        setUltrasoundVisible(true);\n                      }}\n                      queryData={CLIENTELE_TYPE.IMAGING_DIAGNOSTIC}\n                      xrayData={xrayData}\n                      ultrasoundData={ultrasoundData}\n                    />\n                  </TabPane>\n                )}\n              </Tabs>\n            </div>\n          </div>\n        </div>\n      </div>\n      {logoVisible && (\n        <Uploader\n          visible={logoVisible}\n          onRequestClose={() => setLogoVisible(false)}\n          multiple={false}\n          allowedTypes={FILE_TYPES.IMAGE}\n          uploadUrl={{ ...fileUpload }}\n          // defaultList={\n          //   getData?._id ? [getData?.image ? getData.image : null] : null\n          // }\n          extraData={{\n            isUploadToS3: true,\n            category: [FILE_CATEGORY.IMAGE].join(\",\"),\n          }}\n          maxSizeInMB={1}\n          onError={(err) => {\n            Toast.error(err);\n          }}\n          onSuccess={(uploaded) => {\n            if (uploaded.code === \"OK\") {\n              uploaded &&\n                uploaded.data &&\n                uploaded.data.length &&\n                uploaded.data.map((data) => {\n                  return setLogoData(data.path);\n                });\n              setLogoVisible(false);\n            }\n          }}\n        />\n      )}\n      {xrayVisible && (\n        <Uploader\n          visible={xrayVisible}\n          onRequestClose={() => setXrayVisible(false)}\n          multiple={false}\n          defaultList={\n            getData?._id ? [getData.imagingDiagnosticJSON?.xray] : null\n          }\n          uploadUrl={{ ...fileUpload }}\n          allowedTypes={FILE_TYPES.JSON}\n          extraData={{\n            isUploadToS3: true,\n            category: [FILE_CATEGORY.JSON].join(\",\"),\n          }}\n          maxSizeInMB={1}\n          onError={(err) => {\n            Toast.error(err);\n          }}\n          onSuccess={(uploaded) => {\n            if (uploaded.code === \"OK\") {\n              uploaded &&\n                uploaded.data &&\n                uploaded.data.length &&\n                uploaded.data.map((data) => {\n                  return setXrayData(data.path);\n                });\n              setXrayVisible(false);\n            }\n          }}\n        />\n      )}\n      {ultrasoundVisible && (\n        <Uploader\n          visible={ultrasoundVisible}\n          onRequestClose={() => setUltrasoundVisible(false)}\n          multiple={false}\n          uploadUrl={{ ...fileUpload }}\n          defaultList={\n            getData?._id ? [getData.imagingDiagnosticJSON?.ultrasound] : null\n          }\n          allowedTypes={FILE_TYPES.JSON}\n          extraData={{\n            isUploadToS3: true,\n            category: [FILE_CATEGORY.JSON].join(\",\"),\n          }}\n          maxSizeInMB={1}\n          onError={(err) => {\n            Toast.error(err);\n          }}\n          onSuccess={(uploaded) => {\n            if (uploaded.code === \"OK\") {\n              uploaded &&\n                uploaded.data &&\n                uploaded.data.length &&\n                uploaded.data.map((data) => {\n                  return setsetUltrasoundData(data.path);\n                });\n              setUltrasoundVisible(false);\n            }\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default withRouter(createForm()(ImagingTabs));\n"]},"metadata":{},"sourceType":"module"}