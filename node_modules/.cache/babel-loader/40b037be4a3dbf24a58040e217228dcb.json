{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/ResidentDetail/View/DigitalBinder/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\"; // import Table from '../../../../components/common/Table/index';\n\nimport axios from \"../../../../services/api/config\";\nimport { getRxImage } from \"../../../../services/api/services/common\";\nimport { digitalBinderPaginate } from '../../../../services/api/routes/digitalBinder';\nimport { View, Notes, Reminder } from '../../../../assets/images/pmr/index';\nimport { Edit, Todo } from '../../../../assets/images/resident-detail/index'; // import ViewNotesModal from './components/ViewNotesModal';\n\nimport { MODULE, ACTIONS } from '../../../../constants/subscription';\nimport { createForm } from 'rc-form';\nimport { useSelector } from 'react-redux';\nimport Table from './Table';\nimport { displayDateTime } from '../../../../util/moment';\nimport { canPerformAction, getUserNameWithDesignation } from '../../../../util/common';\nimport { PMR_STATUS } from '../../../../constants/pmr';\nimport { STATUS as PRESCRIPTION_STATUS, MODIFY_ACTION, TYPE, RX_TYPE } from '../../../../constants/prescription';\nimport NotesModal from '../../../../components/NotesPopup/List';\nimport ReminderModal from '../../../../components/ReminderPopup/List';\nimport { LightBox } from '../../../../components/common';\nimport { TODO_CATEGORY, SUB_CATEGORY, DEVICE_VIEW } from '../../../../constants/todo';\nimport moment, { isDate } from 'moment';\nimport AuthenticateModal from '../../../../components/AuthenticateModal';\nimport { getTodoRedirectUrl } from '../../../../util/todo';\n\nconst _ = require('lodash');\n\nconst DATA_TYPE = {\n  RESIDENT_DOCUMENT: 1,\n  PRESCRIPTION: 2,\n  PMR: 3\n};\n\nconst lower = (val = \"\") => typeof val === \"string\" && val.toLowerCase() || val;\n\nconst DigitalBinder = ({\n  form,\n  onEditRx,\n  isTabActive\n}) => {\n  const {\n    authUser,\n    currentResidentId\n  } = useSelector(state => ({\n    authUser: state.auth.authUser,\n    currentResidentId: state.resident.currentResidentId\n  }));\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [viewNotesVisible, setViewNotesVisible] = useState(false);\n  const [getSpecificDigitalBinder, setSpecificDigitalBinder] = useState(\"\");\n  const [notesModal, setNotesModal] = useState(false);\n  const [reminderModal, setReminderModal] = useState(false);\n  const [reminderFilterOptions, setReminderFilterOptions] = useState({});\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [residentDocId, setResidentDocId] = useState(\"\");\n  const [visibleImage, setVisibleImage] = useState(false);\n  const [detail, setDetail] = useState(null);\n  const [visibleEdit, setVisibleEdit] = useState(false);\n  const currentModalData = React.useRef();\n  const tableRef = React.useRef();\n  const allData = React.useRef([]);\n  let redirectUrl = '';\n  const [filter, setFilter] = useState({\n    query: {},\n    RESIDENT_DOCUMENT: {\n      populate: [{\n        masterId: ['name']\n      }, {\n        physicianId: [\"mergeLFName\", \"type\", {\n          \"assignedCustomer\": [\"isActive\", \"homeId\", {\n            \"designationId\": [\"name\", \"code\", \"parentId\"]\n          }]\n        }]\n      }]\n    },\n    PMR: {\n      populate: [{\n        masterId: ['name']\n      }, {\n        acknowledgedBy: []\n      }, {\n        physicianId: [\"mergeLFName\", \"type\", {\n          \"assignedCustomer\": [\"isActive\", \"homeId\", {\n            \"designationId\": [\"name\", \"code\", \"parentId\"]\n          }]\n        }]\n      }]\n    },\n    PRESCRIPTION: {\n      fields: [],\n      populate: [{\n        masterId: ['name']\n      }, {\n        thirdPartyPrescriptionType: []\n      }, {\n        physicianId: [\"mergeLFName\", \"type\", {\n          \"assignedCustomer\": [\"isActive\", \"homeId\", {\n            \"designationId\": [\"name\", \"code\", \"parentId\"]\n          }]\n        }]\n      }, {\n        \"prescriptionMedication\": null,\n        \"match\": {\n          \"isDelete\": false\n        }\n      }]\n    }\n  });\n  useEffect(() => {\n    if (!isTabActive) return;\n    fetch();\n  }, [filter, isTabActive]);\n\n  const handleViewImages = (visible, record) => {\n    if (visible && record.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n      getRxImage([record._id]).then(resp => {\n        if (resp === null || resp === void 0 ? void 0 : resp[0]) record.attachments = resp[0].attachments;\n        record && record.attachments.map((x, i) => {\n          x.caption = `${record.orderNumber}-${i + 1}`;\n          return x;\n        });\n        setDetail(record);\n        setVisibleImage(visible); // setImgLoader(false)\n      }).catch(err => {// setImgLoader(true)\n      });\n    } else {\n      setVisibleImage(visible);\n      setDetail(record);\n    }\n  };\n\n  const prepareAttachments = () => {\n    let imageViewer = [];\n\n    if (detail && detail.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT) {\n      var _detail$documents;\n\n      if ((detail === null || detail === void 0 ? void 0 : (_detail$documents = detail.documents) === null || _detail$documents === void 0 ? void 0 : _detail$documents.length) > 0) {\n        imageViewer = _.map(detail.documents, function (a) {\n          a.src = a.path;\n          return a;\n        });\n      }\n    } else if (detail && detail.DATA_TYPE == DATA_TYPE.PRESCRIPTION) {\n      var _detail$attachments;\n\n      if ((detail === null || detail === void 0 ? void 0 : (_detail$attachments = detail.attachments) === null || _detail$attachments === void 0 ? void 0 : _detail$attachments.length) > 0) {\n        imageViewer = _.map(detail.attachments, function (a) {\n          a.src = a.path;\n          return a;\n        });\n      }\n    } else if (detail && detail.DATA_TYPE == DATA_TYPE.PMR) {\n      var _detail$attachments2;\n\n      if ((detail === null || detail === void 0 ? void 0 : (_detail$attachments2 = detail.attachments) === null || _detail$attachments2 === void 0 ? void 0 : _detail$attachments2.length) > 0) {\n        imageViewer = _.map(detail.attachments, function (a) {\n          a.src = a.path;\n          return a;\n        });\n      }\n    }\n\n    return {\n      imageViewer\n    };\n  };\n\n  const {\n    imageViewer\n  } = prepareAttachments();\n  const columns = React.useMemo(() => [{\n    Header: \"Sr. No.\",\n    Cell: ({\n      row\n    }) => row.index + 1\n  }, {\n    Header: \"Type\",\n    accessor: \"orderNumber\",\n    Cell: ({\n      cell: {\n        value\n      },\n      row: {\n        original\n      }\n    }) => {\n      if (original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 17\n          }\n        }, \"Rx Order\"), /*#__PURE__*/React.createElement(\"p\", {\n          style: {\n            color: \"#609fae\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }\n        }, value));\n      }\n\n      if (original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }\n        }, \"Resident Document\"), /*#__PURE__*/React.createElement(\"p\", {\n          style: {\n            color: \"#609fae\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }\n        }, original.residentDocId));\n      }\n\n      return \"-\";\n    }\n  }, {\n    Header: \"Document Type\",\n    accessor: \"masterId.name\",\n    Cell: ({\n      cell: {\n        value\n      },\n      row: {\n        original\n      }\n    }) => /*#__PURE__*/React.createElement(React.Fragment, null, value || \"-\")\n  }, {\n    Header: \"Physician\",\n    accessor: \"physicianId.mergeLFName\",\n    Cell: ({\n      cell: {\n        value\n      },\n      row: {\n        original\n      }\n    }) => /*#__PURE__*/React.createElement(React.Fragment, null, original.physicianId && getUserNameWithDesignation(original.physicianId) || \"-\")\n  }, {\n    Header: \"Date & Time\",\n    accessor: \"createdAt\",\n    Cell: ({\n      cell: {\n        value\n      }\n    }) => /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }\n    }, displayDateTime(value))\n  }, {\n    Header: \"Staus\",\n    accessor: \"status\",\n    Cell: ({\n      row: {\n        original\n      }\n    }) => {\n      const status = original.status;\n\n      if (original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 20\n          }\n        }, _.invert(PRESCRIPTION_STATUS)[status]);\n      }\n\n      if (original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 20\n          }\n        }, \"-\");\n      }\n\n      if (original.DATA_TYPE === DATA_TYPE.PMR) {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 20\n          }\n        }, _.invert(PMR_STATUS)[status]);\n      }\n    }\n  }, {\n    Header: \"Action\",\n    accessor: \"action\",\n    Cell: ({\n      cell: {\n        value\n      },\n      row: {\n        original\n      }\n    }) => {\n      var _original$physicianId;\n\n      return redirectUrl = handlePendingTodo(original), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 17\n        }\n      }, original.DATA_TYPE === DATA_TYPE.PRESCRIPTION && original.rxType === RX_TYPE.PRESCRIPTION && original.type === TYPE.COE && (((_original$physicianId = original.physicianId) === null || _original$physicianId === void 0 ? void 0 : _original$physicianId._id) === authUser._id || original.addedBy === authUser._id) && (original.status === PRESCRIPTION_STATUS.SUBMITTED || original.status === PRESCRIPTION_STATUS.DRAFT) && canPerformAction({\n        moduleId: MODULE.RX_ORDER,\n        actiontoCheck: ACTIONS.EDIT.CODE\n      }) ? /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => handleEditPresc(true, original),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Edit, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 25\n        }\n      }, \"Edit\")) : null), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 17\n        }\n      }, original.DATA_TYPE === DATA_TYPE.PRESCRIPTION || original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT ? /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          handleViewImages(true, original);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }\n      }, \"View\")) : null), /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          createNotesModal(original);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Notes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 19\n        }\n      }, \"Notes\"), original.notesCount ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"notes tot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 21\n        }\n      }, original.notesCount) : null), /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          createReminderModal(original);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Reminder, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 19\n        }\n      }, \"Reminder\"), original.reminderCount ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"notes tot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 21\n        }\n      }, original.reminderCount) : null), /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        href: redirectUrl,\n        style: {\n          textDecoration: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ac_count\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Todo, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }\n      }), (original === null || original === void 0 ? void 0 : original.pendingTodoCount) ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"todo tot read\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 23\n        }\n      }, original.pendingTodoCount) : null), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 19\n        }\n      }, \"To Do\"))));\n    },\n    disableGlobalFilter: true,\n    hasRefresh: true\n  }], []);\n\n  const onShowSizeChange = size => {\n    if (size) {\n      setFilter(prevFilter => ({ ...prevFilter,\n        limit: size,\n        page: 1\n      }));\n    }\n  };\n\n  const fetch = () => {\n    setLoading(true);\n    let {\n      method,\n      url,\n      baseURL\n    } = digitalBinderPaginate;\n    axios({\n      method,\n      url,\n      baseURL,\n      data: { ...filter,\n        ...{\n          query: { ...filter.query,\n            find: {\n              residentId: currentResidentId\n            }\n          }\n        }\n      }\n    }).then(response => {\n      if (response && response.data.code == \"OK\") {\n        let dataArray = [];\n\n        _.map(response.data.data, data => {\n          if (data[\"RESIDENT_DOCUMENT\"] && data[\"RESIDENT_DOCUMENT\"].data) {\n            dataArray = _.concat(dataArray, _.map(data[\"RESIDENT_DOCUMENT\"].data, d => {\n              d.DATA_TYPE = DATA_TYPE.RESIDENT_DOCUMENT;\n              d.attachments = d.documents;\n              return d;\n            }));\n          }\n\n          if (data[\"PRESCRIPTION\"] && data[\"PRESCRIPTION\"].data) {\n            dataArray = _.concat(dataArray, _.map(data[\"PRESCRIPTION\"].data, d => {\n              d.DATA_TYPE = DATA_TYPE.PRESCRIPTION;\n              return d;\n            }));\n          }\n\n          if (data[\"PMR\"] && data[\"PMR\"].data) {\n            dataArray = _.concat(dataArray, _.map(data[\"PMR\"].data, d => {\n              d.DATA_TYPE = DATA_TYPE.PMR;\n              return d;\n            }));\n          }\n        });\n\n        allData.current = [...dataArray];\n        handleFilter(\"\");\n      }\n    }).catch(error => {\n      setLoading(false);\n    });\n  };\n\n  const handleDateChange = val => {\n    let newFilter = { ...filter\n    };\n    const preFilteredData = [...allData.current];\n    const filteredData = preFilteredData.filter(row => {\n      let status = row.status,\n          matchedStatus = \"\";\n\n      if (row.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n        matchedStatus = _.invert(PRESCRIPTION_STATUS)[status];\n      }\n\n      if (row.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n        matchedStatus = \"-\";\n      }\n\n      if (row.DATA_TYPE === DATA_TYPE.PMR) {\n        matchedStatus = _.invert(PMR_STATUS)[status];\n      }\n\n      const isDateMatch = displayDateTime(row.createdAt).includes(lower(val[0]));\n      return isDateMatch;\n    }); // newFilter = {\n    //   ...newFilter,\n    //   page: 1,\n    //   gte: [{ createdAt: val[0] }],\n    //   lte: [{ createdAt: val[1] }],\n    // };\n    // setFilter(newFilter);\n\n    setData(filteredData);\n  };\n\n  const handleFilter = (searchVal = \"\") => {\n    const preFilteredData = [...allData.current];\n\n    if (searchVal.trim() === \"\") {\n      setData(preFilteredData);\n      setTotal(preFilteredData.length);\n    } else {\n      searchVal = searchVal.trim();\n      const filteredData = preFilteredData.filter(row => {\n        var _row$physicianId;\n\n        let status = row.status,\n            matchedStatus = \"\";\n\n        if (row.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n          matchedStatus = _.invert(PRESCRIPTION_STATUS)[status];\n        }\n\n        if (row.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n          matchedStatus = \"-\";\n        }\n\n        if (row.DATA_TYPE === DATA_TYPE.PMR) {\n          matchedStatus = _.invert(PMR_STATUS)[status];\n        }\n\n        const isResidentDocMatch = lower(row.residentDocId).includes(lower(searchVal));\n        const isOrderNumberMatch = lower(row.orderNumber).includes(lower(searchVal));\n        const isPmrMatch = lower(row.pmrId).includes(lower(searchVal));\n        const isPhysicianMatch = lower((_row$physicianId = row.physicianId) === null || _row$physicianId === void 0 ? void 0 : _row$physicianId._id).includes(lower(searchVal)); // const isDateMatch = displayDateTime(row.createdAt).includes(\n        //   lower(searchVal[0])\n        // );\n\n        const isStatus = lower(matchedStatus).includes(searchVal); // const isDateMatch = displayDateTime(row.createdAt).includes(\n        //   lower(searchVal)\n        // );\n\n        return isResidentDocMatch || isOrderNumberMatch || isPmrMatch || isPhysicianMatch // || isPhysicianMatch || isDateMatch || isStatus\n        ;\n      });\n      setData(filteredData);\n    }\n\n    setLoading(false);\n  };\n\n  const handleViewNoteModalVisible = record => {\n    setSpecificDigitalBinder(record);\n    setViewNotesVisible(true);\n  };\n\n  const handleViewNoteModalDisable = () => {\n    setViewNotesVisible(false);\n  };\n\n  const createNotesModal = record => {\n    var _currentModalData$cur, _currentModalData$cur2, _currentModalData$cur3;\n\n    let filterData = {\n      residentDocumentId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.RESIDENT_DOCUMENT ? record._id : undefined,\n      prescriptionOrderId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.PRESCRIPTION ? record._id : undefined,\n      pmrId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.PMR ? record._id : undefined\n    };\n    let options = {\n      query: {\n        find: { ...filterData,\n          subCategory: SUB_CATEGORY.NOTES.GENERAL\n        },\n        populate: [{\n          addedBy: []\n        }] // category: TODO_CATEGORY.PRESCRIPTION,\n\n      }\n    };\n    currentModalData.current = { ...record\n    };\n    setNotesFilterOptions(options);\n    setNotesModal(true);\n\n    if (((_currentModalData$cur = currentModalData.current) === null || _currentModalData$cur === void 0 ? void 0 : _currentModalData$cur.DATA_TYPE) == DATA_TYPE.RESIDENT_DOCUMENT) {\n      setResidentDocId({\n        residentDocumentId: currentModalData.current._id,\n        category: TODO_CATEGORY.PRESCRIPTION,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL\n      });\n    } else if (((_currentModalData$cur2 = currentModalData.current) === null || _currentModalData$cur2 === void 0 ? void 0 : _currentModalData$cur2.DATA_TYPE) == DATA_TYPE.PRESCRIPTION) {\n      setResidentDocId({\n        prescriptionOrderId: currentModalData.current._id,\n        category: TODO_CATEGORY.PRESCRIPTION,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL\n      });\n    } else if (((_currentModalData$cur3 = currentModalData.current) === null || _currentModalData$cur3 === void 0 ? void 0 : _currentModalData$cur3.DATA_TYPE) == DATA_TYPE.PMR) {\n      setResidentDocId({\n        pmrId: currentModalData.current._id,\n        category: TODO_CATEGORY.PRESCRIPTION,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL\n      });\n    } // setResidentDocId({ category: TODO_CATEGORY.PRESCRIPTION });\n\n  };\n\n  const visibleNotesModal = (visible, record, str, noteCount) => {\n    setNotesModal(visible);\n    setNotesFilterOptions({});\n\n    if (noteCount != undefined) {\n      setData(oldData => {\n        return oldData.map(d => {\n          if (d._id === currentModalData.current._id) {\n            d['notesCount'] = noteCount;\n            return d;\n          }\n\n          return d;\n        });\n      });\n    }\n\n    if (!visible && str !== \"cancel\") {\n      fetch();\n    }\n  };\n\n  const visibleReminderModal = (visible, record, str, reminderCount) => {\n    setReminderModal(visible);\n    setReminderFilterOptions({});\n\n    if (reminderCount != undefined) {\n      setData(oldData => {\n        return oldData.map(d => {\n          if (d._id === currentModalData.current._id) {\n            d['reminderCount'] = reminderCount;\n            return d;\n          }\n\n          return d;\n        });\n      });\n    }\n\n    if (!visible && str !== \"cancel\") fetch();\n  };\n\n  const createReminderModal = record => {\n    var _currentModalData$cur4, _currentModalData$cur5, _currentModalData$cur6;\n\n    let filterData = {\n      residentDocumentId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.RESIDENT_DOCUMENT ? record._id : undefined,\n      prescriptionOrderId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.PRESCRIPTION ? record._id : undefined,\n      pmrId: (record === null || record === void 0 ? void 0 : record.DATA_TYPE) == DATA_TYPE.PMR ? record._id : undefined // category:\n      //   record?.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT\n      //     ? DATA_TYPE.RESIDENT_DOCUMENT\n      //     : DATA_TYPE.PRESCRIPTION,\n\n    };\n    let options = {\n      query: {\n        find: { ...filterData,\n          subCategory: SUB_CATEGORY.NOTES.GENERAL\n        },\n        populate: [{\n          addedBy: [\"mergeLFName\", \"type\", {\n            \"assignedCustomer\": [\"isActive\", \"homeId\", {\n              \"designationId\": [\"name\", \"code\", \"parentId\"]\n            }]\n          }]\n        }] // category: TODO_CATEGORY.PRESCRIPTION,\n\n      }\n    };\n    currentModalData.current = { ...record\n    };\n    setReminderFilterOptions(options);\n    setReminderModal(true);\n\n    if (((_currentModalData$cur4 = currentModalData.current) === null || _currentModalData$cur4 === void 0 ? void 0 : _currentModalData$cur4.DATA_TYPE) == DATA_TYPE.RESIDENT_DOCUMENT) {\n      setResidentDocId({\n        residentDocumentId: currentModalData.current._id,\n        category: TODO_CATEGORY.RESIDENT_DOCUMENT,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL\n      });\n    } else if (((_currentModalData$cur5 = currentModalData.current) === null || _currentModalData$cur5 === void 0 ? void 0 : _currentModalData$cur5.DATA_TYPE) == DATA_TYPE.PRESCRIPTION) {\n      setResidentDocId({\n        prescriptionOrderId: currentModalData.current._id,\n        category: TODO_CATEGORY.PRESCRIPTION,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL\n      });\n    } else if (((_currentModalData$cur6 = currentModalData.current) === null || _currentModalData$cur6 === void 0 ? void 0 : _currentModalData$cur6.DATA_TYPE) == DATA_TYPE.PMR) {\n      setResidentDocId({\n        pmrId: currentModalData.current._id,\n        category: TODO_CATEGORY.PMR,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL\n      });\n    }\n  };\n\n  const handleEditPresc = (visible, record, response) => {\n    if (response) {\n      let req = { ...detail,\n        uniqueId: response.uniqueId\n      };\n      onEditRx(req);\n    }\n\n    setVisibleEdit(visible);\n    setDetail(record);\n  };\n\n  const handlePendingTodo = record => {\n    var _record$pendingTodo;\n\n    const todoCategoryData = () => {\n      if ((record === null || record === void 0 ? void 0 : record.DATA_TYPE) === DATA_TYPE.PRESCRIPTION) {\n        return TODO_CATEGORY.PRESCRIPTION;\n      } else if ((record === null || record === void 0 ? void 0 : record.DATA_TYPE) === TODO_CATEGORY.RESIDENT_DOCUMENT) {\n        return TODO_CATEGORY.RESIDENT_DOCUMENT;\n      } else {\n        return TODO_CATEGORY.MED_REVIEW;\n      }\n    };\n\n    const orderNumberData = () => {\n      if ((record === null || record === void 0 ? void 0 : record.DATA_TYPE) === DATA_TYPE.PRESCRIPTION) {\n        return record === null || record === void 0 ? void 0 : record.orderNumber;\n      } else if ((record === null || record === void 0 ? void 0 : record.DATA_TYPE) === TODO_CATEGORY.RESIDENT_DOCUMENT) {\n        return record === null || record === void 0 ? void 0 : record.residentDocId;\n      } else {\n        return record === null || record === void 0 ? void 0 : record.pmrId;\n      }\n    };\n\n    if (!record.pendingTodoCount) return;\n    let url = getTodoRedirectUrl({\n      todoCategory: todoCategoryData(),\n      subCategory: (_record$pendingTodo = record.pendingTodo) === null || _record$pendingTodo === void 0 ? void 0 : _record$pendingTodo[record.pendingTodo.length - 1].subCategory,\n      viewType: DEVICE_VIEW.PENDING,\n      orderNumber: orderNumberData() // todoCategory: record?.DATA_TYPE === DATA_TYPE.PRESCRIPTION ? TODO_CATEGORY.PRESCRIPTION : TODO_CATEGORY.RESIDENT_DOCUMENT,\n      // orderNumber: record?.DATA_TYPE === DATA_TYPE.PRESCRIPTION ? record?.orderNumber : record?.residentDocId\n\n    });\n    return url;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resi_treat_content_wrap virtual_visit pmr_tab xray_tab digital_tab\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    form: form,\n    onSearching: handleFilter,\n    onDateChange: handleDateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    data: data,\n    isLoading: loading,\n    onTableRefresh: fetch,\n    ref: tableRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 7\n    }\n  }), notesModal && /*#__PURE__*/React.createElement(NotesModal, {\n    visible: notesModal,\n    filterOptions: notesFilterOptions,\n    onCancel: data => visibleNotesModal(false, null, \"cancel\", data),\n    onOk: () => visibleNotesModal(false),\n    isUpsertList: true,\n    modalTitle: `View Note - ${currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT ? currentModalData.current.residentDocId : currentModalData.current.orderNumber}`,\n    xRayNumber: currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT ? currentModalData.current.residentDocId : currentModalData.current.orderNumber,\n    addData: {\n      residentId: currentModalData.current.residentId,\n      ...residentDocId\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 9\n    }\n  }), reminderModal && /*#__PURE__*/React.createElement(ReminderModal, {\n    visible: reminderModal,\n    filterOptions: reminderFilterOptions,\n    onCancel: data => visibleReminderModal(false, null, \"cancel\", data),\n    onOk: () => visibleReminderModal(false),\n    isUpsertList: true,\n    modalTitle: `View Reminder - ${currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT ? currentModalData.current.residentDocId : currentModalData.current.orderNumber}`,\n    xRayNumber: currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT ? currentModalData.current.residentDocId : currentModalData.current.orderNumber,\n    addData: {\n      residentId: currentModalData.current.residentId,\n      ...residentDocId\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 9\n    }\n  }), visibleImage && imageViewer.length > 0 ? /*#__PURE__*/React.createElement(LightBox, {\n    visible: visibleImage,\n    images: imageViewer && imageViewer.length > 0 ? imageViewer : null // images={imageViewer}\n    ,\n    onCloseRequest: () => handleViewImages(false, null),\n    curImg: 0,\n    imageTitle: {\n      caption: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 9\n    }\n  }) : null, visibleEdit ? /*#__PURE__*/React.createElement(AuthenticateModal, {\n    visible: visibleEdit // loading={loader}\n    ,\n    title: `Authetication For Update - ${detail.orderNumber}`,\n    maskClosable: false,\n    request: {\n      prescriptionId: detail._id,\n      action: MODIFY_ACTION.EDIT\n    },\n    onOk: data => handleEditPresc(false, null, data),\n    onCancel: () => handleEditPresc(false, null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 767,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\nexport default createForm()(DigitalBinder);","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/ResidentDetail/View/DigitalBinder/index.js"],"names":["React","useState","useEffect","Header","axios","getRxImage","digitalBinderPaginate","View","Notes","Reminder","Edit","Todo","MODULE","ACTIONS","createForm","useSelector","Table","displayDateTime","canPerformAction","getUserNameWithDesignation","PMR_STATUS","STATUS","PRESCRIPTION_STATUS","MODIFY_ACTION","TYPE","RX_TYPE","NotesModal","ReminderModal","LightBox","TODO_CATEGORY","SUB_CATEGORY","DEVICE_VIEW","moment","isDate","AuthenticateModal","getTodoRedirectUrl","_","require","DATA_TYPE","RESIDENT_DOCUMENT","PRESCRIPTION","PMR","lower","val","toLowerCase","DigitalBinder","form","onEditRx","isTabActive","authUser","currentResidentId","state","auth","resident","data","setData","total","setTotal","loading","setLoading","viewNotesVisible","setViewNotesVisible","getSpecificDigitalBinder","setSpecificDigitalBinder","notesModal","setNotesModal","reminderModal","setReminderModal","reminderFilterOptions","setReminderFilterOptions","notesFilterOptions","setNotesFilterOptions","residentDocId","setResidentDocId","visibleImage","setVisibleImage","detail","setDetail","visibleEdit","setVisibleEdit","currentModalData","useRef","tableRef","allData","redirectUrl","filter","setFilter","query","populate","masterId","physicianId","acknowledgedBy","fields","thirdPartyPrescriptionType","fetch","handleViewImages","visible","record","_id","then","resp","attachments","map","x","i","caption","orderNumber","catch","err","prepareAttachments","imageViewer","documents","length","a","src","path","columns","useMemo","Cell","row","index","accessor","cell","value","original","color","textTransform","status","invert","handlePendingTodo","rxType","type","COE","addedBy","SUBMITTED","DRAFT","moduleId","RX_ORDER","actiontoCheck","EDIT","CODE","handleEditPresc","createNotesModal","notesCount","createReminderModal","reminderCount","textDecoration","pendingTodoCount","disableGlobalFilter","hasRefresh","onShowSizeChange","size","prevFilter","limit","page","method","url","baseURL","find","residentId","response","code","dataArray","concat","d","current","handleFilter","error","handleDateChange","newFilter","preFilteredData","filteredData","matchedStatus","isDateMatch","createdAt","includes","searchVal","trim","isResidentDocMatch","isOrderNumberMatch","isPmrMatch","pmrId","isPhysicianMatch","isStatus","handleViewNoteModalVisible","handleViewNoteModalDisable","filterData","residentDocumentId","undefined","prescriptionOrderId","options","subCategory","NOTES","GENERAL","category","visibleNotesModal","str","noteCount","oldData","visibleReminderModal","req","uniqueId","todoCategoryData","MED_REVIEW","orderNumberData","todoCategory","pendingTodo","viewType","PENDING","prescriptionId","action"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\n// import Table from '../../../../components/common/Table/index';\nimport axios from \"../../../../services/api/config\";\nimport { getRxImage } from \"../../../../services/api/services/common\";\n\nimport { digitalBinderPaginate } from '../../../../services/api/routes/digitalBinder';\n\nimport { View, Notes, Reminder } from '../../../../assets/images/pmr/index';\nimport { Edit, Todo } from '../../../../assets/images/resident-detail/index';\n// import ViewNotesModal from './components/ViewNotesModal';\nimport { MODULE, ACTIONS } from '../../../../constants/subscription';\nimport { createForm } from 'rc-form';\nimport { useSelector } from 'react-redux';\nimport Table from './Table';\nimport { displayDateTime } from '../../../../util/moment';\nimport { canPerformAction, getUserNameWithDesignation } from '../../../../util/common';\nimport { PMR_STATUS } from '../../../../constants/pmr';\nimport { STATUS as PRESCRIPTION_STATUS, MODIFY_ACTION, TYPE, RX_TYPE } from '../../../../constants/prescription';\nimport NotesModal from '../../../../components/NotesPopup/List';\nimport ReminderModal from '../../../../components/ReminderPopup/List';\nimport { LightBox } from '../../../../components/common';\nimport { TODO_CATEGORY, SUB_CATEGORY, DEVICE_VIEW } from '../../../../constants/todo';\nimport moment, { isDate } from 'moment';\nimport AuthenticateModal from '../../../../components/AuthenticateModal';\nimport { getTodoRedirectUrl } from '../../../../util/todo'\n\nconst _ = require('lodash');\n\nconst DATA_TYPE = {\n  RESIDENT_DOCUMENT: 1,\n  PRESCRIPTION: 2,\n  PMR: 3,\n};\n\nconst lower = (val = \"\") =>\n  (typeof val === \"string\" && val.toLowerCase()) || val;\n\nconst DigitalBinder = ({ form, onEditRx, isTabActive }) => {\n  const { authUser, currentResidentId } = useSelector((state) => ({\n    authUser: state.auth.authUser,\n    currentResidentId: state.resident.currentResidentId,\n  }));\n\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [viewNotesVisible, setViewNotesVisible] = useState(false);\n  const [getSpecificDigitalBinder, setSpecificDigitalBinder] = useState(\"\");\n  const [notesModal, setNotesModal] = useState(false);\n  const [reminderModal, setReminderModal] = useState(false);\n  const [reminderFilterOptions, setReminderFilterOptions] = useState({});\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [residentDocId, setResidentDocId] = useState(\"\");\n  const [visibleImage, setVisibleImage] = useState(false);\n  const [detail, setDetail] = useState(null);\n  const [visibleEdit, setVisibleEdit] = useState(false);\n  const currentModalData = React.useRef();\n  const tableRef = React.useRef();\n  const allData = React.useRef([]);\n  let redirectUrl = '';\n\n  const [filter, setFilter] = useState({\n    query: {},\n    RESIDENT_DOCUMENT: {\n      populate: [\n        {\n          masterId: ['name'],\n        },\n        {\n          physicianId: [\"mergeLFName\",\n            \"type\",\n            {\n              \"assignedCustomer\": [\n                \"isActive\",\n                \"homeId\",\n                {\n                  \"designationId\": [\n                    \"name\",\n                    \"code\",\n                    \"parentId\"\n                  ]\n                }\n              ]\n            }],\n        },\n      ],\n    },\n    PMR: {\n      populate: [\n        {\n          masterId: ['name'],\n        },\n        {\n          acknowledgedBy: [],\n        },\n        {\n          physicianId: [\"mergeLFName\",\n            \"type\",\n            {\n              \"assignedCustomer\": [\n                \"isActive\",\n                \"homeId\",\n                {\n                  \"designationId\": [\n                    \"name\",\n                    \"code\",\n                    \"parentId\"\n                  ]\n                }\n              ]\n            }],\n\n        },\n      ],\n    },\n    PRESCRIPTION: {\n      fields: [],\n      populate: [\n        {\n          masterId: ['name'],\n        },\n        {\n          thirdPartyPrescriptionType: [],\n\n        },\n        {\n          physicianId: [\"mergeLFName\",\n            \"type\",\n            {\n              \"assignedCustomer\": [\n                \"isActive\",\n                \"homeId\",\n                {\n                  \"designationId\": [\n                    \"name\",\n                    \"code\",\n                    \"parentId\"\n                  ]\n                }\n              ]\n            }],\n        },\n        { \"prescriptionMedication\": null, \"match\": { \"isDelete\": false } }\n      ],\n    },\n  });\n\n  useEffect(() => {\n    if (!isTabActive)\n      return\n    fetch();\n  }, [filter, isTabActive]);\n\n  const handleViewImages = (visible, record) => {\n    if (visible && record.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n      getRxImage([record._id])\n        .then((resp) => {\n          if (resp?.[0])\n            record.attachments = resp[0].attachments;\n          record && record.attachments.map((x, i) => {\n            x.caption = `${record.orderNumber}-${i + 1}`\n            return x\n          })\n\n          setDetail(record);\n          setVisibleImage(visible);\n          // setImgLoader(false)\n        })\n        .catch((err) => {\n          // setImgLoader(true)\n        });\n    } else {\n      setVisibleImage(visible);\n      setDetail(record);\n    }\n  };\n\n  const prepareAttachments = () => {\n    let imageViewer = [];\n    if (detail && detail.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT) {\n      if (detail?.documents?.length > 0) {\n        imageViewer = _.map(detail.documents, function (a) {\n          a.src = a.path;\n          return a;\n        });\n      }\n    } else if (detail && detail.DATA_TYPE == DATA_TYPE.PRESCRIPTION) {\n      if (detail?.attachments?.length > 0) {\n        imageViewer = _.map(detail.attachments, function (a) {\n          a.src = a.path;\n          return a;\n        });\n      }\n    } else if (detail && detail.DATA_TYPE == DATA_TYPE.PMR) {\n      if (detail?.attachments?.length > 0) {\n        imageViewer = _.map(detail.attachments, function (a) {\n          a.src = a.path;\n          return a;\n        });\n      }\n    }\n    return { imageViewer };\n  };\n  const { imageViewer } = prepareAttachments();\n\n\n\n\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Sr. No.\",\n        Cell: ({ row }) => row.index + 1,\n      },\n      {\n        Header: \"Type\",\n        accessor: \"orderNumber\",\n        Cell: ({ cell: { value }, row: { original } }) => {\n          if (original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n            return (\n              <>\n                <p>Rx Order</p>\n                <p style={{ color: \"#609fae\" }}>{value}</p>\n              </>\n            );\n          }\n          if (original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n            return (\n              <>\n                <p>Resident Document</p>\n                <p style={{ color: \"#609fae\" }}>{original.residentDocId}</p>\n              </>\n            );\n          }\n          return \"-\";\n        },\n      },\n      {\n        Header: \"Document Type\",\n        accessor: \"masterId.name\",\n        Cell: ({ cell: { value }, row: { original } }) => <>{value || \"-\"}</>,\n      },\n      {\n        Header: \"Physician\",\n        accessor: \"physicianId.mergeLFName\",\n        Cell: ({ cell: { value }, row: { original } }) => <>\n          {original.physicianId && getUserNameWithDesignation(original.physicianId) || \"-\"}\n        </>\n      },\n      {\n        Header: \"Date & Time\",\n        accessor: \"createdAt\",\n        Cell: ({ cell: { value } }) => (\n          <span style={{ textTransform: \"capitalize\" }}>\n            {displayDateTime(value)}\n          </span>\n        ),\n      },\n      {\n        Header: \"Staus\",\n        accessor: \"status\",\n        Cell: ({ row: { original } }) => {\n          const status = original.status;\n          if (original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n            return <p>{_.invert(PRESCRIPTION_STATUS)[status]}</p>;\n          }\n          if (original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n            return <p>-</p>;\n          }\n          if (original.DATA_TYPE === DATA_TYPE.PMR) {\n            return <p>{_.invert(PMR_STATUS)[status]}</p>;\n          }\n        },\n      },\n      {\n        Header: \"Action\",\n        accessor: \"action\",\n        Cell: ({ cell: { value }, row: { original } }) =>\n          (\n            redirectUrl = handlePendingTodo(original),\n            <>\n              <div className=\"actions\">\n                <div>\n                  {(original.DATA_TYPE === DATA_TYPE.PRESCRIPTION) &&\n                    original.rxType === RX_TYPE.PRESCRIPTION &&\n                    original.type === TYPE.COE &&\n                    (original.physicianId?._id === authUser._id ||\n                      original.addedBy === authUser._id) &&\n                    (original.status === PRESCRIPTION_STATUS.SUBMITTED ||\n                      original.status === PRESCRIPTION_STATUS.DRAFT) &&\n                    canPerformAction({\n                      moduleId: MODULE.RX_ORDER,\n                      actiontoCheck: ACTIONS.EDIT.CODE,\n                    }) ? (\n                      <div onClick={() => handleEditPresc(true, original)}>\n                        <Edit />\n                        <p>Edit</p>\n                      </div>\n                    ) : null}\n                </div>\n                <div>\n                  {(original.DATA_TYPE === DATA_TYPE.PRESCRIPTION ||\n                    original.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) ? (\n                      <div\n                        onClick={() => {\n                          handleViewImages(true, original);\n                        }}\n                      >\n                        <View />\n                        <p>View</p>\n                      </div>\n                    ) : null}\n                </div>\n                <div\n                  onClick={() => {\n                    createNotesModal(original);\n                  }}\n                >\n                  <Notes />\n                  <p>Notes</p>\n                  {original.notesCount ? (\n                    <span className=\"notes tot\">{original.notesCount}</span>\n                  ) : null}\n                </div>\n                <div\n                  onClick={() => {\n                    createReminderModal(original);\n                  }}\n                >\n                  <Reminder />\n                  <p>Reminder</p>\n                  {original.reminderCount ? (\n                    <span className=\"notes tot\">{original.reminderCount}</span>\n                  ) : null}\n                </div>\n\n                <a target=\"_blank\" href={redirectUrl} style={{ textDecoration: 'none' }}>\n                  <div className='ac_count'>\n                    <Todo />\n                    {original?.pendingTodoCount ?\n                      <span className='todo tot read'>{original.pendingTodoCount}</span>\n                      : null}\n                  </div>\n                  <p>To Do</p>\n                </a>\n              </div>\n            </>\n          ),\n        disableGlobalFilter: true,\n        hasRefresh: true,\n      },\n    ],\n    []\n  );\n\n  const onShowSizeChange = (size) => {\n    if (size) {\n      setFilter((prevFilter) => ({ ...prevFilter, limit: size, page: 1 }));\n    }\n  };\n\n  const fetch = () => {\n    setLoading(true);\n    let { method, url, baseURL } = digitalBinderPaginate;\n    axios({\n      method,\n      url,\n      baseURL,\n      data: {\n        ...filter,\n        ...{\n          query: { ...filter.query, find: { residentId: currentResidentId } },\n        },\n      },\n    })\n      .then((response) => {\n        if (response && response.data.code == \"OK\") {\n          let dataArray = [];\n          _.map(response.data.data, (data) => {\n            if (data[\"RESIDENT_DOCUMENT\"] && data[\"RESIDENT_DOCUMENT\"].data) {\n              dataArray = _.concat(\n                dataArray,\n                _.map(data[\"RESIDENT_DOCUMENT\"].data, (d) => {\n                  d.DATA_TYPE = DATA_TYPE.RESIDENT_DOCUMENT;\n                  d.attachments = d.documents;\n                  return d;\n                })\n              );\n            }\n            if (data[\"PRESCRIPTION\"] && data[\"PRESCRIPTION\"].data) {\n              dataArray = _.concat(\n                dataArray,\n                _.map(data[\"PRESCRIPTION\"].data, (d) => {\n                  d.DATA_TYPE = DATA_TYPE.PRESCRIPTION;\n                  return d;\n                })\n              );\n            }\n            if (data[\"PMR\"] && data[\"PMR\"].data) {\n              dataArray = _.concat(\n                dataArray,\n                _.map(data[\"PMR\"].data, (d) => {\n                  d.DATA_TYPE = DATA_TYPE.PMR;\n                  return d;\n                })\n              );\n            }\n          });\n          allData.current = [...dataArray];\n          handleFilter(\"\");\n        }\n      })\n      .catch((error) => {\n        setLoading(false);\n      });\n  };\n\n  const handleDateChange = (val) => {\n    let newFilter = { ...filter };\n    const preFilteredData = [...allData.current];\n    const filteredData = preFilteredData.filter((row) => {\n      let status = row.status,\n        matchedStatus = \"\";\n      if (row.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n        matchedStatus = _.invert(PRESCRIPTION_STATUS)[status];\n      }\n      if (row.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n        matchedStatus = \"-\";\n      }\n      if (row.DATA_TYPE === DATA_TYPE.PMR) {\n        matchedStatus = _.invert(PMR_STATUS)[status];\n      }\n\n      const isDateMatch = displayDateTime(row.createdAt).includes(\n        lower(val[0])\n      );\n\n      return isDateMatch;\n    })\n    // newFilter = {\n    //   ...newFilter,\n    //   page: 1,\n    //   gte: [{ createdAt: val[0] }],\n    //   lte: [{ createdAt: val[1] }],\n    // };\n    // setFilter(newFilter);\n    setData(filteredData);\n  };\n\n  const handleFilter = (searchVal = \"\") => {\n    const preFilteredData = [...allData.current];\n    if (searchVal.trim() === \"\") {\n      setData(preFilteredData);\n      setTotal(preFilteredData.length);\n    } else {\n      searchVal = searchVal.trim();\n      const filteredData = preFilteredData.filter((row) => {\n        let status = row.status,\n          matchedStatus = \"\";\n        if (row.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n          matchedStatus = _.invert(PRESCRIPTION_STATUS)[status];\n        }\n        if (row.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT) {\n          matchedStatus = \"-\";\n        }\n        if (row.DATA_TYPE === DATA_TYPE.PMR) {\n          matchedStatus = _.invert(PMR_STATUS)[status];\n        }\n\n        const isResidentDocMatch = lower(row.residentDocId).includes(\n          lower(searchVal)\n        );\n        const isOrderNumberMatch = lower(row.orderNumber).includes(\n          lower(searchVal)\n        );\n        const isPmrMatch = lower(row.pmrId).includes(\n          lower(searchVal)\n        );\n\n\n        const isPhysicianMatch = lower(row.physicianId?._id).includes(\n          lower(searchVal)\n        );\n        // const isDateMatch = displayDateTime(row.createdAt).includes(\n        //   lower(searchVal[0])\n        // );\n        const isStatus = lower(matchedStatus).includes(searchVal);\n\n        // const isDateMatch = displayDateTime(row.createdAt).includes(\n        //   lower(searchVal)\n        // );\n\n        return isResidentDocMatch || isOrderNumberMatch || isPmrMatch || isPhysicianMatch\n          // || isPhysicianMatch || isDateMatch || isStatus\n          ;\n      });\n      setData(filteredData);\n\n    }\n    setLoading(false);\n  };\n\n  const handleViewNoteModalVisible = (record) => {\n    setSpecificDigitalBinder(record);\n    setViewNotesVisible(true);\n  };\n\n  const handleViewNoteModalDisable = () => {\n    setViewNotesVisible(false);\n  };\n\n  const createNotesModal = (record) => {\n    let filterData = {\n      residentDocumentId:\n        record?.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT\n          ? record._id\n          : undefined,\n      prescriptionOrderId:\n        record?.DATA_TYPE == DATA_TYPE.PRESCRIPTION ? record._id : undefined,\n      pmrId: record?.DATA_TYPE == DATA_TYPE.PMR ? record._id : undefined,\n    };\n    let options = {\n      query: {\n        find: { ...filterData, subCategory: SUB_CATEGORY.NOTES.GENERAL },\n        populate: [{ addedBy: [] }],\n        // category: TODO_CATEGORY.PRESCRIPTION,\n      },\n    };\n    currentModalData.current = { ...record };\n    setNotesFilterOptions(options);\n    setNotesModal(true);\n\n    if (currentModalData.current?.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT) {\n      setResidentDocId({\n        residentDocumentId: currentModalData.current._id,\n        category: TODO_CATEGORY.PRESCRIPTION,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL,\n      });\n    } else if (currentModalData.current?.DATA_TYPE == DATA_TYPE.PRESCRIPTION) {\n      setResidentDocId({\n        prescriptionOrderId: currentModalData.current._id,\n        category: TODO_CATEGORY.PRESCRIPTION,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL,\n      });\n    } else if (currentModalData.current?.DATA_TYPE == DATA_TYPE.PMR) {\n      setResidentDocId({\n        pmrId: currentModalData.current._id,\n        category: TODO_CATEGORY.PRESCRIPTION,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL,\n      });\n    }\n    // setResidentDocId({ category: TODO_CATEGORY.PRESCRIPTION });\n  };\n\n  const visibleNotesModal = (visible, record, str, noteCount) => {\n    setNotesModal(visible);\n    setNotesFilterOptions({});\n    if (noteCount != undefined) {\n      setData(oldData => {\n        return oldData.map(d => {\n          if (d._id === currentModalData.current._id) {\n            d['notesCount'] = noteCount;\n            return d;\n          }\n          return d;\n        })\n      })\n    }\n    if (!visible && str !== \"cancel\") {\n      fetch();\n    }\n  };\n\n  const visibleReminderModal = (visible, record, str, reminderCount) => {\n    setReminderModal(visible);\n    setReminderFilterOptions({});\n    if (reminderCount != undefined) {\n      setData(oldData => {\n        return oldData.map(d => {\n          if (d._id === currentModalData.current._id) {\n            d['reminderCount'] = reminderCount;\n            return d;\n          }\n          return d;\n        })\n      })\n    }\n    if (!visible && str !== \"cancel\") fetch();\n  };\n\n  const createReminderModal = (record) => {\n    let filterData = {\n      residentDocumentId:\n        record?.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT\n          ? record._id\n          : undefined,\n      prescriptionOrderId:\n        record?.DATA_TYPE == DATA_TYPE.PRESCRIPTION ? record._id : undefined,\n      pmrId: record?.DATA_TYPE == DATA_TYPE.PMR ? record._id : undefined,\n\n      // category:\n      //   record?.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT\n      //     ? DATA_TYPE.RESIDENT_DOCUMENT\n      //     : DATA_TYPE.PRESCRIPTION,\n    };\n    let options = {\n      query: {\n        find: { ...filterData, subCategory: SUB_CATEGORY.NOTES.GENERAL },\n        populate: [{\n          addedBy: [\"mergeLFName\",\n            \"type\",\n            {\n              \"assignedCustomer\": [\n                \"isActive\",\n                \"homeId\",\n                {\n                  \"designationId\": [\n                    \"name\",\n                    \"code\",\n                    \"parentId\"\n                  ]\n                }\n              ]\n            }]\n        }],\n        // category: TODO_CATEGORY.PRESCRIPTION,\n      },\n    };\n\n    currentModalData.current = { ...record };\n    setReminderFilterOptions(options);\n    setReminderModal(true);\n\n    if (currentModalData.current?.DATA_TYPE == DATA_TYPE.RESIDENT_DOCUMENT) {\n      setResidentDocId({\n        residentDocumentId: currentModalData.current._id,\n        category: TODO_CATEGORY.RESIDENT_DOCUMENT,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL,\n      });\n    } else if (currentModalData.current?.DATA_TYPE == DATA_TYPE.PRESCRIPTION) {\n      setResidentDocId({\n        prescriptionOrderId: currentModalData.current._id,\n        category: TODO_CATEGORY.PRESCRIPTION,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL,\n      });\n    } else if (currentModalData.current?.DATA_TYPE == DATA_TYPE.PMR) {\n      setResidentDocId({\n        pmrId: currentModalData.current._id,\n        category: TODO_CATEGORY.PMR,\n        subCategory: SUB_CATEGORY.NOTES.GENERAL,\n      });\n    }\n  };\n\n  const handleEditPresc = (visible, record, response) => {\n    if (response) {\n      let req = { ...detail, uniqueId: response.uniqueId };\n      onEditRx(req);\n    }\n    setVisibleEdit(visible);\n    setDetail(record);\n  };\n\n  const handlePendingTodo = record => {\n    const todoCategoryData = () => {\n      if (record?.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n        return TODO_CATEGORY.PRESCRIPTION\n      } else if (record?.DATA_TYPE === TODO_CATEGORY.RESIDENT_DOCUMENT) {\n        return TODO_CATEGORY.RESIDENT_DOCUMENT\n      } else {\n        return TODO_CATEGORY.MED_REVIEW\n      }\n    }\n\n    const orderNumberData = () => {\n      if (record?.DATA_TYPE === DATA_TYPE.PRESCRIPTION) {\n        return record?.orderNumber\n      } else if (record?.DATA_TYPE === TODO_CATEGORY.RESIDENT_DOCUMENT) {\n        return record?.residentDocId\n      } else {\n        return record?.pmrId\n      }\n    }\n\n    if (!record.pendingTodoCount)\n      return\n    let url = getTodoRedirectUrl({\n      todoCategory: todoCategoryData(),\n      subCategory: record.pendingTodo?.[record.pendingTodo.length - 1].subCategory,\n      viewType: DEVICE_VIEW.PENDING,\n      orderNumber: orderNumberData()\n      // todoCategory: record?.DATA_TYPE === DATA_TYPE.PRESCRIPTION ? TODO_CATEGORY.PRESCRIPTION : TODO_CATEGORY.RESIDENT_DOCUMENT,\n      // orderNumber: record?.DATA_TYPE === DATA_TYPE.PRESCRIPTION ? record?.orderNumber : record?.residentDocId\n    })\n    return url\n  }\n\n  return (\n    <div className=\"resi_treat_content_wrap virtual_visit pmr_tab xray_tab digital_tab\">\n      <Header form={form} onSearching={handleFilter} onDateChange={handleDateChange} />\n      <Table\n        columns={columns}\n        data={data}\n        isLoading={loading}\n        onTableRefresh={fetch}\n        ref={tableRef}\n      />\n      {notesModal && (\n        <NotesModal\n          visible={notesModal}\n          filterOptions={notesFilterOptions}\n          onCancel={(data) => visibleNotesModal(false, null, \"cancel\", data)}\n          onOk={() => visibleNotesModal(false)}\n          isUpsertList={true}\n          modalTitle={`View Note - ${currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT\n            ? currentModalData.current.residentDocId\n            : currentModalData.current.orderNumber\n            }`}\n          xRayNumber={\n            currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT\n              ? currentModalData.current.residentDocId\n              : currentModalData.current.orderNumber\n          }\n          addData={{\n            residentId: currentModalData.current.residentId,\n            ...residentDocId,\n          }}\n        />\n      )}\n      {reminderModal && (\n        <ReminderModal\n          visible={reminderModal}\n          filterOptions={reminderFilterOptions}\n          onCancel={(data) => visibleReminderModal(false, null, \"cancel\", data)}\n          onOk={() => visibleReminderModal(false)}\n          isUpsertList={true}\n          modalTitle={`View Reminder - ${currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT\n            ? currentModalData.current.residentDocId\n            : currentModalData.current.orderNumber\n            }`}\n          xRayNumber={\n            currentModalData.current.DATA_TYPE === DATA_TYPE.RESIDENT_DOCUMENT\n              ? currentModalData.current.residentDocId\n              : currentModalData.current.orderNumber\n          }\n          addData={{\n            residentId: currentModalData.current.residentId,\n            ...residentDocId,\n          }}\n        />\n      )}\n\n      {visibleImage && imageViewer.length > 0 ? (\n        <LightBox\n          visible={visibleImage}\n          images={imageViewer && imageViewer.length > 0 ? imageViewer : null}\n          // images={imageViewer}\n          onCloseRequest={() => handleViewImages(false, null)}\n          curImg={0}\n          imageTitle={{ caption: true }}\n        />\n      ) : null}\n\n      {visibleEdit ? (\n        <AuthenticateModal\n          visible={visibleEdit}\n          // loading={loader}\n          title={`Authetication For Update - ${detail.orderNumber}`}\n          maskClosable={false}\n          request={{\n            prescriptionId: detail._id,\n            action: MODIFY_ACTION.EDIT,\n          }}\n          onOk={(data) => handleEditPresc(false, null, data)}\n          onCancel={() => handleEditPresc(false, null)}\n        />\n      ) : null}\n\n    </div>\n  );\n};\n\nexport default createForm()(DigitalBinder);\n"]},"metadata":{},"sourceType":"module"}