{"ast":null,"code":"import { CLOSE_NEW_RESIDENT, OPEN_NEW_RESIDENT, SIGNOUT_USER_SUCCESS, RESET_RESIDENT, SET_CURRENT_RESIDENT, UPDATE_OPEN_RESIDENT } from \"../ActionTypes\";\nimport { produce, original } from 'immer';\nimport keys from 'lodash/keys';\nimport last from 'lodash/last';\nimport first from 'lodash/first';\nconst initialState = {\n  openedResidents: {},\n  currentResidentId: ''\n};\nconst residents = produce((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SIGNOUT_USER_SUCCESS:\n      {\n        return { ...initialState\n        };\n      }\n\n    case OPEN_NEW_RESIDENT:\n      if (!state.openedResidents[payload._id]) {\n        if (keys(state.openedResidents).length === 5) {\n          delete state.openedResidents[first(keys(state.openedResidents))];\n          state.openedResidents[payload._id] = payload;\n        } else state.openedResidents[payload._id] = payload;\n      }\n\n      state.currentResidentId = payload._id;\n      return state;\n\n    case UPDATE_OPEN_RESIDENT:\n      state.openedResidents[state.currentResidentId][payload.tabkey] = payload.response;\n      return state;\n\n    case CLOSE_NEW_RESIDENT:\n      delete state.openedResidents[payload.id];\n      state.currentResidentId = last(keys(state.openedResidents));\n      return state;\n\n    case SET_CURRENT_RESIDENT:\n      return { ...state,\n        currentResidentId: payload\n      };\n\n    case RESET_RESIDENT:\n      return { ...initialState\n      };\n\n    default:\n      return state;\n  }\n});\nexport default residents;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/appRedux/reducers/Resident.js"],"names":["CLOSE_NEW_RESIDENT","OPEN_NEW_RESIDENT","SIGNOUT_USER_SUCCESS","RESET_RESIDENT","SET_CURRENT_RESIDENT","UPDATE_OPEN_RESIDENT","produce","original","keys","last","first","initialState","openedResidents","currentResidentId","residents","state","action","type","payload","_id","length","tabkey","response","id"],"mappings":"AAAA,SACEA,kBADF,EACsBC,iBADtB,EACyCC,oBADzC,EAEEC,cAFF,EAEkBC,oBAFlB,EAEwCC,oBAFxC,QAGO,gBAHP;AAIA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,EADE;AAEnBC,EAAAA,iBAAiB,EAAE;AAFA,CAArB;AAKA,MAAMC,SAAS,GAAGR,OAAO,CAAC,CAACS,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC1D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKf,oBAAL;AAA2B;AACzB,eAAO,EACL,GAAGS;AADE,SAAP;AAGD;;AACD,SAAKV,iBAAL;AACE,UAAI,CAACc,KAAK,CAACH,eAAN,CAAsBM,OAAO,CAACC,GAA9B,CAAL,EAAyC;AACvC,YAAIX,IAAI,CAACO,KAAK,CAACH,eAAP,CAAJ,CAA4BQ,MAA5B,KAAuC,CAA3C,EAA8C;AAC5C,iBAAOL,KAAK,CAACH,eAAN,CAAsBF,KAAK,CAACF,IAAI,CAACO,KAAK,CAACH,eAAP,CAAL,CAA3B,CAAP;AACAG,UAAAA,KAAK,CAACH,eAAN,CAAsBM,OAAO,CAACC,GAA9B,IAAqCD,OAArC;AACD,SAHD,MAIEH,KAAK,CAACH,eAAN,CAAsBM,OAAO,CAACC,GAA9B,IAAqCD,OAArC;AACH;;AACDH,MAAAA,KAAK,CAACF,iBAAN,GAA0BK,OAAO,CAACC,GAAlC;AACA,aAAOJ,KAAP;;AAEF,SAAKV,oBAAL;AACEU,MAAAA,KAAK,CAACH,eAAN,CAAsBG,KAAK,CAACF,iBAA5B,EAA+CK,OAAO,CAACG,MAAvD,IAAiEH,OAAO,CAACI,QAAzE;AACA,aAAOP,KAAP;;AAEF,SAAKf,kBAAL;AACE,aAAOe,KAAK,CAACH,eAAN,CAAsBM,OAAO,CAACK,EAA9B,CAAP;AACAR,MAAAA,KAAK,CAACF,iBAAN,GAA0BJ,IAAI,CAACD,IAAI,CAACO,KAAK,CAACH,eAAP,CAAL,CAA9B;AACA,aAAOG,KAAP;;AAEF,SAAKX,oBAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELF,QAAAA,iBAAiB,EAAEK;AAFd,OAAP;;AAKF,SAAKf,cAAL;AACE,aAAO,EACL,GAAGQ;AADE,OAAP;;AAIF;AACE,aAAOI,KAAP;AAtCJ;AAwCD,CA1CwB,CAAzB;AA4CA,eAAeD,SAAf","sourcesContent":["import {\n  CLOSE_NEW_RESIDENT, OPEN_NEW_RESIDENT, SIGNOUT_USER_SUCCESS,\n  RESET_RESIDENT, SET_CURRENT_RESIDENT, UPDATE_OPEN_RESIDENT\n} from \"../ActionTypes\";\nimport { produce, original } from 'immer'\nimport keys from 'lodash/keys'\nimport last from 'lodash/last'\nimport first from 'lodash/first'\n\nconst initialState = {\n  openedResidents: {},\n  currentResidentId: ''\n};\n\nconst residents = produce((state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SIGNOUT_USER_SUCCESS: {\n      return {\n        ...initialState\n      }\n    }\n    case OPEN_NEW_RESIDENT:\n      if (!state.openedResidents[payload._id]) {\n        if (keys(state.openedResidents).length === 5) {\n          delete state.openedResidents[first(keys(state.openedResidents))]\n          state.openedResidents[payload._id] = payload;\n        } else\n          state.openedResidents[payload._id] = payload;\n      }\n      state.currentResidentId = payload._id\n      return state\n\n    case UPDATE_OPEN_RESIDENT:\n      state.openedResidents[state.currentResidentId][payload.tabkey] = payload.response\n      return state\n\n    case CLOSE_NEW_RESIDENT:\n      delete state.openedResidents[payload.id];\n      state.currentResidentId = last(keys(state.openedResidents))\n      return state\n\n    case SET_CURRENT_RESIDENT:\n      return {\n        ...state,\n        currentResidentId: payload\n      }\n\n    case RESET_RESIDENT:\n      return {\n        ...initialState\n      }\n\n    default:\n      return state\n  }\n})\n\nexport default residents;\n"]},"metadata":{},"sourceType":"module"}