{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/components/Todo/ViewTypeFilter.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { DEVICE_VIEW } from '../../constants/prescription';\nimport Select, { Option } from '../../components/common/AutoComplete';\n\nconst ViewTypeFilter = props => {\n  const {\n    onChangeListview,\n    isPrimaryFilter,\n    viewType\n  } = props;\n  const [type, setType] = useState(DEVICE_VIEW['PENDING']);\n  useEffect(() => {\n    if (viewType) setType(viewType);\n  }, [viewType]);\n  let deviceView = { ...DEVICE_VIEW\n  };\n\n  if (isPrimaryFilter) {\n    delete deviceView['PENDING'];\n  } else {\n    delete deviceView['PRIMARY'];\n    delete deviceView['SECONDARY'];\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null,\n  /*#__PURE__*/\n  // type &&\n  React.createElement(Select, {\n    value: type,\n    onChange: onChangeListview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, Object.keys(deviceView).map(v => {\n    return /*#__PURE__*/React.createElement(Option, {\n      key: DEVICE_VIEW[v],\n      value: DEVICE_VIEW[v],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }\n    }, v.replace(/_/g, \" \"));\n  })));\n};\n\nexport default ViewTypeFilter;\nViewTypeFilter.defaultProps = {\n  isPrimaryFilter: false\n};\nViewTypeFilter.propTypes = {\n  isPrimaryFilter: PropTypes.bool,\n  onChangeListview: PropTypes.func\n};","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/components/Todo/ViewTypeFilter.js"],"names":["React","useState","useEffect","PropTypes","DEVICE_VIEW","Select","Option","ViewTypeFilter","props","onChangeListview","isPrimaryFilter","viewType","type","setType","deviceView","Object","keys","map","v","replace","defaultProps","propTypes","bool","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,MAAP,IAAiBC,MAAjB,QAA+B,sCAA/B;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA,eAApB;AAAqCC,IAAAA;AAArC,MAAkDH,KAAxD;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAACG,WAAW,CAAC,SAAD,CAAZ,CAAhC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,QAAJ,EACIE,OAAO,CAACF,QAAD,CAAP;AACP,GAHQ,EAGN,CAACA,QAAD,CAHM,CAAT;AAKA,MAAIG,UAAU,GAAG,EAAE,GAAGV;AAAL,GAAjB;;AACA,MAAIM,eAAJ,EAAqB;AACjB,WAAOI,UAAU,CAAC,SAAD,CAAjB;AACH,GAFD,MAEO;AACH,WAAOA,UAAU,CAAC,SAAD,CAAjB;AACA,WAAOA,UAAU,CAAC,WAAD,CAAjB;AACH;;AAED,sBAAO;AAAA;AAEC;AACA,sBAAC,MAAD;AACI,IAAA,KAAK,EAAEF,IADX;AAEI,IAAA,QAAQ,EAAEH,gBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKM,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,GAAxB,CAA4BC,CAAC,IAAI;AAC9B,wBACI,oBAAC,MAAD;AACI,MAAA,GAAG,EAAEd,WAAW,CAACc,CAAD,CADpB;AAEI,MAAA,KAAK,EAAEd,WAAW,CAACc,CAAD,CAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIKA,CAAC,CAACC,OAAF,CAAU,IAAV,EAAgB,GAAhB,CAJL,CADJ;AAQH,GATA,CAJL,CAHD,CAAP;AAoBH,CArCD;;AAsCA,eAAeZ,cAAf;AACAA,cAAc,CAACa,YAAf,GAA8B;AAC1BV,EAAAA,eAAe,EAAE;AADS,CAA9B;AAGAH,cAAc,CAACc,SAAf,GAA2B;AACvBX,EAAAA,eAAe,EAAEP,SAAS,CAACmB,IADJ;AAEvBb,EAAAA,gBAAgB,EAAEN,SAAS,CAACoB;AAFL,CAA3B","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { DEVICE_VIEW } from '../../constants/prescription'\nimport Select, { Option } from '../../components/common/AutoComplete'\n\nconst ViewTypeFilter = (props) => {\n    const { onChangeListview, isPrimaryFilter, viewType } = props\n    const [type, setType] = useState(DEVICE_VIEW['PENDING'])\n\n    useEffect(() => {\n        if (viewType)\n            setType(viewType)\n    }, [viewType])\n\n    let deviceView = { ...DEVICE_VIEW }\n    if (isPrimaryFilter) {\n        delete deviceView['PENDING']\n    } else {\n        delete deviceView['PRIMARY']\n        delete deviceView['SECONDARY']\n    }\n\n    return <>\n        {\n            // type &&\n            <Select\n                value={type}\n                onChange={onChangeListview}\n            >\n                {Object.keys(deviceView).map(v => {\n                    return (\n                        <Option\n                            key={DEVICE_VIEW[v]}\n                            value={DEVICE_VIEW[v]}\n                        >\n                            {v.replace(/_/g, \" \")}\n                        </Option>\n                    );\n                })}\n            </Select>\n        }\n    </>\n}\nexport default ViewTypeFilter\nViewTypeFilter.defaultProps = {\n    isPrimaryFilter: false\n}\nViewTypeFilter.propTypes = {\n    isPrimaryFilter: PropTypes.bool,\n    onChangeListview: PropTypes.func\n}"]},"metadata":{},"sourceType":"module"}