{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/UserAuth/ResetPassword/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ResetPassword from './ResetPassword';\nimport { createForm } from 'rc-form';\nimport { resetPassword } from '../../../services/api/routes/auth';\nimport { clearLocalStorage } from '../../../util/common';\nimport queryString from 'query-string';\nimport axios from '../../../services/api/config';\nimport routes from '../../../routes/constant';\n\nfunction ResetPasswordMain(props) {\n  const [resetId, setResetId] = useState();\n  const [resetLoading, setResetLoading] = useState(false);\n  const {\n    form\n  } = props;\n  useEffect(() => {\n    if (props.location && props.location.pathname) {\n      let resetId = props.location.pathname.substr(props.location.pathname.lastIndexOf('/') + 1);\n      setResetId(resetId);\n    }\n  }, []);\n\n  const handleReset = () => {\n    form.validateFields((error, value) => {\n      if (error) {\n        return;\n      }\n\n      if (value.newPassword === value.password) {\n        setResetLoading(true);\n        axios({ ...resetPassword,\n          data: {\n            newPassword: value.newPassword,\n            token: resetId\n          }\n        }).then(({\n          data\n        }) => {\n          setResetLoading(false);\n\n          if (data.code === 'OK') {\n            clearLocalStorage();\n            props.history.push({\n              pathname: routes.login.path\n            });\n          }\n        }).catch(err => {\n          setResetLoading(false);\n        });\n      }\n    });\n  };\n\n  const handleUserLogout = () => {\n    clearLocalStorage();\n  };\n\n  return /*#__PURE__*/React.createElement(ResetPassword, {\n    onReset: handleReset,\n    loading: resetLoading,\n    onUserLogout: handleUserLogout,\n    form: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  });\n}\n\nexport default createForm('ResetPasswordMain')(ResetPasswordMain);","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/UserAuth/ResetPassword/index.js"],"names":["React","useState","useEffect","ResetPassword","createForm","resetPassword","clearLocalStorage","queryString","axios","routes","ResetPasswordMain","props","resetId","setResetId","resetLoading","setResetLoading","form","location","pathname","substr","lastIndexOf","handleReset","validateFields","error","value","newPassword","password","data","token","then","code","history","push","login","path","catch","err","handleUserLogout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,EAAtC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAWL,KAAjB;AACAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,KAAK,CAACM,QAAN,IAAkBN,KAAK,CAACM,QAAN,CAAeC,QAArC,EAA+C;AAC3C,UAAIN,OAAO,GAAGD,KAAK,CAACM,QAAN,CAAeC,QAAf,CAAwBC,MAAxB,CAA+BR,KAAK,CAACM,QAAN,CAAeC,QAAf,CAAwBE,WAAxB,CAAoC,GAApC,IAA2C,CAA1E,CAAd;AACAP,MAAAA,UAAU,CAACD,OAAD,CAAV;AACH;AACJ,GALQ,EAKN,EALM,CAAT;;AAMA,QAAMS,WAAW,GAAG,MAAM;AACtBL,IAAAA,IAAI,CAACM,cAAL,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,UAAID,KAAJ,EAAW;AACP;AACH;;AACD,UAAIC,KAAK,CAACC,WAAN,KAAsBD,KAAK,CAACE,QAAhC,EAA0C;AACtCX,QAAAA,eAAe,CAAC,IAAD,CAAf;AACAP,QAAAA,KAAK,CAAC,EACF,GAAGH,aADD;AACgBsB,UAAAA,IAAI,EAAE;AACpBF,YAAAA,WAAW,EAAED,KAAK,CAACC,WADC;AAEpBG,YAAAA,KAAK,EAAEhB;AAFa;AADtB,SAAD,CAAL,CAKGiB,IALH,CAKQ,CAAC;AAAEF,UAAAA;AAAF,SAAD,KAAc;AAClBZ,UAAAA,eAAe,CAAC,KAAD,CAAf;;AACA,cAAIY,IAAI,CAACG,IAAL,KAAc,IAAlB,EAAwB;AACpBxB,YAAAA,iBAAiB;AACjBK,YAAAA,KAAK,CAACoB,OAAN,CAAcC,IAAd,CAAmB;AACfd,cAAAA,QAAQ,EAAET,MAAM,CAACwB,KAAP,CAAaC;AADR,aAAnB;AAGH;AACJ,SAbD,EAaGC,KAbH,CAaSC,GAAG,IAAI;AACZrB,UAAAA,eAAe,CAAC,KAAD,CAAf;AACH,SAfD;AAgBH;AACJ,KAvBD;AAwBH,GAzBD;;AA0BA,QAAMsB,gBAAgB,GAAG,MAAM;AAC3B/B,IAAAA,iBAAiB;AACpB,GAFD;;AAIA,sBAAQ,oBAAC,aAAD;AACJ,IAAA,OAAO,EAAEe,WADL;AAEJ,IAAA,OAAO,EAAEP,YAFL;AAGJ,IAAA,YAAY,EAAEuB,gBAHV;AAIJ,IAAA,IAAI,EAAErB,IAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AAMH;;AAED,eAAeZ,UAAU,CAAC,mBAAD,CAAV,CAAgCM,iBAAhC,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ResetPassword from './ResetPassword'\nimport { createForm } from 'rc-form';\nimport { resetPassword } from '../../../services/api/routes/auth'\nimport { clearLocalStorage } from '../../../util/common'\nimport queryString from 'query-string'\nimport axios from '../../../services/api/config'\nimport routes from '../../../routes/constant';\nfunction ResetPasswordMain(props) {\n    const [resetId, setResetId] = useState()\n    const [resetLoading, setResetLoading] = useState(false)\n    const { form } = props\n    useEffect(() => {\n        if (props.location && props.location.pathname) {\n            let resetId = props.location.pathname.substr(props.location.pathname.lastIndexOf('/') + 1)\n            setResetId(resetId)\n        }\n    }, [])\n    const handleReset = () => {\n        form.validateFields((error, value) => {\n            if (error) {\n                return\n            }\n            if (value.newPassword === value.password) {\n                setResetLoading(true)\n                axios({\n                    ...resetPassword, data: {\n                        newPassword: value.newPassword,\n                        token: resetId\n                    }\n                }).then(({ data }) => {\n                    setResetLoading(false)\n                    if (data.code === 'OK') {\n                        clearLocalStorage()\n                        props.history.push({\n                            pathname: routes.login.path\n                        });\n                    }\n                }).catch(err => {\n                    setResetLoading(false)\n                })\n            }\n        })\n    }\n    const handleUserLogout = () => {\n        clearLocalStorage()\n    }\n\n    return (<ResetPassword\n        onReset={handleReset}\n        loading={resetLoading}\n        onUserLogout={handleUserLogout}\n        form={form}\n    />)\n}\n\nexport default createForm('ResetPasswordMain')(ResetPasswordMain) "]},"metadata":{},"sourceType":"module"}