{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/PmrTodo/components/PmrContainer.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport axios from '../../../services/api/services/common';\nimport { getPmrDetail } from '../../../services/api/routes/pmr';\nimport { PatientInfoBar, TodoActions, PendingTodo } from '../../../components/Todo';\nimport { Spin, LightBox, Toast, Dialog as Modal, NoData } from '../../../components/common';\nimport { isDrOrNp } from '../../../util/common';\nimport { displayDate, displayTime, displayDateTime } from '../../../util/moment';\nimport _ from 'lodash';\nimport { pmrPermissionUpdate, pmrOrderUpdate, pmrAllOrderUpdate } from '../../../services/socket/routes/todo';\nimport { TODO_CATEGORY, STATUS, SUB_CATEGORY } from '../../../constants/todo';\nimport { USER_TYPE } from '../../../constants/User';\nimport { PMR_ORDER, KROLL_ORDER_TYPE } from '../../../constants/pmr';\nimport Header from './Header';\nimport Footer from './Footer';\nimport OrderList from './OrderList';\nimport { isDrOrderView, getOrdersLength, isCautionAlertNotes } from '../../../util/pmr';\nimport NurseBlock from '../../NursePrep/View/NurseBlock';\nimport ReactDOM from 'react-dom';\nimport ReactModal from 'react-modal';\nimport CareClauseEditPopup from '../../../components/common/Popup/careclauseEdit-popup';\nimport CareClause from './CareClause';\nimport ResidentProfile from './ResidentProfile';\nimport AddNewPMRModal from './AddNewPMR';\nimport { ackNurse, ackDoctor, performTodo, nurseAllAck } from '../../../services/api/routes/pmr';\nimport NotesModal from '../../../components/NotesPopup/List';\nimport moment from 'moment';\n\nconst PmrContainer = props => {\n  const {\n    activeTodo,\n    socket,\n    authUser,\n    query,\n    todoRef,\n    onTodoRef\n  } = props;\n  const allOrderRef = React.useRef({});\n  const [loader, setLoader] = useState(false);\n  const [visibleViewer, setVisibleViewer] = useState(false);\n  const [actionLoader, setActionLoader] = useState(false);\n  const [orderListLoader, setOrderListLoader] = useState(false);\n  const [detail, setDetail] = useState();\n  const [addModalVisible, setAddModalVisible] = useState(false);\n  const [order, setOrder] = useState(null);\n  const [orderStatus, setOrderStatus] = useState(0);\n  const activePmrId = (activeTodo === null || activeTodo === void 0 ? void 0 : activeTodo._id) || '';\n  const orderData = React.useRef(null);\n  const [pmrRange, setPmrRange] = useState([]);\n  const [attachmentArr, setAttachmentArr] = useState([]);\n  const [visiblePrevPMR, setVisiblePrevPMR] = useState(false);\n  const [standingOrder, setStandingOrder] = useState(false);\n  const [prevPmrValData, setPrevPmrValData] = useState('prevPmrVal');\n  const [curIndex, setCurIndex] = useState(0);\n  const [attachment, setAttachment] = useState(null);\n  const [visibleView, setVisibleViwer] = useState('visible');\n  const [notesModal, setNotesModal] = useState(false);\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [isEditMode, setIsEditMode] = useState(false);\n  const defaultToDoCategory = query.subCategory;\n  const [isUpsertButtonUI, setIsUpsertButtonUI] = useState(false);\n  const [editModeModal, setEditModeModal] = useState('');\n  const mountRef = React.useRef(false);\n  const performRef = React.useRef(false);\n  const pmrOrderNoteRef = React.useRef(false);\n  useEffect(() => {\n    console.log(\"PmrContainer -> activeTodo\", activeTodo);\n\n    if (todoRef === null || todoRef === void 0 ? void 0 : todoRef.current) {\n      //to avoid api call on update active todo\n      onTodoRef();\n      return;\n    }\n\n    if (activeTodo) {\n      fetch('mount');\n      mountRef.current = true;\n    } else {\n      setDetail(null);\n    }\n  }, [activeTodo]);\n  useEffect(() => {\n    if (detail && activeTodo) {\n      if (getEditMode(detail)) afterFetchPmr(detail);\n    }\n  }, [detail, activeTodo]);\n  useEffect(() => {\n    //while mount\n    if (mountRef.current && detail) {\n      afterFetchPmr(detail, 'mount');\n      mountRef.current = false;\n    }\n  }, [detail]);\n  useEffect(() => {\n    //need to give ref of detail\n    if (!detail || !activeTodo) return;\n\n    if (socket) {\n      socket.on(pmrOrderUpdate, handleOrderUpdate);\n      socket.on(pmrAllOrderUpdate, data => {\n        console.log(\"SOCKET -> pmrAllOrderUpdate data\", data);\n\n        if ((data === null || data === void 0 ? void 0 : data.length) > 0 && detail) {\n          const pmrId = data[0][_.first(_.keys(data[0]))].pmrId;\n\n          if (pmrId === detail._id) handleAllOrderUpdate(data);\n        }\n      });\n      socket.on(pmrPermissionUpdate, handlePermissionUpdate);\n      return () => {\n        socket.off(pmrPermissionUpdate);\n        socket.off(pmrOrderUpdate);\n        socket.off(pmrAllOrderUpdate);\n      };\n    }\n  }, [detail, activeTodo]);\n\n  const handlePermissionUpdate = res => {\n    // self.setState({ pmrDetailFlag: false })\n    if (res.pmrId === (detail === null || detail === void 0 ? void 0 : detail._id)) {\n      // let pmrDetail = _.cloneDeep(detail);\n      // pmrDetail.isDiv = res.isDiv;\n      // pmrDetail.isSave = res.isSave;\n      // pmrDetail.subCategory = res.subCategory;\n      // pmrDetail.completedOrder = res.completedOrder;\n      // pmrDetail = setAccessPermission(pmrDetail);\n      // setDetail(pmrDetail);\n      setDetail(oldDetail => {\n        let pmrDetail = { ...oldDetail\n        };\n        pmrDetail.isDiv = res.isDiv;\n        pmrDetail.isSave = res.isSave;\n        pmrDetail.subCategory = res.subCategory;\n        pmrDetail.completedOrder = res.completedOrder;\n        pmrDetail = setAccessPermission(pmrDetail);\n        return pmrDetail;\n      });\n    }\n  };\n\n  const setAccessPermission = pmrDetail => {\n    if (authUser.type === USER_TYPE.HOME.NURSE && (defaultToDoCategory !== SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_1 && defaultToDoCategory !== SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_2 || defaultToDoCategory !== pmrDetail.subCategory)) {\n      pmrDetail.isDiv = false;\n      pmrDetail.isSave = false;\n\n      if (defaultToDoCategory === SUB_CATEGORY.MED_REVIEW.PMR && (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_1 || pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_2)) {\n        //NR1,NR2 not completed and category PMR then show completed order to 0\n        pmrDetail.completedOrder = 0;\n      } else if (defaultToDoCategory !== SUB_CATEGORY.MED_REVIEW.PMR && (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_1 || pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_2 || pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.PMR)) {\n        //NR1,NR2 not completed and category not PMR then show completed order to 'all'\n        pmrDetail.completedOrder = getOrdersLength(pmrDetail.orderList);\n      }\n    }\n\n    if (authUser.type === USER_TYPE.HOME.PHYSICIAN && defaultToDoCategory !== SUB_CATEGORY.MED_REVIEW.PMR) {\n      //NR1,NR2 not completed then show completed order to 0\n      pmrDetail.completedOrder = getOrdersLength(pmrDetail.orderList);\n    }\n\n    if (isCautionAlertNotes(pmrDetail, defaultToDoCategory) && !pmrDetail.isDiv) {// PMR caution notes permission\n      //set this condition always last\n      // pmrDetail.isDiv = true;\n    }\n\n    return pmrDetail;\n  };\n\n  const fetch = params => {\n    //fetch todo detail\n    setLoader(true);\n    const {\n      method,\n      baseURL\n    } = getPmrDetail;\n    let url = getPmrDetail.url + activePmrId;\n    axios({\n      method,\n      url,\n      baseURL,\n      data: {\n        isOrderList: true,\n        query: {\n          fields: [],\n          populate: [{\n            homeAreaId: ['name']\n          }]\n        }\n      }\n    }).then(data => {\n      if (data.code === 'OK') {\n        if (data.data._id !== activePmrId) return;\n        data.data = setAccessPermission(data.data);\n        setDetail(data.data);\n        setOrderListLoader(false); // fetchPreviousPmr();\n        // if (isEditMode)\n        //     afterFetchPmr(data.data, params)\n      }\n\n      setLoader(false);\n    }).catch(err => {\n      setLoader(false);\n    });\n  };\n\n  const afterFetchPmr = pmrDetail => {\n    var _activeTodo$todoDetai;\n\n    if ((pmrDetail === null || pmrDetail === void 0 ? void 0 : pmrDetail.notesCount) && pmrDetail.notesCount > 0 && !performRef.current) createNotesModal();\n\n    if (isDrOrNp(authUser) && pmrDetail.editExpireTime && pmrDetail.isDiv && ((activeTodo === null || activeTodo === void 0 ? void 0 : (_activeTodo$todoDetai = activeTodo.todoDetail) === null || _activeTodo$todoDetai === void 0 ? void 0 : _activeTodo$todoDetai.status) === STATUS[\"UNDO\"] || isEditMode)) {\n      setEditModeModal(pmrDetail.editExpireTime);\n    }\n\n    if (performRef.current) performRef.current = false;\n  };\n\n  const getEditMode = pmrDetail => {\n    var _activeTodo$todoDetai2, _activeTodo$todoDetai3, _activeTodo$todoDetai4;\n\n    if (defaultToDoCategory === SUB_CATEGORY.MED_REVIEW[\"PMR\"] && pmrDetail.checkType === SUB_CATEGORY.MED_REVIEW[\"PMR\"] && (activeTodo === null || activeTodo === void 0 ? void 0 : (_activeTodo$todoDetai2 = activeTodo.todoDetail) === null || _activeTodo$todoDetai2 === void 0 ? void 0 : _activeTodo$todoDetai2.status) === STATUS[\"COMPLETED\"] && isDrOrNp(authUser) && authUser._id === (activeTodo === null || activeTodo === void 0 ? void 0 : (_activeTodo$todoDetai3 = activeTodo.todoDetail) === null || _activeTodo$todoDetai3 === void 0 ? void 0 : (_activeTodo$todoDetai4 = _activeTodo$todoDetai3.completedBy) === null || _activeTodo$todoDetai4 === void 0 ? void 0 : _activeTodo$todoDetai4._id)) {\n      //Edit Mode\n      if (pmrDetail.editExpireTime >= moment().toISOString()) {\n        setIsEditMode(true);\n        return true;\n      } else {\n        setIsEditMode(false);\n        return false;\n      }\n    } else {\n      setIsEditMode(false);\n      return false;\n    }\n  };\n\n  const handleViewPresc = visible => {\n    setVisibleViewer(visible);\n  };\n\n  const afterPerformTodo = todo => {\n    //to update detail of active todo only\n    // let allowed = false\n    // allowed = todo.participants.find(x => {\n    //     return x.userId === authUser.id && x.active\n    // })\n    // todo.allowed = !!allowed\n    setDetail(oldDetail => {\n      let newDetail = { ...oldDetail\n      };\n      newDetail.todos = _.map(oldDetail.todos, function (td) {\n        return todo._id === td._id ? { ...td,\n          status: todo.status,\n          completedAt: todo.completedAt,\n          completedBy: todo.completedBy,\n          notesCount: todo.notesCount\n        } : td;\n      });\n      newDetail.inProcess = todo.prescriptionId.inProcess;\n      return newDetail;\n    });\n  };\n\n  const handlePrescribedFormUpdate = data => {\n    console.log('SOCKET PrescribedFormUpdate', data);\n\n    if (data._id === activeTodo._id) {\n      setDetail(oldDetail => {\n        let newDetail = { ...oldDetail\n        };\n        newDetail.attachment = data.attachment;\n        newDetail.inProcess = data.inProcess;\n        return newDetail;\n      });\n    }\n  };\n\n  const handleNurseAck = request => {\n    console.log('handleNurseAck request => ', request);\n    request.pmrId = detail._id;\n    request.subCategory = detail.subCategory;\n    console.log('handleNurseAck -> orderStatus', orderStatus, order);\n\n    if (orderStatus === 'EDIT BY NURSE') {\n      request.pmrOrderId = order._id;\n      request.isEdit = true;\n      let newOrder = null;\n\n      if ((order === null || order === void 0 ? void 0 : order.clonedOrders.length) > 1) {\n        let childOrder = order.clonedOrders[1];\n        if (childOrder) newOrder = { ...childOrder\n        };\n      } else newOrder = { ...order\n      };\n\n      request = { ...request,\n        rxNum: newOrder.krollRxNo || newOrder.orderNumber,\n        source: newOrder.source\n      };\n    }\n\n    setOrderListLoader(true);\n    const {\n      method,\n      url,\n      baseURL\n    } = ackNurse;\n    axios({\n      method,\n      url,\n      baseURL,\n      data: request\n    }).then(data => {\n      if (data.code === 'OK') {\n        handleOrderUpdate(data.data);\n        setOrder(null);\n        setAddModalVisible(false);\n        orderData.current = null;\n        Toast.success(data.message);\n\n        if (orderStatus === 'EDIT BY NURSE') {\n          setTimeout(() => {\n            const currentEl = allOrderRef.current[order._id];\n            const rect = ReactDOM.findDOMNode(currentEl).getBoundingClientRect();\n            document.getElementsByClassName('scroll-block')[0].scrollTo(rect.top, rect.top - 350);\n          }, 1500);\n        }\n      }\n\n      setOrderListLoader(false);\n    }).catch(err => {\n      setOrderListLoader(false);\n    });\n  };\n\n  const handleEditOrder = params => {\n    if (params.isdcNew) {\n      setOrderStatus(params.type);\n      setOrder(params.order);\n    } else {\n      orderData.current = params.order;\n\n      if (params.order) {\n        setOrderStatus(params.type);\n\n        if (params.order.krollOrderType === KROLL_ORDER_TYPE.PMR) {\n          setOrder(params.order); // setAddModalVisible(true);\n\n          setStandingOrder(false);\n        } else if (params.order.krollOrderType === KROLL_ORDER_TYPE.STANDING) {\n          // Edit KROLL STANDING ORDER\n          setOrder(params.order);\n          setStandingOrder(true);\n        }\n      } else {\n        setOrderStatus(0);\n      }\n    }\n\n    setAddModalVisible(true);\n  };\n\n  const handleOrderUpdate = res => {\n    if (!res || !detail) return; // self.setState({ pmrDetailFlag: false })\n\n    if (res.pmrId === detail._id) {\n      let orderList = [...detail.orderList];\n      let orderIndex;\n\n      if (res.cloneUpdated) {\n        orderIndex = orderList.findIndex(x => x._id === res.cloneUpdated._id);\n        orderList[orderIndex] = res.cloneUpdated;\n      }\n\n      if (res.updated) {\n        orderIndex = orderList.findIndex(x => x._id === res.updated._id);\n        orderList[orderIndex] = res.updated;\n      }\n\n      if (res.newOrder) {\n        //    To avoid duplication of new order\n        let orderIndexNew;\n        orderIndexNew = orderList.findIndex(x => x._id === res.newOrder._id);\n        if (orderIndexNew >= 0) orderList[orderIndexNew] = res.newOrder;else orderList.unshift(res.newOrder);\n      }\n\n      setOrderStatus(0);\n      setOrder(null);\n      setDetail(oldDetail => ({ ...oldDetail,\n        orderList\n      }));\n      setOrderListLoader(false);\n    }\n  };\n\n  const handleAddOrder = data => {\n    console.log('handleAddOrder -> data', data);\n    handleOrderUpdate(data);\n  };\n\n  const handlePerformToDo = () => {\n    setLoader(true);\n    let request = {\n      todoType: detail.subCategory,\n      pmrId: detail._id,\n      date: displayDate(Date.now()),\n      time: displayTime(Date.now()),\n      undo: isEditMode,\n      notApplicable: false\n    };\n    axios({ ...performTodo,\n      data: request\n    }).then(data => {\n      if (data.code === 'OK') {\n        Toast.success(data.message);\n        fetch();\n        performRef.current = true; // self.fetchPmrDetail(this.state.pmrDetail.isEditMode ? { type: \"undo\" } : {})\n      } else {\n        Toast.error(data.message);\n      }\n\n      setLoader(false);\n    }).catch(error => {\n      setLoader(false);\n    });\n  };\n\n  const handleDrAck = request => {\n    setOrderListLoader(true); // this.setState({ orderListLoading: true, pmrDetailFlag: false })\n\n    if (orderStatus === PMR_ORDER.STATUS.DISCONTINUE) {\n      let newOrder = null;\n\n      if ((order === null || order === void 0 ? void 0 : order.clonedOrders.length) > 1) {\n        let childOrder = order.clonedOrders[1];\n        if (childOrder) newOrder = { ...childOrder\n        };\n      } else newOrder = { ...order\n      };\n\n      request = { ...request,\n        pmrOrderId: order._id,\n        docStatusUpdate: orderStatus,\n        status: orderStatus,\n        subActionType: (orderData === null || orderData === void 0 ? void 0 : orderData.current) ? PMR_ORDER.SUB_ACTION.EDIT : PMR_ORDER.SUB_ACTION.DISCONTINUE_AND_CREATE_NEW,\n        rxNum: newOrder.krollRxNo || newOrder.orderNumber,\n        source: newOrder.source\n      };\n    }\n\n    request.pmrId = detail._id;\n    request.subCategory = detail.subCategory;\n    axios({ ...ackDoctor,\n      data: request\n    }).then(data => {\n      if (data.code === 'OK') {\n        Toast.success(data.message);\n        handleOrderUpdate(data.data);\n        setOrder(null);\n        setAddModalVisible(false);\n        orderData.current = null;\n\n        if (request.subActionType === PMR_ORDER.SUB_ACTION.EDIT) {\n          setTimeout(() => {\n            const currentEl = allOrderRef.current[order._id];\n            const rect = ReactDOM.findDOMNode(currentEl).getBoundingClientRect();\n            document.getElementsByClassName('scroll-block')[0].scrollTo(rect.top, rect.top - 350);\n          }, 1500);\n        }\n      } else {\n        Toast.error(data.message);\n      }\n\n      setOrderListLoader(false);\n    }).catch(error => {\n      setOrderListLoader(false);\n    });\n  };\n\n  const fetchPreviousPmr = () => {\n    let request = {\n      patientId: detail.patientId._id\n    };\n    axios.post(`admin/pmr/previous-pmr`, request).then(({\n      data\n    }) => {\n      if (data.code === 'OK') {\n        // data.data[1] = {\n        //     attachments: [\n        //         {\n        //             path: 'https://arxiv.org/pdf/quant-ph/0410100.pdf',\n        //             printed: false,\n        //             revision: false\n        //         }\n        //     ],\n        //     id: \"5df064603cfa2b3dedc07425\",\n        //     pmrId: \"001532\",\n        //     pmrScheduleDate: { startDate: \"2019-11-14T18:30:00.000Z\", endDate: \"2020-11-15T18:29:59.999Z\" }\n        // }\n        setPmrRange(data.data);\n      } else {\n        setPmrRange([]);\n      }\n    }).catch(error => {\n      console.log('Error:', error.message);\n      setPmrRange([]);\n    });\n  };\n\n  const handlePrevPMR = val => {\n    if (val !== detail.id) {\n      let pmrRangeData = [...pmrRange];\n      pmrRangeData = pmrRangeData.filter(x => x.id !== detail.id);\n      let prevPMR = {};\n      let attachmentArr = [];\n\n      if (pmrRange.length) {\n        // prevPMR = pmrRange.find(x => x.id === val)\n        pmrRange.map((x, index) => {\n          if (x.attachments && x.attachments.length) {\n            let obj = {\n              id: x.id,\n              pmrId: x.pmrId,\n              path: x.attachments[0].path,\n              index: index\n            };\n            attachmentArr.push(obj);\n          }\n        });\n        prevPMR = attachmentArr.find(x => x.id === val);\n      }\n\n      if (attachmentArr.length) {\n        setAttachmentArr(attachmentArr);\n        setVisiblePrevPMR(true); // this.setState({\n        //   attachmentArr: attachmentArr,\n        //   prevPMR: prevPMR,\n        //   visiblePrevPMR: true,\n        // });\n      }\n    }\n  };\n\n  const visibleNotesModal = (visible, record, str, data) => {\n    //notes modal close\n    setNotesModal(visible);\n\n    if (!visible && !pmrOrderNoteRef.current) {\n      //do not update notes count for pmr orders\n      setNotesFilterOptions({});\n\n      if (isUpsertButtonUI) {\n        let tempDetail = { ...detail\n        };\n        tempDetail.notesCount = data;\n        setDetail(tempDetail);\n      }\n    }\n\n    if (pmrOrderNoteRef.current) pmrOrderNoteRef.current = false;\n  };\n\n  const createNotesModal = str => {\n    //view notes modal\n    if (str === 'upsert') setIsUpsertButtonUI(true);\n    let mergeNotesIds = [];\n\n    if (str === 'order') {\n      pmrOrderNoteRef.current = true;\n\n      _.map(detail === null || detail === void 0 ? void 0 : detail.orderList, dd => {\n        mergeNotesIds.push(dd._id);\n      });\n    }\n\n    let options = {\n      query: {\n        find: {\n          pmrId: str === 'order' ? undefined : detail === null || detail === void 0 ? void 0 : detail._id,\n          category: TODO_CATEGORY.MED_REVIEW,\n          residentId: detail === null || detail === void 0 ? void 0 : detail.patientId._id,\n          subCategory: str === 'order' ? undefined : SUB_CATEGORY.NOTES.GENERAL,\n          pmrOrderId: str === 'order' ? mergeNotesIds : undefined\n        },\n        populate: [{\n          addedBy: []\n        }]\n      }\n    };\n    setNotesFilterOptions(options);\n    setNotesModal(true);\n  };\n\n  const handleUpdateOrder = (key, orderData) => {\n    let pmrDetail = { ...detail\n    };\n    let index = pmrDetail.orderList.findIndex(x => x._id === orderData.orderId);\n\n    if (index >= 0) {\n      pmrDetail.orderList[index][key] = orderData.data;\n      setDetail(pmrDetail);\n    }\n  };\n\n  const handleAllOrderUpdate = orders => {\n    let orderList = [...detail.orderList],\n        orderIndex;\n    orders.map((res, i) => {\n      if (res.cloneUpdated) {\n        orderIndex = orderList.findIndex(x => x._id === res.cloneUpdated._id);\n        orderList[orderIndex] = res.cloneUpdated;\n      }\n\n      if (res.updated) {\n        orderIndex = orderList.findIndex(x => x._id === res.updated._id);\n        orderList[orderIndex] = res.updated;\n      }\n\n      if (res.newOrder) {\n        //    To avoid duplication of new order\n        let orderIndexNew;\n        orderIndexNew = orderList.findIndex(x => x._id === res.newOrder._id);\n        if (orderIndexNew >= 0) orderList[orderIndexNew] = res.newOrder;else orderList.unshift(res.newOrder);\n      }\n    });\n    setDetail(oldDetail => {\n      return { ...oldDetail,\n        orderList\n      };\n    });\n    setOrderListLoader(false);\n  };\n\n  const handleAllNurseAck = () => {\n    setOrderListLoader(true);\n    let request = {\n      \"subCategory\": detail.subCategory,\n      \"pmrId\": detail._id,\n      \"nurseAcknowStatus\": true\n    };\n    axios({ ...nurseAllAck,\n      data: request\n    }).then(data => {\n      if (data.code === 'OK') {\n        var _data$data;\n\n        Toast.success(data.message);\n\n        if (((_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.length) > 0) {\n          handleAllOrderUpdate(data.data);\n        }\n      } else {\n        Toast.error(data.message);\n      }\n\n      setOrderListLoader(false);\n    }).catch(err => {\n      console.log(\"handleAllNurseAck -> err\", err);\n      setOrderListLoader(false);\n    });\n  };\n\n  const handleOrderRef = (orderId, orderRef) => {\n    allOrderRef.current = { ...allOrderRef.current,\n      [orderId]: orderRef\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"prep_right_wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 13\n    }\n  }, loader ? /*#__PURE__*/React.createElement(Spin, {\n    spinning: loader,\n    str: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 21\n    }\n  }) : detail ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box-border bb0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    detail: detail,\n    isEditMode: isEditMode,\n    onPrevPMRChange: handlePrevPMR,\n    prevPmrVal: setPrevPmrValData,\n    attachmentArr: attachmentArr,\n    onPerformTodo: handlePerformToDo,\n    activeTodo: activeTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resident-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-resident-pro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(ResidentProfile, {\n    detail: detail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(CareClause, {\n    detail: detail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(OrderList, {\n    detail: detail,\n    isEditMode: isEditMode,\n    orderListLoader: orderListLoader,\n    setAddModalVisible: setAddModalVisible,\n    onNurseAck: handleNurseAck,\n    onDrAck: handleDrAck,\n    onEditOrder: handleEditOrder,\n    onAddOrder: handleEditOrder,\n    onUpdateOrder: handleUpdateOrder // onAddOrder={handleAddOrder}\n    ,\n    handleOrderRef: handleOrderRef,\n    query: query,\n    authUser: authUser,\n    onAllNurseAck: handleAllNurseAck,\n    activeTodo: activeTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Footer, {\n    onCreateNotesModal: createNotesModal,\n    detail: detail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 29\n    }\n  }))) : /*#__PURE__*/React.createElement(NoData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 21\n    }\n  })), !!addModalVisible && /*#__PURE__*/React.createElement(AddNewPMRModal, {\n    visible: addModalVisible,\n    onClose: () => {\n      orderData.current = null;\n      setAddModalVisible(false);\n      setStandingOrder(false);\n      setOrderStatus(0);\n    },\n    detail: detail,\n    orderData: orderData.current,\n    onNurseAck: handleNurseAck,\n    onDrAck: handleDrAck,\n    onAddOrder: handleAddOrder,\n    standingOrder: standingOrder,\n    authUser: authUser,\n    orderStatus: orderStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 17\n    }\n  }), notesModal && /*#__PURE__*/React.createElement(NotesModal, {\n    visible: notesModal,\n    filterOptions: notesFilterOptions,\n    onCancel: data => visibleNotesModal(false, null, 'cancel', data) // onOk={() => visibleNotesModal(false)}\n    ,\n    isUpsertList: isUpsertButtonUI,\n    modalTitle: `View Note - ${detail === null || detail === void 0 ? void 0 : detail.pmrId}`,\n    xRayNumber: detail === null || detail === void 0 ? void 0 : detail.pmrId,\n    addData: {\n      residentId: detail === null || detail === void 0 ? void 0 : detail.patientId._id,\n      pmrId: detail === null || detail === void 0 ? void 0 : detail._id,\n      category: TODO_CATEGORY.MED_REVIEW,\n      subCategory: SUB_CATEGORY.NOTES.GENERAL\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 17\n    }\n  }), !!editModeModal ? /*#__PURE__*/React.createElement(Modal, {\n    visible: !!editModeModal,\n    footer: null,\n    style: {\n      width: '400px'\n    },\n    onCancel: () => setEditModeModal(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '25px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 25\n    }\n  }, \"PMR is in edit mode and can be edit until \", displayDateTime(editModeModal))) : null);\n};\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser,\n    socket\n  } = auth;\n  return {\n    authUser,\n    socket\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(PmrContainer));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/PmrTodo/components/PmrContainer.js"],"names":["React","Component","useEffect","useState","connect","withRouter","axios","getPmrDetail","PatientInfoBar","TodoActions","PendingTodo","Spin","LightBox","Toast","Dialog","Modal","NoData","isDrOrNp","displayDate","displayTime","displayDateTime","_","pmrPermissionUpdate","pmrOrderUpdate","pmrAllOrderUpdate","TODO_CATEGORY","STATUS","SUB_CATEGORY","USER_TYPE","PMR_ORDER","KROLL_ORDER_TYPE","Header","Footer","OrderList","isDrOrderView","getOrdersLength","isCautionAlertNotes","NurseBlock","ReactDOM","ReactModal","CareClauseEditPopup","CareClause","ResidentProfile","AddNewPMRModal","ackNurse","ackDoctor","performTodo","nurseAllAck","NotesModal","moment","PmrContainer","props","activeTodo","socket","authUser","query","todoRef","onTodoRef","allOrderRef","useRef","loader","setLoader","visibleViewer","setVisibleViewer","actionLoader","setActionLoader","orderListLoader","setOrderListLoader","detail","setDetail","addModalVisible","setAddModalVisible","order","setOrder","orderStatus","setOrderStatus","activePmrId","_id","orderData","pmrRange","setPmrRange","attachmentArr","setAttachmentArr","visiblePrevPMR","setVisiblePrevPMR","standingOrder","setStandingOrder","prevPmrValData","setPrevPmrValData","curIndex","setCurIndex","attachment","setAttachment","visibleView","setVisibleViwer","notesModal","setNotesModal","notesFilterOptions","setNotesFilterOptions","isEditMode","setIsEditMode","defaultToDoCategory","subCategory","isUpsertButtonUI","setIsUpsertButtonUI","editModeModal","setEditModeModal","mountRef","performRef","pmrOrderNoteRef","console","log","current","fetch","getEditMode","afterFetchPmr","on","handleOrderUpdate","data","length","pmrId","first","keys","handleAllOrderUpdate","handlePermissionUpdate","off","res","oldDetail","pmrDetail","isDiv","isSave","completedOrder","setAccessPermission","type","HOME","NURSE","MED_REVIEW","NURSE_REVIEW_1","NURSE_REVIEW_2","PMR","orderList","PHYSICIAN","params","method","baseURL","url","isOrderList","fields","populate","homeAreaId","then","code","catch","err","notesCount","createNotesModal","editExpireTime","todoDetail","status","checkType","completedBy","toISOString","handleViewPresc","visible","afterPerformTodo","todo","newDetail","todos","map","td","completedAt","inProcess","prescriptionId","handlePrescribedFormUpdate","handleNurseAck","request","pmrOrderId","isEdit","newOrder","clonedOrders","childOrder","rxNum","krollRxNo","orderNumber","source","success","message","setTimeout","currentEl","rect","findDOMNode","getBoundingClientRect","document","getElementsByClassName","scrollTo","top","handleEditOrder","isdcNew","krollOrderType","STANDING","orderIndex","cloneUpdated","findIndex","x","updated","orderIndexNew","unshift","handleAddOrder","handlePerformToDo","todoType","date","Date","now","time","undo","notApplicable","error","handleDrAck","DISCONTINUE","docStatusUpdate","subActionType","SUB_ACTION","EDIT","DISCONTINUE_AND_CREATE_NEW","fetchPreviousPmr","patientId","post","handlePrevPMR","val","id","pmrRangeData","filter","prevPMR","index","attachments","obj","path","push","find","visibleNotesModal","record","str","tempDetail","mergeNotesIds","dd","options","undefined","category","residentId","NOTES","GENERAL","addedBy","handleUpdateOrder","key","orderId","orders","i","handleAllNurseAck","handleOrderRef","orderRef","width","marginTop","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport axios from '../../../services/api/services/common';\nimport { getPmrDetail } from '../../../services/api/routes/pmr';\nimport {\n    PatientInfoBar,\n    TodoActions,\n    PendingTodo,\n} from '../../../components/Todo';\nimport { Spin, LightBox, Toast, Dialog as Modal, NoData } from '../../../components/common';\nimport { isDrOrNp } from '../../../util/common';\nimport { displayDate, displayTime, displayDateTime } from '../../../util/moment';\nimport _ from 'lodash';\nimport {\n    pmrPermissionUpdate,\n    pmrOrderUpdate,\n    pmrAllOrderUpdate\n} from '../../../services/socket/routes/todo';\nimport { TODO_CATEGORY, STATUS, SUB_CATEGORY } from '../../../constants/todo';\nimport { USER_TYPE } from '../../../constants/User';\nimport { PMR_ORDER, KROLL_ORDER_TYPE } from '../../../constants/pmr';\nimport Header from './Header';\nimport Footer from './Footer';\nimport OrderList from './OrderList';\nimport {\n    isDrOrderView,\n    getOrdersLength,\n    isCautionAlertNotes,\n} from '../../../util/pmr';\nimport NurseBlock from '../../NursePrep/View/NurseBlock';\nimport ReactDOM from 'react-dom';\nimport ReactModal from 'react-modal';\nimport CareClauseEditPopup from '../../../components/common/Popup/careclauseEdit-popup';\nimport CareClause from './CareClause';\nimport ResidentProfile from './ResidentProfile';\nimport AddNewPMRModal from './AddNewPMR';\nimport {\n    ackNurse,\n    ackDoctor,\n    performTodo,\n    nurseAllAck\n} from '../../../services/api/routes/pmr';\nimport NotesModal from '../../../components/NotesPopup/List';\nimport moment from 'moment'\n\nconst PmrContainer = (props) => {\n    const { activeTodo, socket, authUser, query, todoRef, onTodoRef } = props;\n    const allOrderRef = React.useRef({})\n    const [loader, setLoader] = useState(false);\n    const [visibleViewer, setVisibleViewer] = useState(false);\n    const [actionLoader, setActionLoader] = useState(false);\n    const [orderListLoader, setOrderListLoader] = useState(false);\n    const [detail, setDetail] = useState();\n    const [addModalVisible, setAddModalVisible] = useState(false);\n    const [order, setOrder] = useState(null);\n    const [orderStatus, setOrderStatus] = useState(0);\n    const activePmrId = activeTodo?._id || '';\n    const orderData = React.useRef(null);\n    const [pmrRange, setPmrRange] = useState([]);\n    const [attachmentArr, setAttachmentArr] = useState([]);\n    const [visiblePrevPMR, setVisiblePrevPMR] = useState(false);\n    const [standingOrder, setStandingOrder] = useState(false);\n    const [prevPmrValData, setPrevPmrValData] = useState('prevPmrVal');\n    const [curIndex, setCurIndex] = useState(0);\n    const [attachment, setAttachment] = useState(null);\n    const [visibleView, setVisibleViwer] = useState('visible');\n    const [notesModal, setNotesModal] = useState(false);\n    const [notesFilterOptions, setNotesFilterOptions] = useState({});\n    const [isEditMode, setIsEditMode] = useState(false);\n    const defaultToDoCategory = query.subCategory;\n    const [isUpsertButtonUI, setIsUpsertButtonUI] = useState(false);\n    const [editModeModal, setEditModeModal] = useState('');\n    const mountRef = React.useRef(false);\n    const performRef = React.useRef(false);\n    const pmrOrderNoteRef = React.useRef(false);\n\n    useEffect(() => {\n        console.log(\"PmrContainer -> activeTodo\", activeTodo)\n        if (todoRef?.current) {\n            //to avoid api call on update active todo\n            onTodoRef()\n            return\n        }\n        if (activeTodo) {\n            fetch('mount');\n            mountRef.current = true;\n        } else {\n            setDetail(null)\n        }\n    }, [activeTodo]);\n\n    useEffect(() => {\n        if (detail && activeTodo) {\n            if (getEditMode(detail))\n                afterFetchPmr(detail)\n        }\n    }, [detail, activeTodo]);\n\n    useEffect(() => {\n        //while mount\n        if (mountRef.current && detail) {\n            afterFetchPmr(detail, 'mount')\n            mountRef.current = false\n        }\n    }, [detail]);\n\n    useEffect(() => {\n        //need to give ref of detail\n        if (!detail || !activeTodo) return;\n        if (socket) {\n            socket.on(pmrOrderUpdate, handleOrderUpdate);\n            socket.on(pmrAllOrderUpdate, (data) => {\n                console.log(\"SOCKET -> pmrAllOrderUpdate data\", data)\n                if (data?.length > 0 && detail) {\n                    const pmrId = data[0][_.first(_.keys(data[0]))].pmrId\n                    if (pmrId === detail._id)\n                        handleAllOrderUpdate(data)\n                }\n            });\n            socket.on(pmrPermissionUpdate, handlePermissionUpdate);\n            return () => {\n                socket.off(pmrPermissionUpdate);\n                socket.off(pmrOrderUpdate);\n                socket.off(pmrAllOrderUpdate);\n            };\n        }\n    }, [detail, activeTodo]);\n\n    const handlePermissionUpdate = (res) => {\n        // self.setState({ pmrDetailFlag: false })\n        if (res.pmrId === detail?._id) {\n            // let pmrDetail = _.cloneDeep(detail);\n            // pmrDetail.isDiv = res.isDiv;\n            // pmrDetail.isSave = res.isSave;\n            // pmrDetail.subCategory = res.subCategory;\n            // pmrDetail.completedOrder = res.completedOrder;\n            // pmrDetail = setAccessPermission(pmrDetail);\n            // setDetail(pmrDetail);\n            setDetail(oldDetail => {\n                let pmrDetail = { ...oldDetail };\n                pmrDetail.isDiv = res.isDiv;\n                pmrDetail.isSave = res.isSave;\n                pmrDetail.subCategory = res.subCategory;\n                pmrDetail.completedOrder = res.completedOrder;\n                pmrDetail = setAccessPermission(pmrDetail);\n                return pmrDetail\n            });\n        }\n    };\n\n    const setAccessPermission = (pmrDetail) => {\n        if (\n            authUser.type === USER_TYPE.HOME.NURSE &&\n            ((defaultToDoCategory !== SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_1 &&\n                defaultToDoCategory !== SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_2) ||\n                defaultToDoCategory !== pmrDetail.subCategory)\n        ) {\n            pmrDetail.isDiv = false;\n            pmrDetail.isSave = false;\n\n            if (\n                defaultToDoCategory === SUB_CATEGORY.MED_REVIEW.PMR &&\n                (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_1 ||\n                    pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_2)\n            ) {\n                //NR1,NR2 not completed and category PMR then show completed order to 0\n                pmrDetail.completedOrder = 0;\n            } else if (\n                defaultToDoCategory !== SUB_CATEGORY.MED_REVIEW.PMR &&\n                (pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_1 ||\n                    pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.NURSE_REVIEW_2 ||\n                    pmrDetail.subCategory === SUB_CATEGORY.MED_REVIEW.PMR)\n            ) {\n                //NR1,NR2 not completed and category not PMR then show completed order to 'all'\n                pmrDetail.completedOrder = getOrdersLength(pmrDetail.orderList);\n            }\n        }\n\n        if (\n            authUser.type === USER_TYPE.HOME.PHYSICIAN &&\n            defaultToDoCategory !== SUB_CATEGORY.MED_REVIEW.PMR\n        ) {\n            //NR1,NR2 not completed then show completed order to 0\n            pmrDetail.completedOrder = getOrdersLength(pmrDetail.orderList);\n        }\n\n        if (\n            isCautionAlertNotes(pmrDetail, defaultToDoCategory) &&\n            !pmrDetail.isDiv\n        ) {\n            // PMR caution notes permission\n            //set this condition always last\n            // pmrDetail.isDiv = true;\n        }\n\n        return pmrDetail;\n    };\n\n    const fetch = (params) => {\n        //fetch todo detail\n        setLoader(true);\n        const { method, baseURL } = getPmrDetail;\n        let url = getPmrDetail.url + activePmrId;\n        axios({\n            method,\n            url,\n            baseURL,\n            data: {\n                isOrderList: true,\n                query: {\n                    fields: [],\n                    populate: [\n                        {\n                            homeAreaId: ['name'],\n                        },\n                    ],\n                },\n            },\n        })\n            .then((data) => {\n                if (data.code === 'OK') {\n                    if (data.data._id !== activePmrId)\n                        return\n                    data.data = setAccessPermission(data.data)\n                    setDetail(data.data);\n                    setOrderListLoader(false)\n                    // fetchPreviousPmr();\n                    // if (isEditMode)\n                    //     afterFetchPmr(data.data, params)\n                }\n                setLoader(false);\n            })\n            .catch((err) => {\n                setLoader(false);\n            });\n    };\n\n    const afterFetchPmr = (pmrDetail) => {\n        if (pmrDetail?.notesCount && pmrDetail.notesCount > 0 && !performRef.current)\n            createNotesModal()\n        if (isDrOrNp(authUser)\n            && pmrDetail.editExpireTime && pmrDetail.isDiv\n            && ((activeTodo?.todoDetail?.status === STATUS[\"UNDO\"] || isEditMode))\n        ) {\n            setEditModeModal(pmrDetail.editExpireTime)\n        }\n        if (performRef.current)\n            performRef.current = false\n    }\n\n    const getEditMode = (pmrDetail) => {\n        if (defaultToDoCategory === SUB_CATEGORY.MED_REVIEW[\"PMR\"] &&\n            pmrDetail.checkType === SUB_CATEGORY.MED_REVIEW[\"PMR\"] &&\n            activeTodo?.todoDetail?.status === STATUS[\"COMPLETED\"] &&\n            isDrOrNp(authUser) && authUser._id === activeTodo?.todoDetail?.completedBy?._id\n        ) {\n            //Edit Mode\n            if (pmrDetail.editExpireTime >= moment().toISOString()) {\n                setIsEditMode(true)\n                return true\n            } else {\n                setIsEditMode(false)\n                return false\n            }\n        }\n        else {\n            setIsEditMode(false)\n            return false\n        }\n    }\n\n    const handleViewPresc = (visible) => {\n        setVisibleViewer(visible);\n    };\n\n    const afterPerformTodo = (todo) => {\n        //to update detail of active todo only\n        // let allowed = false\n        // allowed = todo.participants.find(x => {\n        //     return x.userId === authUser.id && x.active\n        // })\n        // todo.allowed = !!allowed\n        setDetail((oldDetail) => {\n            let newDetail = { ...oldDetail };\n            newDetail.todos = _.map(oldDetail.todos, function (td) {\n                return todo._id === td._id\n                    ? {\n                        ...td,\n                        status: todo.status,\n                        completedAt: todo.completedAt,\n                        completedBy: todo.completedBy,\n                        notesCount: todo.notesCount,\n                    }\n                    : td;\n            });\n            newDetail.inProcess = todo.prescriptionId.inProcess;\n            return newDetail;\n        });\n    };\n\n    const handlePrescribedFormUpdate = (data) => {\n        console.log('SOCKET PrescribedFormUpdate', data);\n        if (data._id === activeTodo._id) {\n            setDetail((oldDetail) => {\n                let newDetail = { ...oldDetail };\n                newDetail.attachment = data.attachment;\n                newDetail.inProcess = data.inProcess;\n                return newDetail;\n            });\n        }\n    };\n\n    const handleNurseAck = (request) => {\n        console.log('handleNurseAck request => ', request);\n        request.pmrId = detail._id;\n        request.subCategory = detail.subCategory;\n        console.log('handleNurseAck -> orderStatus', orderStatus, order);\n        if (orderStatus === 'EDIT BY NURSE') {\n            request.pmrOrderId = order._id;\n            request.isEdit = true;\n            let newOrder = null;\n            if (order?.clonedOrders.length > 1) {\n                let childOrder = order.clonedOrders[1];\n                if (childOrder) newOrder = { ...childOrder };\n            } else newOrder = { ...order };\n            request = {\n                ...request,\n                rxNum: newOrder.krollRxNo || newOrder.orderNumber,\n                source: newOrder.source,\n            };\n        }\n        setOrderListLoader(true);\n        const { method, url, baseURL } = ackNurse;\n        axios({ method, url, baseURL, data: request })\n            .then((data) => {\n                if (data.code === 'OK') {\n                    handleOrderUpdate(data.data);\n                    setOrder(null);\n                    setAddModalVisible(false);\n                    orderData.current = null;\n                    Toast.success(data.message);\n                    if (orderStatus === 'EDIT BY NURSE') {\n                        setTimeout(() => {\n                            const currentEl = allOrderRef.current[order._id];\n                            const rect = ReactDOM.findDOMNode(currentEl).getBoundingClientRect();\n                            document.getElementsByClassName('scroll-block')[0].scrollTo(rect.top, rect.top - 350)\n                        }, 1500);\n                    }\n                }\n                setOrderListLoader(false);\n            })\n            .catch((err) => {\n                setOrderListLoader(false);\n            });\n    };\n\n    const handleEditOrder = (params) => {\n        if (params.isdcNew) {\n            setOrderStatus(params.type)\n            setOrder(params.order)\n        } else {\n            orderData.current = params.order;\n            if (params.order) {\n                setOrderStatus(params.type)\n                if (params.order.krollOrderType === KROLL_ORDER_TYPE.PMR) {\n                    setOrder(params.order)\n                    // setAddModalVisible(true);\n                    setStandingOrder(false)\n                } else if (params.order.krollOrderType === KROLL_ORDER_TYPE.STANDING) {\n                    // Edit KROLL STANDING ORDER\n                    setOrder(params.order)\n                    setStandingOrder(true)\n                }\n            } else {\n                setOrderStatus(0)\n            }\n        }\n        setAddModalVisible(true);\n    };\n\n    const handleOrderUpdate = (res) => {\n        if (!res || !detail) return;\n        // self.setState({ pmrDetailFlag: false })\n        if (res.pmrId === detail._id) {\n            let orderList = [...detail.orderList];\n            let orderIndex;\n            if (res.cloneUpdated) {\n                orderIndex = orderList.findIndex((x) => x._id === res.cloneUpdated._id);\n                orderList[orderIndex] = res.cloneUpdated;\n            }\n            if (res.updated) {\n                orderIndex = orderList.findIndex((x) => x._id === res.updated._id);\n                orderList[orderIndex] = res.updated;\n            }\n            if (res.newOrder) {\n                //    To avoid duplication of new order\n                let orderIndexNew;\n                orderIndexNew = orderList.findIndex((x) => x._id === res.newOrder._id);\n                if (orderIndexNew >= 0) orderList[orderIndexNew] = res.newOrder;\n                else orderList.unshift(res.newOrder);\n            }\n            setOrderStatus(0);\n            setOrder(null);\n            setDetail(oldDetail => ({ ...oldDetail, orderList }));\n            setOrderListLoader(false);\n        }\n    };\n\n    const handleAddOrder = (data) => {\n        console.log('handleAddOrder -> data', data);\n        handleOrderUpdate(data);\n    };\n\n    const handlePerformToDo = () => {\n        setLoader(true);\n        let request = {\n            todoType: detail.subCategory,\n            pmrId: detail._id,\n            date: displayDate(Date.now()),\n            time: displayTime(Date.now()),\n            undo: isEditMode,\n            notApplicable: false,\n        };\n        axios({ ...performTodo, data: request })\n            .then((data) => {\n                if (data.code === 'OK') {\n                    Toast.success(data.message);\n                    fetch();\n                    performRef.current = true\n                    // self.fetchPmrDetail(this.state.pmrDetail.isEditMode ? { type: \"undo\" } : {})\n                } else {\n                    Toast.error(data.message);\n                }\n                setLoader(false);\n            })\n            .catch((error) => {\n                setLoader(false);\n            });\n    };\n\n    const handleDrAck = (request) => {\n        setOrderListLoader(true);\n        // this.setState({ orderListLoading: true, pmrDetailFlag: false })\n        if (orderStatus === PMR_ORDER.STATUS.DISCONTINUE) {\n            let newOrder = null;\n            if (order?.clonedOrders.length > 1) {\n                let childOrder = order.clonedOrders[1];\n                if (childOrder) newOrder = { ...childOrder };\n            } else newOrder = { ...order };\n            request = {\n                ...request,\n                pmrOrderId: order._id,\n                docStatusUpdate: orderStatus,\n                status: orderStatus,\n                subActionType: orderData?.current\n                    ? PMR_ORDER.SUB_ACTION.EDIT\n                    : PMR_ORDER.SUB_ACTION.DISCONTINUE_AND_CREATE_NEW,\n                rxNum: newOrder.krollRxNo || newOrder.orderNumber,\n                source: newOrder.source,\n            };\n        }\n        request.pmrId = detail._id;\n        request.subCategory = detail.subCategory;\n        axios({ ...ackDoctor, data: request })\n            .then((data) => {\n                if (data.code === 'OK') {\n                    Toast.success(data.message);\n                    handleOrderUpdate(data.data);\n                    setOrder(null);\n                    setAddModalVisible(false);\n                    orderData.current = null;\n                    if (request.subActionType === PMR_ORDER.SUB_ACTION.EDIT) {\n                        setTimeout(() => {\n                            const currentEl = allOrderRef.current[order._id];\n                            const rect = ReactDOM.findDOMNode(currentEl).getBoundingClientRect();\n                            document.getElementsByClassName('scroll-block')[0].scrollTo(rect.top, rect.top - 350)\n                        }, 1500);\n                    }\n                } else {\n                    Toast.error(data.message);\n                }\n                setOrderListLoader(false);\n            })\n            .catch((error) => {\n                setOrderListLoader(false);\n            });\n    };\n\n    const fetchPreviousPmr = () => {\n        let request = {\n            patientId: detail.patientId._id,\n        };\n        axios\n            .post(`admin/pmr/previous-pmr`, request)\n            .then(({ data }) => {\n                if (data.code === 'OK') {\n                    // data.data[1] = {\n                    //     attachments: [\n                    //         {\n                    //             path: 'https://arxiv.org/pdf/quant-ph/0410100.pdf',\n                    //             printed: false,\n                    //             revision: false\n                    //         }\n                    //     ],\n                    //     id: \"5df064603cfa2b3dedc07425\",\n                    //     pmrId: \"001532\",\n                    //     pmrScheduleDate: { startDate: \"2019-11-14T18:30:00.000Z\", endDate: \"2020-11-15T18:29:59.999Z\" }\n                    // }\n                    setPmrRange(data.data);\n                } else {\n                    setPmrRange([]);\n                }\n            })\n            .catch((error) => {\n                console.log('Error:', error.message);\n                setPmrRange([]);\n            });\n    };\n\n    const handlePrevPMR = (val) => {\n        if (val !== detail.id) {\n            let pmrRangeData = [...pmrRange];\n            pmrRangeData = pmrRangeData.filter((x) => x.id !== detail.id);\n            let prevPMR = {};\n            let attachmentArr = [];\n            if (pmrRange.length) {\n                // prevPMR = pmrRange.find(x => x.id === val)\n                pmrRange.map((x, index) => {\n                    if (x.attachments && x.attachments.length) {\n                        let obj = {\n                            id: x.id,\n                            pmrId: x.pmrId,\n                            path: x.attachments[0].path,\n                            index: index,\n                        };\n                        attachmentArr.push(obj);\n                    }\n                });\n\n                prevPMR = attachmentArr.find((x) => x.id === val);\n            }\n            if (attachmentArr.length) {\n                setAttachmentArr(attachmentArr);\n                setVisiblePrevPMR(true);\n\n                // this.setState({\n                //   attachmentArr: attachmentArr,\n                //   prevPMR: prevPMR,\n                //   visiblePrevPMR: true,\n                // });\n            }\n        }\n    };\n\n    const visibleNotesModal = (visible, record, str, data) => {\n        //notes modal close\n        setNotesModal(visible);\n        if (!visible && !pmrOrderNoteRef.current) {\n            //do not update notes count for pmr orders\n            setNotesFilterOptions({});\n            if (isUpsertButtonUI) {\n                let tempDetail = { ...detail }\n                tempDetail.notesCount = data\n                setDetail(tempDetail)\n            }\n        }\n        if (pmrOrderNoteRef.current)\n            pmrOrderNoteRef.current = false\n    };\n    const createNotesModal = (str) => {\n        //view notes modal\n        if (str === 'upsert')\n            setIsUpsertButtonUI(true);\n        let mergeNotesIds = [];\n        if (str === 'order') {\n            pmrOrderNoteRef.current = true\n            _.map(detail?.orderList, (dd) => {\n                mergeNotesIds.push(dd._id);\n            });\n        }\n\n        let options = {\n            query: {\n                find: {\n                    pmrId: str === 'order' ? undefined : detail?._id,\n                    category: TODO_CATEGORY.MED_REVIEW,\n                    residentId: detail?.patientId._id,\n                    subCategory: str === 'order' ? undefined : SUB_CATEGORY.NOTES.GENERAL,\n                    pmrOrderId: str === 'order' ? mergeNotesIds : undefined,\n                },\n                populate: [{ addedBy: [] }],\n            },\n        };\n        setNotesFilterOptions(options);\n        setNotesModal(true);\n    };\n\n    const handleUpdateOrder = (key, orderData) => {\n        let pmrDetail = { ...detail }\n        let index = pmrDetail.orderList.findIndex(x => x._id === orderData.orderId)\n        if (index >= 0) {\n            pmrDetail.orderList[index][key] = orderData.data\n            setDetail(pmrDetail)\n        }\n    }\n\n    const handleAllOrderUpdate = (orders) => {\n        let orderList = [...detail.orderList], orderIndex\n        orders.map((res, i) => {\n\n            if (res.cloneUpdated) {\n                orderIndex = orderList.findIndex((x) => x._id === res.cloneUpdated._id);\n                orderList[orderIndex] = res.cloneUpdated;\n            }\n            if (res.updated) {\n                orderIndex = orderList.findIndex((x) => x._id === res.updated._id);\n                orderList[orderIndex] = res.updated;\n            }\n            if (res.newOrder) {\n                //    To avoid duplication of new order\n                let orderIndexNew;\n                orderIndexNew = orderList.findIndex((x) => x._id === res.newOrder._id);\n                if (orderIndexNew >= 0) orderList[orderIndexNew] = res.newOrder;\n                else orderList.unshift(res.newOrder);\n            }\n        })\n        setDetail(oldDetail => {\n            return ({ ...oldDetail, orderList })\n        });\n        setOrderListLoader(false);\n    }\n\n    const handleAllNurseAck = () => {\n        setOrderListLoader(true);\n        let request = {\n            \"subCategory\": detail.subCategory,\n            \"pmrId\": detail._id,\n            \"nurseAcknowStatus\": true\n        }\n        axios({ ...nurseAllAck, data: request }).then(data => {\n            if (data.code === 'OK') {\n                Toast.success(data.message);\n                if (data.data?.length > 0) {\n                    handleAllOrderUpdate(data.data)\n                }\n            } else {\n                Toast.error(data.message);\n            }\n            setOrderListLoader(false);\n        }).catch(err => {\n            console.log(\"handleAllNurseAck -> err\", err)\n            setOrderListLoader(false);\n        })\n    }\n\n    const handleOrderRef = (orderId, orderRef) => {\n        allOrderRef.current = {\n            ...allOrderRef.current,\n            [orderId]: orderRef\n        }\n    }\n\n    return (\n        <>\n            <div className='prep_right_wrap'>\n                {loader ? (\n                    <Spin spinning={loader} str='center' />\n                ) : detail ? (\n                    <>\n                        <div className='box-border bb0'>\n                            <Header\n                                detail={detail} isEditMode={isEditMode}\n                                onPrevPMRChange={handlePrevPMR}\n                                prevPmrVal={setPrevPmrValData}\n                                attachmentArr={attachmentArr}\n                                onPerformTodo={handlePerformToDo}\n                                activeTodo={activeTodo}\n                            />\n                            <div className='resident-row'>\n                                <div className='left-resident-pro'>\n                                    <ResidentProfile detail={detail} />\n                                    <CareClause detail={detail} />\n                                </div>\n                                <OrderList\n                                    detail={detail} isEditMode={isEditMode}\n                                    orderListLoader={orderListLoader}\n                                    setAddModalVisible={setAddModalVisible}\n                                    onNurseAck={handleNurseAck}\n                                    onDrAck={handleDrAck}\n                                    onEditOrder={handleEditOrder}\n                                    onAddOrder={handleEditOrder}\n                                    onUpdateOrder={handleUpdateOrder}\n                                    // onAddOrder={handleAddOrder}\n                                    handleOrderRef={handleOrderRef}\n                                    query={query}\n                                    authUser={authUser}\n                                    onAllNurseAck={handleAllNurseAck}\n                                    activeTodo={activeTodo}\n                                />\n                            </div>\n                        </div>\n                        <div className=''>\n                            <Footer onCreateNotesModal={createNotesModal} detail={detail} />\n                        </div>\n                    </>\n                ) : <NoData />}\n            </div>\n\n            {!!addModalVisible && (\n                <AddNewPMRModal\n                    visible={addModalVisible}\n                    onClose={() => {\n                        orderData.current = null;\n                        setAddModalVisible(false);\n                        setStandingOrder(false)\n                        setOrderStatus(0)\n                    }}\n                    detail={detail}\n                    orderData={orderData.current}\n                    onNurseAck={handleNurseAck}\n                    onDrAck={handleDrAck}\n                    onAddOrder={handleAddOrder}\n                    standingOrder={standingOrder}\n                    authUser={authUser}\n                    orderStatus={orderStatus}\n                />\n            )}\n\n            {notesModal && (\n                <NotesModal\n                    visible={notesModal}\n                    filterOptions={notesFilterOptions}\n                    onCancel={(data) => visibleNotesModal(false, null, 'cancel', data)}\n                    // onOk={() => visibleNotesModal(false)}\n                    isUpsertList={isUpsertButtonUI}\n                    modalTitle={`View Note - ${detail?.pmrId}`}\n                    xRayNumber={detail?.pmrId}\n                    addData={{\n                        residentId: detail?.patientId._id,\n                        pmrId: detail?._id,\n                        category: TODO_CATEGORY.MED_REVIEW,\n                        subCategory: SUB_CATEGORY.NOTES.GENERAL\n                    }}\n                />\n            )}\n\n            {\n                !!editModeModal ?\n                    <Modal visible={!!editModeModal}\n                        footer={null} style={{ width: '400px' }}\n                        onCancel={() => setEditModeModal('')}>\n                        <div style={{ marginTop: '25px' }}>\n                            PMR is in edit mode and can be edit until {displayDateTime(editModeModal)}\n                        </div>\n                    </Modal> : null\n            }\n        </>\n    );\n};\nconst mapStateToProps = ({ auth }) => {\n    const { authUser, socket } = auth;\n    return { authUser, socket };\n};\nexport default withRouter(connect(mapStateToProps)(PmrContainer));\n"]},"metadata":{},"sourceType":"module"}