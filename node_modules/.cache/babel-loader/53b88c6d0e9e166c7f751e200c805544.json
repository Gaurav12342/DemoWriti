{"ast":null,"code":"import io from \"socket.io-client\";\nimport { SOURCE_MEDIUM } from '../../constants/common';\nimport { MODULE, BASE_URL } from './routes/common';\nimport { decryptData } from '../../util/Crypto';\nimport { isPharmacyUser } from '../../constants/User';\nlet homeId, tenantId, authUser, token;\nexport const isSetSocketQuery = () => {\n  homeId = localStorage.getItem('homeId');\n  tenantId = localStorage.getItem('tenantId');\n  authUser = decryptData(localStorage.getItem('user'));\n  token = JSON.parse(localStorage.getItem('token'));\n  return !!(homeId && tenantId && authUser && token);\n};\nlet baseURL = BASE_URL[MODULE.SET_UP];\nif (process.env.PUBLIC_URL === \"production\") baseURL = '/';\nexport default function SocketConfig() {\n  var _authUser, _authUser$pharmacyId, _authUser2, _authUser2$homeId, _authUser2$homeId$pha;\n\n  let url = io(baseURL, {\n    forceNew: true,\n    secure: true,\n    reconnection: true,\n    // rejectUnauthorized: false,\n    transports: [\"websocket\", \"polling\"],\n    query: {\n      authorization: token,\n      homeid: homeId,\n      homeidentifier: tenantId,\n      pharmacyid: isPharmacyUser(authUser.type) ? (_authUser = authUser) === null || _authUser === void 0 ? void 0 : (_authUser$pharmacyId = _authUser.pharmacyId) === null || _authUser$pharmacyId === void 0 ? void 0 : _authUser$pharmacyId._id : (_authUser2 = authUser) === null || _authUser2 === void 0 ? void 0 : (_authUser2$homeId = _authUser2.homeId) === null || _authUser2$homeId === void 0 ? void 0 : (_authUser2$homeId$pha = _authUser2$homeId.pharmacyId) === null || _authUser2$homeId$pha === void 0 ? void 0 : _authUser2$homeId$pha._id,\n      devicetype: SOURCE_MEDIUM[\"WEB\"]\n    }\n  });\n  console.log(\"SocketConfig -> url\", url);\n  url.addEventListener('error', function (event) {\n    console.log('WebSocket error: ', event);\n  });\n  url.addEventListener('close', function (event) {\n    console.log('The connection has been closed successfully.');\n  });\n  url.addEventListener('open', function (event) {\n    console.log('The connection has been closed successfully.');\n  });\n  url.addEventListener('message', function (event) {\n    console.log('The connection has been closed successfully.');\n  });\n  return url;\n}","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/services/socket/config.js"],"names":["io","SOURCE_MEDIUM","MODULE","BASE_URL","decryptData","isPharmacyUser","homeId","tenantId","authUser","token","isSetSocketQuery","localStorage","getItem","JSON","parse","baseURL","SET_UP","process","env","PUBLIC_URL","SocketConfig","url","forceNew","secure","reconnection","transports","query","authorization","homeid","homeidentifier","pharmacyid","type","pharmacyId","_id","devicetype","console","log","addEventListener","event"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAkC,iBAAlC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,IAAIC,MAAJ,EAAYC,QAAZ,EAAsBC,QAAtB,EAAgCC,KAAhC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClCJ,EAAAA,MAAM,GAAGK,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAT;AACAL,EAAAA,QAAQ,GAAGI,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX;AACAJ,EAAAA,QAAQ,GAAGJ,WAAW,CAACO,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAtB;AACAH,EAAAA,KAAK,GAAGI,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAR;AACA,SAAO,CAAC,EAAEN,MAAM,IAAIC,QAAV,IAAsBC,QAAtB,IAAkCC,KAApC,CAAR;AACH,CANM;AAQP,IAAIM,OAAO,GAAGZ,QAAQ,CAACD,MAAM,CAACc,MAAR,CAAtB;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,UAAZ,KAA2B,YAA/B,EACIJ,OAAO,GAAG,GAAV;AAEJ,eAAe,SAASK,YAAT,GAAwB;AAAA;;AACnC,MAAIC,GAAG,GAAGrB,EAAE,CAACe,OAAD,EAAU;AAClBO,IAAAA,QAAQ,EAAE,IADQ;AAElBC,IAAAA,MAAM,EAAE,IAFU;AAGlBC,IAAAA,YAAY,EAAE,IAHI;AAIlB;AACAC,IAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd,CALM;AAMlBC,IAAAA,KAAK,EAAE;AACHC,MAAAA,aAAa,EAAElB,KADZ;AAEHmB,MAAAA,MAAM,EAAEtB,MAFL;AAGHuB,MAAAA,cAAc,EAAEtB,QAHb;AAIHuB,MAAAA,UAAU,EAAEzB,cAAc,CAACG,QAAQ,CAACuB,IAAV,CAAd,gBAAgCvB,QAAhC,sEAAgC,UAAUwB,UAA1C,yDAAgC,qBAAsBC,GAAtD,iBAA4DzB,QAA5D,oEAA4D,WAAUF,MAAtE,+EAA4D,kBAAkB0B,UAA9E,0DAA4D,sBAA8BC,GAJnG;AAKHC,MAAAA,UAAU,EAAEjC,aAAa,CAAC,KAAD;AALtB;AANW,GAAV,CAAZ;AAcAkC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCf,GAAnC;AACAA,EAAAA,GAAG,CAACgB,gBAAJ,CAAqB,OAArB,EAA8B,UAAUC,KAAV,EAAiB;AAC3CH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCE,KAAjC;AACH,GAFD;AAIAjB,EAAAA,GAAG,CAACgB,gBAAJ,CAAqB,OAArB,EAA8B,UAAUC,KAAV,EAAiB;AAC3CH,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACH,GAFD;AAGAf,EAAAA,GAAG,CAACgB,gBAAJ,CAAqB,MAArB,EAA6B,UAAUC,KAAV,EAAiB;AAC1CH,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACH,GAFD;AAGAf,EAAAA,GAAG,CAACgB,gBAAJ,CAAqB,SAArB,EAAgC,UAAUC,KAAV,EAAiB;AAC7CH,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACH,GAFD;AAGA,SAAOf,GAAP;AACH","sourcesContent":["import io from \"socket.io-client\";\nimport { SOURCE_MEDIUM } from '../../constants/common';\nimport { MODULE, BASE_URL, } from './routes/common'\nimport { decryptData } from '../../util/Crypto';\nimport { isPharmacyUser } from '../../constants/User'\n\nlet homeId, tenantId, authUser, token\n\nexport const isSetSocketQuery = () => {\n    homeId = localStorage.getItem('homeId')\n    tenantId = localStorage.getItem('tenantId');\n    authUser = decryptData(localStorage.getItem('user'));\n    token = JSON.parse(localStorage.getItem('token'));\n    return !!(homeId && tenantId && authUser && token)\n}\n\nlet baseURL = BASE_URL[MODULE.SET_UP]\nif (process.env.PUBLIC_URL === \"production\")\n    baseURL = '/'\n\nexport default function SocketConfig() {\n    let url = io(baseURL, {\n        forceNew: true,\n        secure: true,\n        reconnection: true,\n        // rejectUnauthorized: false,\n        transports: [\"websocket\", \"polling\"],\n        query: {\n            authorization: token,\n            homeid: homeId,\n            homeidentifier: tenantId,\n            pharmacyid: isPharmacyUser(authUser.type) ? authUser?.pharmacyId?._id : authUser?.homeId?.pharmacyId?._id,\n            devicetype: SOURCE_MEDIUM[\"WEB\"],\n        }\n    });\n    console.log(\"SocketConfig -> url\", url)\n    url.addEventListener('error', function (event) {\n        console.log('WebSocket error: ', event);\n    })\n\n    url.addEventListener('close', function (event) {\n        console.log('The connection has been closed successfully.');\n    })\n    url.addEventListener('open', function (event) {\n        console.log('The connection has been closed successfully.');\n    })\n    url.addEventListener('message', function (event) {\n        console.log('The connection has been closed successfully.');\n    })\n    return url\n}\n"]},"metadata":{},"sourceType":"module"}