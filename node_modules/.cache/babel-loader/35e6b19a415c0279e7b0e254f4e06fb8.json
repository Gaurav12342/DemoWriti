{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/ReviewPopup/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport ReviewPopup from './ReviewPopup';\nimport { TODO_CATEGORY, X_RAY_TODO_TYPES } from '../../../../constants/todo';\nimport AddNoteModal from '../AddNote';\nimport NoteListModal from '../NotesList';\nimport { Toast } from '../../../../components/common/index';\n\nconst moment = require('moment');\n\nconst _ = require('lodash');\n\nfunction ReviewPopUpMain(props) {\n  const {\n    detail,\n    bodyPartsCodeList,\n    isDeleted,\n    editData,\n    isEdit,\n    changeNoteCount,\n    notesCount,\n    isVisible,\n    addedNotes,\n    authUser,\n    addNote,\n    onCancel,\n    onisUrgentChange,\n    onIsInfectionControl,\n    onUpdateNoteList,\n    residentName,\n    roomNo,\n    onOk,\n    onExtensionChange,\n    phoneNo,\n    extensionNo,\n    onPhoneNoChange,\n    deleteSelectedPart\n  } = props;\n  let title = `X-Ray Request - ${residentName || ''} (Room No ${roomNo || ''})`;\n  const [xRayDetail, setXRayDetail] = useState({});\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const [notesModal, setNotesModal] = useState(false);\n  const [showAddNoteModal, setShowAddNoteModal] = useState(false);\n  const [S_isDeleted, setIsDeleted] = useState({});\n  const [reasonText, setReasonText] = useState('');\n  const [doNotSubmit, setDoNotSubmit] = useState(false);\n  const [isChecked, setIsChecked] = useState(false);\n  const [isInfectionChecked, setIsInfectionChecked] = useState(false);\n  const [addNoteListShow, setAddNoteListShow] = useState(false);\n  const [isAddEditNote, setIsAddEditNote] = useState(false);\n  const [codeList, setCodeList] = useState([]);\n  useEffect(() => {\n    if (isEdit && editData && editData.isUrgent) {\n      setIsChecked(true);\n    }\n\n    if (isEdit && editData.reason && editData.reason.length > 0) {\n      setReasonText(editData.reason);\n    }\n\n    if (isEdit && editData && editData.isInfectionControl) {\n      setIsInfectionChecked(true);\n    }\n\n    updateState(detail);\n    setCodeList(bodyPartsCodeList);\n    setIsDeleted(isDeleted);\n  }, []);\n  useEffect(() => {\n    if (doNotSubmit) {\n      handleOk();\n    }\n  }, [doNotSubmit]);\n  useEffect(() => {\n    updateState(detail);\n  }, [detail]);\n  useEffect(() => {\n    setIsDeleted(isDeleted);\n  }, [isDeleted]);\n  useEffect(() => {\n    setCodeList(bodyPartsCodeList);\n  }, [bodyPartsCodeList]);\n\n  const updateState = detail => {\n    setXRayDetail(detail);\n  };\n\n  const createNotesModal = isAddNote => {\n    if (isEdit) {\n      let options = {\n        xRayRequestId: editData.id,\n        todoId: editData.id,\n        category: TODO_CATEGORY.X_RAY,\n        subCategory: X_RAY_TODO_TYPES.GENERAL\n      };\n      setNotesFilterOptions(options);\n\n      if (isAddNote) {\n        setIsAddEditNote(true);\n      } else {\n        setNotesModal(true);\n      }\n    } else {\n      if (isAddNote) {\n        setShowAddNoteModal(true);\n      } else {\n        setAddNoteListShow(true);\n      }\n    }\n  };\n\n  const handleAddNoteCount = () => {\n    changeNoteCountFun(false);\n  };\n\n  const hideAddNoteModal = noteText => {\n    if (noteText && typeof noteText === 'string' && noteText.length > 0) {\n      let tempNote = {\n        addedBy: {\n          id: authUser._id,\n          name: authUser.name,\n          type: authUser.type,\n          homeId: authUser.homeId\n        },\n        category: TODO_CATEGORY.X_RAY,\n        createdAt: moment().toISOString(),\n        note: noteText,\n        subCategory: X_RAY_TODO_TYPES.GENERAL\n      };\n      addNote(tempNote);\n    }\n\n    setShowAddNoteModal(false);\n  };\n\n  const handleCancel = () => {\n    setNotesModal(false);\n    setNotesFilterOptions({});\n  };\n\n  const handleOk = () => {\n    console.log(\"TCL: handleOk -> reasonText\", reasonText);\n\n    if (doNotSubmit && !isEdit) {\n      onPhoneNoChange(undefined);\n      onExtensionChange(undefined);\n    }\n\n    if (!doNotSubmit && isInfectionChecked && reasonText.length === 0) {\n      Toast.error('please Fill this indicate reason for the examination...  field');\n      return;\n    }\n\n    if (!doNotSubmit && isChecked && (!phoneNo || !extensionNo)) {\n      Toast.error('please Fill this Phone No. and Extension No.  field');\n      return;\n    }\n\n    let tempXRayDetail = _.cloneDeep(xRayDetail);\n\n    tempXRayDetail.bodyPartsCodeList = codeList;\n    let params = {\n      updatedDetail: tempXRayDetail,\n      reasonText: reasonText,\n      isInfectionChecked: isInfectionChecked\n    };\n    setXRayDetail(params);\n    console.log(\"TCL: handleOk -> params\", params);\n    onCancel(params, true, S_isDeleted, doNotSubmit);\n  };\n\n  const closeReview = () => {\n    setDoNotSubmit(true);\n  };\n\n  const removeCodeForList = removeList => {\n    let tempCodeList = codeList.filter(code => {\n      if (removeList.indexOf(code) < 0) {\n        return true;\n      } else {\n        removeList.splice(removeList.indexOf(code), 1);\n        return false;\n      }\n    });\n    setCodeList(tempCodeList);\n  };\n\n  const handleDelete = (key, subKey) => {\n    console.log('key, subKey => ', key, subKey);\n\n    if (isEdit && S_isDeleted.hasOwnProperty(key)) {\n      let tempIsDeleted = _.cloneDeep(S_isDeleted);\n\n      if (isDeleted[key] === false) {\n        tempIsDeleted[key] = true;\n      }\n\n      setIsDeleted(tempIsDeleted);\n    }\n\n    let {\n      selectedOptions,\n      selectedBodyParts\n    } = xRayDetail;\n\n    if (key && subKey) {\n      removeCodeForList(selectedOptions[key][subKey].bodyCodes);\n      delete selectedOptions[key][subKey];\n\n      if (Object.keys(selectedOptions[key]).length === 0) {\n        delete selectedOptions[key];\n        let tIndex = selectedBodyParts.indexOf(key);\n\n        if (tIndex >= 0) {\n          selectedBodyParts.splice(tIndex, 1);\n        }\n      }\n    } else {\n      removeCodeForList(selectedOptions[key].bodyCodes);\n      delete selectedOptions[key];\n    }\n\n    let partIndex = selectedBodyParts.indexOf(key);\n\n    if (key && !subKey && partIndex >= 0) {\n      selectedBodyParts.splice(partIndex, 1);\n    }\n\n    if (subKey && !selectedOptions.hasOwnProperty(key) && partIndex >= 0) {\n      selectedBodyParts.splice(partIndex, 1);\n    }\n\n    setXRayDetail({\n      selectedOptions,\n      selectedBodyParts\n    });\n    deleteSelectedPart(key, subKey);\n  };\n\n  const handleUrgent = () => {\n    setIsChecked(val => !val);\n    onisUrgentChange(!isChecked);\n  };\n\n  const handleInfectionControl = () => {\n    setIsInfectionChecked(val => !val);\n    onIsInfectionControl(!isInfectionChecked);\n  };\n\n  const handleReasonText = e => {\n    setReasonText(e.target.value);\n  };\n\n  const handelCancelAdd = (params = {}) => {\n    setIsAddEditNote(false);\n  };\n\n  const changeNoteCountFun = () => {\n    changeNoteCount();\n    handelCancelAdd();\n  };\n\n  const handleAddNoteListCancel = upadtedAddedNotes => {\n    if (upadtedAddedNotes && upadtedAddedNotes.length > 0) {\n      onUpdateNoteList(upadtedAddedNotes);\n    }\n\n    setAddNoteListShow(false);\n  };\n\n  const visibleNotesModal = () => {\n    setNotesModal(false);\n    setNotesFilterOptions(null);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(ReviewPopup, {\n    onCancel: onCancel,\n    onOk: handleOk,\n    isVisible: isVisible,\n    editData: editData,\n    title: title,\n    isEdit: isEdit,\n    xRayDetail: xRayDetail,\n    S_isDeleted: S_isDeleted,\n    isDeleted: isDeleted,\n    isInfectionChecked: isInfectionChecked,\n    handleInfectionControl: handleInfectionControl,\n    reasonText: reasonText,\n    handleReasonText: handleReasonText,\n    isChecked: isChecked,\n    onUrgent: handleUrgent,\n    onDelete: handleDelete,\n    onCreateNotesModal: createNotesModal,\n    notesCount: notesCount,\n    onExtensionChange: onExtensionChange,\n    onPhoneNoChange: onPhoneNoChange,\n    phoneNo: phoneNo,\n    extensionNo: extensionNo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }), showAddNoteModal ? /*#__PURE__*/React.createElement(AddNoteModal, {\n    isVisible: showAddNoteModal,\n    onCancel: hideAddNoteModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }) : null, addNoteListShow ? /*#__PURE__*/React.createElement(NoteListModal, {\n    isVisible: addNoteListShow,\n    addedNotes: addedNotes,\n    notesCount: notesCount,\n    onCancel: handleAddNoteListCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }) : null);\n}\n\nexport default ReviewPopUpMain;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/ReviewPopup/index.js"],"names":["React","useEffect","useState","ReviewPopup","TODO_CATEGORY","X_RAY_TODO_TYPES","AddNoteModal","NoteListModal","Toast","moment","require","_","ReviewPopUpMain","props","detail","bodyPartsCodeList","isDeleted","editData","isEdit","changeNoteCount","notesCount","isVisible","addedNotes","authUser","addNote","onCancel","onisUrgentChange","onIsInfectionControl","onUpdateNoteList","residentName","roomNo","onOk","onExtensionChange","phoneNo","extensionNo","onPhoneNoChange","deleteSelectedPart","title","xRayDetail","setXRayDetail","notesFilterOptions","setNotesFilterOptions","notesModal","setNotesModal","showAddNoteModal","setShowAddNoteModal","S_isDeleted","setIsDeleted","reasonText","setReasonText","doNotSubmit","setDoNotSubmit","isChecked","setIsChecked","isInfectionChecked","setIsInfectionChecked","addNoteListShow","setAddNoteListShow","isAddEditNote","setIsAddEditNote","codeList","setCodeList","isUrgent","reason","length","isInfectionControl","updateState","handleOk","createNotesModal","isAddNote","options","xRayRequestId","id","todoId","category","X_RAY","subCategory","GENERAL","handleAddNoteCount","changeNoteCountFun","hideAddNoteModal","noteText","tempNote","addedBy","_id","name","type","homeId","createdAt","toISOString","note","handleCancel","console","log","undefined","error","tempXRayDetail","cloneDeep","params","updatedDetail","closeReview","removeCodeForList","removeList","tempCodeList","filter","code","indexOf","splice","handleDelete","key","subKey","hasOwnProperty","tempIsDeleted","selectedOptions","selectedBodyParts","bodyCodes","Object","keys","tIndex","partIndex","handleUrgent","val","handleInfectionControl","handleReasonText","e","target","value","handelCancelAdd","handleAddNoteListCancel","upadtedAddedNotes","visibleNotesModal"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ReviewPopup from './ReviewPopup'\nimport { TODO_CATEGORY, X_RAY_TODO_TYPES } from '../../../../constants/todo'\nimport AddNoteModal from '../AddNote'\nimport NoteListModal from '../NotesList'\nimport { Toast } from '../../../../components/common/index'\n\nconst moment = require('moment')\nconst _ = require('lodash')\nfunction ReviewPopUpMain(props) {\n\n    const { detail, bodyPartsCodeList, isDeleted, editData, isEdit, changeNoteCount, notesCount, isVisible,\n        addedNotes, authUser, addNote, onCancel, onisUrgentChange, onIsInfectionControl, onUpdateNoteList,\n        residentName, roomNo, onOk, onExtensionChange, phoneNo, extensionNo, onPhoneNoChange, deleteSelectedPart\n    } = props\n    let title = `X-Ray Request - ${residentName || ''} (Room No ${roomNo || ''})`\n    const [xRayDetail, setXRayDetail] = useState({})\n    const [notesFilterOptions, setNotesFilterOptions] = useState({})\n    const [notesModal, setNotesModal] = useState(false)\n    const [showAddNoteModal, setShowAddNoteModal] = useState(false)\n    const [S_isDeleted, setIsDeleted] = useState({})\n    const [reasonText, setReasonText] = useState('')\n    const [doNotSubmit, setDoNotSubmit] = useState(false)\n    const [isChecked, setIsChecked] = useState(false)\n    const [isInfectionChecked, setIsInfectionChecked] = useState(false)\n    const [addNoteListShow, setAddNoteListShow] = useState(false)\n    const [isAddEditNote, setIsAddEditNote] = useState(false)\n    const [codeList, setCodeList] = useState([])\n\n    useEffect(() => {\n        if (isEdit && editData && editData.isUrgent) {\n            setIsChecked(true)\n        }\n        if (isEdit && editData.reason && editData.reason.length > 0) {\n            setReasonText(editData.reason)\n        }\n        if (isEdit && editData && editData.isInfectionControl) {\n            setIsInfectionChecked(true)\n        }\n        updateState(detail)\n        setCodeList(bodyPartsCodeList)\n        setIsDeleted(isDeleted)\n    }, [])\n\n    useEffect(() => {\n        if (doNotSubmit) {\n            handleOk()\n        }\n    }, [doNotSubmit])\n    useEffect(() => {\n        updateState(detail)\n    }, [detail])\n\n    useEffect(() => {\n        setIsDeleted(isDeleted)\n    }, [isDeleted])\n\n    useEffect(() => {\n        setCodeList(bodyPartsCodeList)\n    }, [bodyPartsCodeList])\n\n    const updateState = (detail) => {\n        setXRayDetail(detail)\n    }\n\n    const createNotesModal = (isAddNote) => {\n        if (isEdit) {\n            let options = {\n                xRayRequestId: editData.id,\n                todoId: editData.id,\n                category: TODO_CATEGORY.X_RAY,\n                subCategory: X_RAY_TODO_TYPES.GENERAL,\n            };\n            setNotesFilterOptions(options)\n            if (isAddNote) {\n                setIsAddEditNote(true)\n            }\n            else {\n                setNotesModal(true)\n            }\n\n        }\n        else {\n            if (isAddNote) {\n                setShowAddNoteModal(true)\n            }\n            else {\n                setAddNoteListShow(true)\n            }\n        }\n    };\n    const handleAddNoteCount = () => {\n        changeNoteCountFun(false)\n    }\n    const hideAddNoteModal = noteText => {\n\n        if (noteText && typeof noteText === 'string' && noteText.length > 0) {\n            let tempNote = {\n                addedBy: {\n                    id: authUser._id,\n                    name: authUser.name,\n                    type: authUser.type,\n                    homeId: authUser.homeId\n                },\n                category: TODO_CATEGORY.X_RAY,\n                createdAt: moment().toISOString(),\n                note: noteText,\n                subCategory: X_RAY_TODO_TYPES.GENERAL,\n            }\n            addNote(tempNote)\n        }\n        setShowAddNoteModal(false)\n    }\n    const handleCancel = () => {\n        setNotesModal(false)\n        setNotesFilterOptions({})\n    };\n    const handleOk = () => {\n        console.log(\"TCL: handleOk -> reasonText\", reasonText)\n        if (doNotSubmit && !isEdit) {\n            onPhoneNoChange(undefined)\n            onExtensionChange(undefined)\n        }\n        if (!doNotSubmit && isInfectionChecked && reasonText.length === 0) {\n            Toast.error('please Fill this indicate reason for the examination...  field')\n            return\n        }\n\n        if (!doNotSubmit && isChecked && (!phoneNo || !extensionNo)) {\n            Toast.error('please Fill this Phone No. and Extension No.  field')\n            return\n        }\n        let tempXRayDetail = _.cloneDeep(xRayDetail)\n        tempXRayDetail.bodyPartsCodeList = codeList\n        let params = {\n            updatedDetail: tempXRayDetail,\n            reasonText: reasonText,\n            isInfectionChecked: isInfectionChecked\n        }\n        setXRayDetail(params)\n        console.log(\"TCL: handleOk -> params\", params)\n        onCancel(params, true, S_isDeleted, doNotSubmit)\n    }\n    const closeReview = () => {\n        setDoNotSubmit(true)\n    }\n    const removeCodeForList = (removeList) => {\n        let tempCodeList = codeList.filter(code => {\n            if (removeList.indexOf(code) < 0) {\n                return true\n            }\n            else {\n                removeList.splice(removeList.indexOf(code), 1)\n                return false\n            }\n        })\n        setCodeList(tempCodeList)\n    }\n    const handleDelete = (key, subKey) => {\n        console.log('key, subKey => ', key, subKey)\n        if (isEdit && S_isDeleted.hasOwnProperty(key)) {\n            let tempIsDeleted = _.cloneDeep(S_isDeleted)\n            if (isDeleted[key] === false) {\n                tempIsDeleted[key] = true\n            }\n            setIsDeleted(tempIsDeleted)\n        }\n        let { selectedOptions, selectedBodyParts } = xRayDetail\n        if (key && subKey) {\n            removeCodeForList(selectedOptions[key][subKey].bodyCodes)\n            delete selectedOptions[key][subKey]\n            if (Object.keys(selectedOptions[key]).length === 0) {\n                delete selectedOptions[key]\n                let tIndex = selectedBodyParts.indexOf(key)\n                if (tIndex >= 0) {\n                    selectedBodyParts.splice(tIndex, 1)\n                }\n            }\n        }\n        else {\n            removeCodeForList(selectedOptions[key].bodyCodes)\n            delete selectedOptions[key]\n        }\n        let partIndex = selectedBodyParts.indexOf(key)\n        if (key && !subKey && partIndex >= 0) {\n            selectedBodyParts.splice(partIndex, 1)\n        }\n        if (subKey && !selectedOptions.hasOwnProperty(key) && partIndex >= 0) {\n            selectedBodyParts.splice(partIndex, 1)\n        }\n        setXRayDetail({\n            selectedOptions,\n            selectedBodyParts,\n        })\n\n        deleteSelectedPart(key, subKey)\n    }\n    const handleUrgent = () => {\n        setIsChecked(val => !val)\n        onisUrgentChange(!isChecked)\n    }\n    const handleInfectionControl = () => {\n        setIsInfectionChecked(val => !val)\n        onIsInfectionControl(!isInfectionChecked)\n    }\n    const handleReasonText = (e) => {\n        setReasonText(e.target.value)\n    }\n    const handelCancelAdd = (params = {}) => {\n        setIsAddEditNote(false)\n    }\n    const changeNoteCountFun = () => {\n        changeNoteCount()\n        handelCancelAdd()\n    }\n    const handleAddNoteListCancel = (upadtedAddedNotes) => {\n        if (upadtedAddedNotes && upadtedAddedNotes.length > 0) {\n            onUpdateNoteList(upadtedAddedNotes)\n        }\n        setAddNoteListShow(false)\n    }\n    const visibleNotesModal = () => {\n        setNotesModal(false)\n        setNotesFilterOptions(null)\n    }\n    return <> <ReviewPopup\n        onCancel={onCancel}\n        onOk={handleOk}\n        isVisible={isVisible}\n        editData={editData}\n        title={title}\n        isEdit={isEdit}\n        xRayDetail={xRayDetail}\n        S_isDeleted={S_isDeleted}\n        isDeleted={isDeleted}\n        isInfectionChecked={isInfectionChecked}\n        handleInfectionControl={handleInfectionControl}\n        reasonText={reasonText}\n        handleReasonText={handleReasonText}\n        isChecked={isChecked}\n        onUrgent={handleUrgent}\n        onDelete={handleDelete}\n        onCreateNotesModal={createNotesModal}\n        notesCount={notesCount}\n        onExtensionChange={onExtensionChange}\n        onPhoneNoChange={onPhoneNoChange}\n        phoneNo={phoneNo}\n        extensionNo={extensionNo}\n    />\n        {\n            showAddNoteModal ? (\n                <AddNoteModal\n                    isVisible={showAddNoteModal}\n                    onCancel={hideAddNoteModal}\n                />\n            ) : null\n        }\n        {\n            addNoteListShow ?\n                <NoteListModal\n                    isVisible={addNoteListShow}\n                    addedNotes={addedNotes}\n                    notesCount={notesCount}\n                    onCancel={handleAddNoteListCancel}\n                /> : null\n        }\n    </>\n}\nexport default ReviewPopUpMain"]},"metadata":{},"sourceType":"module"}