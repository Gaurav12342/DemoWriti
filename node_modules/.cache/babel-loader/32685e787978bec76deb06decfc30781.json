{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/components/common/Upload/FilePreview.js\";\nimport React, { useEffect, useState } from 'react';\nimport { FILE_TYPES, extensions } from './Uploader';\n\nconst FilePreview = ({\n  file\n}) => {\n  // console.log('file => ',file)\n  const [imgData, setImgData] = useState(null);\n  useEffect(() => {\n    const reader = new FileReader();\n\n    reader.onload = e => setImgData(e.target.result);\n\n    if (file.isValid && !file.isDefault) {\n      reader.readAsDataURL(file);\n    }\n  }, [file]);\n\n  const getFileType = file => {\n    let fileType = (file === null || file === void 0 ? void 0 : file.name) ? file.name.split('.').pop() : null;\n\n    if (fileType && !file.isDefault) {\n      for (let [key, value] of Object.entries(FILE_TYPES)) {\n        if (value.includes(file.type)) {\n          fileType = key;\n          break;\n        }\n      }\n    } else if (!!file.isDefault) {\n      for (let [key, value] of Object.entries(extensions)) {\n        if (value.includes('.' + fileType)) {\n          fileType = key;\n          break;\n        }\n      }\n    }\n\n    return fileType;\n  };\n\n  let fileType = getFileType(file);\n  return fileType == 'IMAGE' ? /*#__PURE__*/React.createElement(\"img\", {\n    src: file.isDefault ? file.path : imgData,\n    height: 100,\n    width: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"previewBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \".\", fileType));\n};\n\nexport default FilePreview;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/components/common/Upload/FilePreview.js"],"names":["React","useEffect","useState","FILE_TYPES","extensions","FilePreview","file","imgData","setImgData","reader","FileReader","onload","e","target","result","isValid","isDefault","readAsDataURL","getFileType","fileType","name","split","pop","key","value","Object","entries","includes","type","path"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,YAAvC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAiBC,CAAD,IAAOJ,UAAU,CAACI,CAAC,CAACC,MAAF,CAASC,MAAV,CAAjC;;AACA,QAAIR,IAAI,CAACS,OAAL,IAAgB,CAACT,IAAI,CAACU,SAA1B,EAAqC;AACnCP,MAAAA,MAAM,CAACQ,aAAP,CAAqBX,IAArB;AACD;AACF,GANQ,EAMN,CAACA,IAAD,CANM,CAAT;;AAQA,QAAMY,WAAW,GAAIZ,IAAD,IAAU;AAC5B,QAAIa,QAAQ,GAAG,CAAAb,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEc,IAAN,IAAad,IAAI,CAACc,IAAL,CAAUC,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAAb,GAA0C,IAAzD;;AACA,QAAIH,QAAQ,IAAI,CAACb,IAAI,CAACU,SAAtB,EAAiC;AAC/B,WAAK,IAAI,CAACO,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAevB,UAAf,CAAzB,EAAqD;AACnD,YAAIqB,KAAK,CAACG,QAAN,CAAerB,IAAI,CAACsB,IAApB,CAAJ,EAA+B;AAC7BT,UAAAA,QAAQ,GAAGI,GAAX;AACA;AACD;AACF;AACF,KAPD,MAOO,IAAI,CAAC,CAACjB,IAAI,CAACU,SAAX,EAAsB;AAC3B,WAAK,IAAI,CAACO,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAetB,UAAf,CAAzB,EAAqD;AACnD,YAAIoB,KAAK,CAACG,QAAN,CAAe,MAAMR,QAArB,CAAJ,EAAoC;AAClCA,UAAAA,QAAQ,GAAGI,GAAX;AACA;AACD;AACF;AACF;;AACD,WAAOJ,QAAP;AACD,GAlBD;;AAoBA,MAAIA,QAAQ,GAAGD,WAAW,CAACZ,IAAD,CAA1B;AACA,SAAOa,QAAQ,IAAI,OAAZ,gBACL;AAAK,IAAA,GAAG,EAAEb,IAAI,CAACU,SAAL,GAAiBV,IAAI,CAACuB,IAAtB,GAA6BtB,OAAvC;AAAgD,IAAA,MAAM,EAAE,GAAxD;AAA6D,IAAA,KAAK,EAAE,GAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAGL;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQY,QAAR,CADF,CAHF;AAOD,CAxCD;;AAyCA,eAAed,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FILE_TYPES, extensions } from './Uploader';\n\nconst FilePreview = ({ file }) => {\n  // console.log('file => ',file)\n  const [imgData, setImgData] = useState(null);\n\n  useEffect(() => {\n    const reader = new FileReader();\n    reader.onload = (e) => setImgData(e.target.result);\n    if (file.isValid && !file.isDefault) {\n      reader.readAsDataURL(file);\n    }\n  }, [file]);\n\n  const getFileType = (file) => {\n    let fileType = file?.name ? file.name.split('.').pop() : null;\n    if (fileType && !file.isDefault) {\n      for (let [key, value] of Object.entries(FILE_TYPES)) {\n        if (value.includes(file.type)) {\n          fileType = key;\n          break;\n        }\n      }\n    } else if (!!file.isDefault) {\n      for (let [key, value] of Object.entries(extensions)) {\n        if (value.includes('.' + fileType)) {\n          fileType = key;\n          break;\n        }\n      }\n    }\n    return fileType;\n  };\n\n  let fileType = getFileType(file);\n  return fileType == 'IMAGE' ? (\n    <img src={file.isDefault ? file.path : imgData} height={100} width={100} />\n  ) : (\n    <div className='previewBox'>\n      <span>.{fileType}</span>\n    </div>\n  );\n};\nexport default FilePreview;\n"]},"metadata":{},"sourceType":"module"}