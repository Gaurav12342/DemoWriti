{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/index.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport XRayDetail from './mobile-xray.js';\nimport MobileXRaySidebar from './sidebar.js';\nimport axios from '../../../services/api/config';\nimport { createForm } from 'rc-form';\nimport { connect } from \"react-redux\";\nimport { getPatientDetail } from '../../../services/api/routes/user';\nimport { xRayListing, requisitionRequest } from '../../../services/api/routes/x_ray';\nimport { Toast } from '../../../components/common/Toast';\nimport queryString from \"query-string\";\nimport { X_RAY_FORM_TYPE } from '../../../constants/xray';\nimport X_Ray_Json from '../JSON FIle/xRay.json';\nimport UltraSoundJson from '../JSON FIle/Ultrasound';\nimport UtilService, { isKeyExist } from '../../../util/common';\nimport { getAgeByDOB } from '../../../util/moment';\nimport routes from \"../../../routes/constant\";\n\nconst _ = require('lodash');\n\nfunction readTextFile(file, callback) {\n  var rawFile = new XMLHttpRequest();\n  rawFile.open(\"GET\", file, true);\n\n  rawFile.onerror = function (err) {\n    console.log('err', err);\n    callback(null);\n  };\n\n  rawFile.onreadystatechange = function () {\n    console.log('rawFile => ', rawFile);\n\n    if (rawFile.readyState === 4 && rawFile.status == \"200\") {\n      callback(rawFile.responseText);\n    }\n\n    callback(null);\n  };\n\n  rawFile.send(null);\n}\n\nfunction MobileXRay(props) {\n  const {\n    authUser\n  } = props;\n  const [residentData, setResidentData] = useState({});\n  const [imagingDiagnosticInfo, setImagingDiagnosticInfo] = useState({});\n  const [doctorId, setDoctorId] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [jsonData, setJsonData] = useState({});\n  const [activeTab, setActiveTab] = useState(undefined);\n  const [imagingJson, setImagingJson] = useState(undefined);\n  const [isEdit, setIsEdit] = useState(false);\n  const [editData, setEditData] = useState(undefined);\n  const [residentAge, setResidentAge] = useState(0);\n  const [notesCount, setNotesCount] = useState(0);\n  useEffect(() => {\n    loadPage();\n  }, []);\n  useEffect(() => {\n    console.log('editData => ', editData);\n\n    if (!!editData && !!editData.residentId) {\n      let residentId = editData.residentId;\n\n      if (residentId) {\n        fetchResidentData(residentId);\n      }\n    }\n  }, [editData]);\n  useEffect(() => {\n    if (loading) {\n      setLoading(false);\n    }\n  }, [loading]);\n\n  const loadPage = () => {\n    setLoading(true);\n    const query = queryString.parse(props.location.search);\n    const queryType = query.type || query.formType;\n\n    if (queryType) {\n      let tempType = parseInt(queryType);\n      fetchImagingData(tempType);\n    }\n\n    if (query.residentId) {\n      fetchResidentData(query.residentId);\n    }\n\n    if (query.doctorId) {\n      setDoctorId(query.doctorId);\n    }\n\n    if (query.isEdit && query.requisitionId) {\n      let tempType = undefined;\n\n      if (queryType) {\n        tempType = parseInt(queryType);\n        fetchImagingData(tempType);\n      }\n\n      setIsEdit(true);\n      fetchRequisitionData(query.requisitionId);\n    } // if (!query.isEdit) {\n    //   setActiveTab(X_RAY_FORM_TYPE.X_RAY.toString())\n    // }\n\n\n    setActiveTab(queryType);\n\n    if (authUser && authUser.homeId.imagingAndDiagnosticId) {\n      setImagingDiagnosticInfo(authUser.homeId.imagingAndDiagnosticId);\n    }\n  };\n\n  const fetchImagingData = type => {\n    if (authUser && authUser.homeId.imagingAndDiagnosticId && authUser.homeId.imagingAndDiagnosticId.imagingDiagnosticJSON) {\n      let jsonPaths = authUser.homeId.imagingAndDiagnosticId.imagingDiagnosticJSON;\n\n      if (type === X_RAY_FORM_TYPE.X_RAY) {\n        if (jsonPaths.xray) {\n          readTextFile(jsonPaths.xray, function (text) {\n            if (text) {\n              let xrayJsonData = _.cloneDeep(JSON.parse(text));\n\n              modifyJsonData(xrayJsonData);\n            } else {\n              modifyJsonData(X_Ray_Json);\n            }\n          });\n        }\n      }\n\n      if (type === X_RAY_FORM_TYPE.MOBILE_ULTRASOUND) {\n        if (jsonPaths.ultrasound) {\n          readTextFile(jsonPaths.ultrasound, function (text) {\n            if (text) {\n              let ultraSoundJsonData = _.cloneDeep(JSON.parse(text));\n\n              modifyJsonData(ultraSoundJsonData);\n            } else {\n              modifyJsonData(UltraSoundJson);\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const fetchRequisitionData = requisitionId => {\n    axios({ ...xRayListing,\n      data: {\n        id: requisitionId,\n        query: {\n          find: {\n            _id: requisitionId\n          },\n          populate: [{\n            selectedBodyParts: []\n          }, {\n            notes: []\n          }]\n        }\n      }\n    }).then(({\n      data\n    }) => {\n      if (data.code === 'OK') {\n        if (data.data.list.length && data.data.list[0]) {\n          setEditData(data.data.list[0]);\n\n          if (data.data.list[0].notesCount) {\n            handleNotesCount(data.data.list[0].notesCount);\n          }\n\n          setDoctorId(data.data.list[0].physicianId);\n        }\n      }\n    });\n  };\n\n  const handleNotesCount = count => {\n    setNotesCount(count);\n  };\n\n  const handleLoading = action => {\n    setLoading(action);\n  };\n\n  const fetchResidentData = residentId => {\n    let {\n      method,\n      url,\n      baseURL\n    } = getPatientDetail;\n    url = url + \"/\" + residentId;\n    axios({\n      method,\n      url,\n      baseURL\n    }).then(({\n      data\n    }) => {\n      if (data.code === 'OK') {\n        let tempData = data.data;\n\n        if (tempData.addresses && tempData.addresses[0]) {\n          let address = tempData.addresses[0];\n          let tempStr = `${address.line1 || ' '},${address.line2 || ' '}`;\n          tempStr = tempStr + `,${address.city || ' '},${address.province || ' '},${address.pincode || ' '}`;\n          tempData.customAddress = tempStr;\n        } else {\n          tempData.customAddress = ' ';\n        }\n\n        tempData.roomNo = tempData.room || ' ';\n        tempData.customHc = tempData.hc || ' ';\n        tempData.customVc = tempData.vc || ' ';\n        let tempAge = 0;\n\n        if (tempData.dob.length > 0) {\n          tempAge = getAgeByDOB(tempData.dob);\n        }\n\n        setResidentData(tempData);\n        setResidentAge(tempAge);\n      }\n    });\n  };\n\n  const modifyJsonData = jsonData => {\n    let tempJsonData = _.cloneDeep(jsonData);\n\n    let jsonGroupBy = {};\n    tempJsonData.forEach(obj => {\n      obj = isLeftRightBothOption(obj);\n\n      if (jsonGroupBy[obj.bodyPartNo]) {\n        jsonGroupBy[obj.bodyPartNo].push({ ...obj\n        });\n      } else {\n        jsonGroupBy[obj.bodyPartNo] = [{ ...obj\n        }];\n      }\n    });\n    setJsonData(jsonGroupBy);\n    setImagingJson(tempJsonData);\n  };\n\n  const isLeftRightBothOption = obj => {\n    if (obj.optionItems && obj.optionItems.length > 0) {\n      obj.optionItems.some(current => {\n        if (current.viewType === 4) {\n          obj.isLRBOption = true;\n          return true;\n        }\n      });\n    }\n\n    return obj;\n  };\n\n  const redirectToXrayListing = () => {\n    return props.history.push({\n      pathname: routes.xRayList.path\n    });\n  };\n\n  const handleTabChange = tab => {\n    setActiveTab(tab);\n  };\n\n  const submitRequisitionRequest = async data => {\n    setBtnLoading(true);\n    console.log('data => ', data);\n    axios({ ...requisitionRequest,\n      data // headers: {\n      //   Authorization: \"JWT \" + JSON.parse(localStorage.getItem('token')),\n      //   homeIdentifier: authUser.homeId.homeIdentifier,\n      //   devicetype: 1\n      // }\n\n    }).then(data => {\n      if (data.statusText === 'OK') {\n        Toast.success(data.data.message);\n        redirectToXrayListing();\n      }\n    }).catch(err => {\n      console.log(\"err => \", err);\n    }).finally(() => {\n      setBtnLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"xray-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MobileXRaySidebar, {\n    imagingInfo: imagingDiagnosticInfo,\n    residentData: residentData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XRayDetail, {\n    btnLoading: btnLoading,\n    loading: loading,\n    jsonData: jsonData,\n    imagingJson: imagingJson,\n    isEdit: isEdit,\n    roomNo: residentData.room || '',\n    residentAge: residentAge,\n    residentName: residentData && residentData.lastName ? `${residentData.lastName},${residentData.firstName}` : '',\n    activeTab: activeTab,\n    authUser: authUser,\n    residentData: residentData,\n    editDatas: editData,\n    imagingInfo: imagingDiagnosticInfo,\n    setNotesCount: setNotesCount,\n    doctorId: doctorId,\n    setBtnLoading: setBtnLoading,\n    notesCount: notesCount,\n    redirectToXrayListing: redirectToXrayListing,\n    onSubmit: submitRequisitionRequest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }\n  }));\n}\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser\n  } = auth;\n  return {\n    authUser\n  };\n};\n\nexport default connect(mapStateToProps)(createForm()(MobileXRay));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/index.js"],"names":["React","Component","useState","useEffect","XRayDetail","MobileXRaySidebar","axios","createForm","connect","getPatientDetail","xRayListing","requisitionRequest","Toast","queryString","X_RAY_FORM_TYPE","X_Ray_Json","UltraSoundJson","UtilService","isKeyExist","getAgeByDOB","routes","_","require","readTextFile","file","callback","rawFile","XMLHttpRequest","open","onerror","err","console","log","onreadystatechange","readyState","status","responseText","send","MobileXRay","props","authUser","residentData","setResidentData","imagingDiagnosticInfo","setImagingDiagnosticInfo","doctorId","setDoctorId","undefined","loading","setLoading","btnLoading","setBtnLoading","jsonData","setJsonData","activeTab","setActiveTab","imagingJson","setImagingJson","isEdit","setIsEdit","editData","setEditData","residentAge","setResidentAge","notesCount","setNotesCount","loadPage","residentId","fetchResidentData","query","parse","location","search","queryType","type","formType","tempType","parseInt","fetchImagingData","requisitionId","fetchRequisitionData","homeId","imagingAndDiagnosticId","imagingDiagnosticJSON","jsonPaths","X_RAY","xray","text","xrayJsonData","cloneDeep","JSON","modifyJsonData","MOBILE_ULTRASOUND","ultrasound","ultraSoundJsonData","data","id","find","_id","populate","selectedBodyParts","notes","then","code","list","length","handleNotesCount","physicianId","count","handleLoading","action","method","url","baseURL","tempData","addresses","address","tempStr","line1","line2","city","province","pincode","customAddress","roomNo","room","customHc","hc","customVc","vc","tempAge","dob","tempJsonData","jsonGroupBy","forEach","obj","isLeftRightBothOption","bodyPartNo","push","optionItems","some","current","viewType","isLRBOption","redirectToXrayListing","history","pathname","xRayList","path","handleTabChange","tab","submitRequisitionRequest","statusText","success","message","catch","finally","lastName","firstName","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport XRayDetail from './mobile-xray.js';\nimport MobileXRaySidebar from './sidebar.js';\nimport axios from '../../../services/api/config'\nimport { createForm } from 'rc-form'\nimport { connect } from \"react-redux\";\nimport { getPatientDetail } from '../../../services/api/routes/user'\nimport { xRayListing, requisitionRequest } from '../../../services/api/routes/x_ray'\nimport { Toast } from '../../../components/common/Toast'\nimport queryString from \"query-string\";\nimport { X_RAY_FORM_TYPE } from '../../../constants/xray'\nimport X_Ray_Json from '../JSON FIle/xRay.json'\nimport UltraSoundJson from '../JSON FIle/Ultrasound'\nimport UtilService, { isKeyExist } from '../../../util/common'\nimport { getAgeByDOB } from '../../../util/moment'\nimport routes from \"../../../routes/constant\";\n\nconst _ = require('lodash')\n\nfunction readTextFile(file, callback) {\n\n  var rawFile = new XMLHttpRequest();\n  rawFile.open(\"GET\", file, true);\n  rawFile.onerror = function (err) {\n    console.log('err', err);\n    callback(null);\n  }\n  rawFile.onreadystatechange = function () {\n    console.log('rawFile => ', rawFile)\n    if (rawFile.readyState === 4 && rawFile.status == \"200\") {\n      callback(rawFile.responseText);\n    }\n    callback(null);\n  }\n  rawFile.send(null);\n}\nfunction MobileXRay(props) {\n\n  const { authUser } = props\n  const [residentData, setResidentData] = useState({})\n  const [imagingDiagnosticInfo, setImagingDiagnosticInfo] = useState({})\n  const [doctorId, setDoctorId] = useState(undefined)\n  const [loading, setLoading] = useState(false)\n  const [btnLoading, setBtnLoading] = useState(false)\n  const [jsonData, setJsonData] = useState({})\n  const [activeTab, setActiveTab] = useState(undefined)\n  const [imagingJson, setImagingJson] = useState(undefined)\n  const [isEdit, setIsEdit] = useState(false)\n  const [editData, setEditData] = useState(undefined)\n  const [residentAge, setResidentAge] = useState(0)\n  const [notesCount, setNotesCount] = useState(0)\n\n\n  useEffect(() => {\n    loadPage()\n  }, [])\n\n  useEffect(() => {\n    console.log('editData => ', editData)\n    if (!!editData && !!editData.residentId) {\n      let residentId = editData.residentId\n      if (residentId) {\n        fetchResidentData(residentId)\n      }\n    }\n  }, [editData])\n\n  useEffect(() => {\n    if (loading) {\n      setLoading(false)\n    }\n  }, [loading])\n\n  const loadPage = () => {\n\n    setLoading(true)\n    const query = queryString.parse(props.location.search)\n    const queryType = query.type || query.formType\n    if (queryType) {\n      let tempType = parseInt(queryType)\n      fetchImagingData(tempType)\n    }\n\n    if (query.residentId) {\n      fetchResidentData(query.residentId)\n    }\n    if (query.doctorId) {\n      setDoctorId(query.doctorId)\n    }\n\n    if (query.isEdit && query.requisitionId) {\n      let tempType = undefined\n      if (queryType) {\n        tempType = parseInt(queryType)\n        fetchImagingData(tempType)\n      }\n      setIsEdit(true)\n\n      fetchRequisitionData(query.requisitionId)\n    }\n    // if (!query.isEdit) {\n    //   setActiveTab(X_RAY_FORM_TYPE.X_RAY.toString())\n    // }\n    setActiveTab(queryType)\n    if (authUser && authUser.homeId.imagingAndDiagnosticId) {\n      setImagingDiagnosticInfo(authUser.homeId.imagingAndDiagnosticId)\n    }\n  }\n  const fetchImagingData = (type) => {\n    if (authUser &&\n      authUser.homeId.imagingAndDiagnosticId &&\n      authUser.homeId.imagingAndDiagnosticId.imagingDiagnosticJSON) {\n      let jsonPaths = authUser.homeId.imagingAndDiagnosticId.imagingDiagnosticJSON;\n\n      if (type === X_RAY_FORM_TYPE.X_RAY) {\n        if (jsonPaths.xray) {\n          readTextFile(jsonPaths.xray, function (text) {\n            if (text) {\n              let xrayJsonData = _.cloneDeep(JSON.parse(text))\n              modifyJsonData(xrayJsonData)\n            } else {\n              modifyJsonData(X_Ray_Json)\n            }\n          });\n        }\n      }\n      if (type === X_RAY_FORM_TYPE.MOBILE_ULTRASOUND) {\n        if (jsonPaths.ultrasound) {\n          readTextFile(jsonPaths.ultrasound, function (text) {\n            if (text) {\n              let ultraSoundJsonData = _.cloneDeep(JSON.parse(text))\n              modifyJsonData(ultraSoundJsonData)\n            } else {\n              modifyJsonData(UltraSoundJson)\n            }\n          });\n        }\n      }\n    }\n  }\n  const fetchRequisitionData = (requisitionId) => {\n    axios({\n      ...xRayListing, data: {\n        id: requisitionId,\n        query: {\n          find: {\n            _id: requisitionId\n          },\n          populate: [{ selectedBodyParts: [] }, { notes: [] }]\n        }\n      }\n    }).then(({ data }) => {\n      if (data.code === 'OK') {\n        if (data.data.list.length && data.data.list[0]) {\n          setEditData(data.data.list[0])\n\n          if (data.data.list[0].notesCount) {\n            handleNotesCount(data.data.list[0].notesCount)\n          }\n\n          setDoctorId(data.data.list[0].physicianId)\n        }\n      }\n    })\n  }\n  const handleNotesCount = (count) => {\n    setNotesCount(count)\n  }\n  const handleLoading = (action) => {\n    setLoading(action)\n  }\n  const fetchResidentData = (residentId) => {\n    let { method, url, baseURL } = getPatientDetail\n    url = url + \"/\" + residentId\n    axios({ method, url, baseURL }).then(({ data }) => {\n      if (data.code === 'OK') {\n        let tempData = data.data\n        if (tempData.addresses && tempData.addresses[0]) {\n          let address = tempData.addresses[0]\n          let tempStr = `${address.line1 || ' '},${address.line2 || ' '}`\n          tempStr = tempStr + `,${address.city || ' '},${address.province || ' '},${address.pincode || ' '}`\n          tempData.customAddress = tempStr\n        }\n        else {\n          tempData.customAddress = ' '\n        }\n        tempData.roomNo = tempData.room || ' '\n        tempData.customHc = tempData.hc || ' '\n        tempData.customVc = tempData.vc || ' '\n        let tempAge = 0\n        if (tempData.dob.length > 0) {\n          tempAge = getAgeByDOB(tempData.dob)\n        }\n        setResidentData(tempData)\n        setResidentAge(tempAge)\n      }\n    })\n  }\n  const modifyJsonData = (jsonData) => {\n\n    let tempJsonData = _.cloneDeep(jsonData)\n    let jsonGroupBy = {}\n\n    tempJsonData.forEach(obj => {\n      obj = isLeftRightBothOption(obj)\n      if (jsonGroupBy[obj.bodyPartNo]) {\n        jsonGroupBy[obj.bodyPartNo].push({ ...obj })\n      }\n      else {\n        jsonGroupBy[obj.bodyPartNo] = [{ ...obj }]\n      }\n    })\n\n    setJsonData(jsonGroupBy)\n    setImagingJson(tempJsonData)\n  }\n  const isLeftRightBothOption = (obj) => {\n    if (obj.optionItems && obj.optionItems.length > 0) {\n      obj.optionItems.some(current => {\n        if (current.viewType === 4) {\n          obj.isLRBOption = true\n          return true\n        }\n      })\n    }\n    return obj\n  }\n  const redirectToXrayListing = () => {\n    return props.history.push({\n      pathname: routes.xRayList.path\n    })\n  }\n  const handleTabChange = (tab) => {\n    setActiveTab(tab)\n  }\n\n  const submitRequisitionRequest = async (data) => {\n    setBtnLoading(true);\n    console.log('data => ',data)\n    axios({\n      ...requisitionRequest, data,\n      // headers: {\n      //   Authorization: \"JWT \" + JSON.parse(localStorage.getItem('token')),\n      //   homeIdentifier: authUser.homeId.homeIdentifier,\n      //   devicetype: 1\n      // }\n    }).then(data => {\n      if (data.statusText === 'OK') {\n        Toast.success(data.data.message)\n        redirectToXrayListing()\n      }\n    }).catch(err => {\n      console.log(\"err => \", err)\n    }).finally(() => {\n      setBtnLoading(false);\n    })\n\n  }\n  return (\n    <div className=\"xray-wrap\">\n      <MobileXRaySidebar\n        imagingInfo={imagingDiagnosticInfo}\n        residentData={residentData}\n      />\n      <XRayDetail\n        btnLoading={btnLoading}\n        loading={loading}\n        jsonData={jsonData}\n        imagingJson={imagingJson}\n        isEdit={isEdit}\n        roomNo={residentData.room || ''}\n        residentAge={residentAge}\n        residentName={residentData && residentData.lastName ? `${residentData.lastName},${residentData.firstName}` : ''}\n        activeTab={activeTab}\n        authUser={authUser}\n        residentData={residentData}\n        editDatas={editData}\n        imagingInfo={imagingDiagnosticInfo}\n        setNotesCount={setNotesCount}\n        doctorId={doctorId}\n        setBtnLoading={setBtnLoading}\n        notesCount={notesCount}\n        redirectToXrayListing={redirectToXrayListing}\n        onSubmit={submitRequisitionRequest}\n      />\n    </div>\n  );\n\n}\nconst mapStateToProps = ({ auth }) => {\n  const { authUser } = auth\n  return {\n    authUser\n  }\n}\nexport default connect(mapStateToProps)(createForm()(MobileXRay));\n"]},"metadata":{},"sourceType":"module"}