{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/components/common/Upload/index.js\";\nimport React from 'react';\nimport RcUpload from 'rc-upload';\nimport UploadList from './list';\n\nfunction getFileItem(file, fileList) {\n  // get file from filelist\n  const matchKey = file.uid !== undefined ? 'uid' : 'name';\n  return fileList.filter(item => item[matchKey] === file[matchKey])[0];\n}\n\nfunction removeFileItem(file, fileList) {\n  // remove file from filelist\n  const matchKey = file.uid !== undefined ? 'uid' : 'name';\n  const removed = fileList.filter(item => item[matchKey] !== file[matchKey]);\n\n  if (removed.length === fileList.length) {\n    return null;\n  }\n\n  return removed;\n}\n\nexport default class Upload extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleRemove = file => {\n      let self = this;\n      const {\n        onRemove\n      } = self.props;\n      const {\n        fileList\n      } = self.state;\n      Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {\n        // Prevent removing file\n        if (ret === false) {\n          return;\n        }\n\n        const removedFileList = removeFileItem(file, fileList);\n\n        if (removedFileList) {\n          file.status = 'removed';\n\n          if (self.upload) {\n            self.upload.abort(file);\n          }\n\n          self.setState({\n            fileList: removedFileList\n          });\n        }\n      });\n    };\n\n    this.onStart = file => {\n      //start uploading file\n      let self = this;\n      const {\n        fileList\n      } = self.state;\n      const targetItem = file;\n      targetItem.status = 'uploading';\n      const nextFileList = fileList.concat();\n      const fileIndex = nextFileList.findIndex(({\n        uid\n      }) => uid === targetItem.uid);\n\n      if (fileIndex === -1) {\n        nextFileList.push(targetItem);\n      } else {\n        nextFileList[fileIndex] = targetItem;\n      }\n\n      self.onChange({\n        file: targetItem,\n        fileList: nextFileList\n      });\n    };\n\n    this.onProgress = (e, file) => {\n      let self = this;\n      const {\n        fileList\n      } = self.state;\n      const targetItem = getFileItem(file, fileList);\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.percent = e.percent;\n      self.onChange({\n        file: { ...targetItem\n        },\n        fileList\n      });\n    };\n\n    this.onSuccess = (response, file, xhr) => {\n      // upload success handler\n      let self = this;\n\n      try {\n        if (typeof response === 'string') {\n          response = JSON.parse(response);\n        }\n      } catch (e) {\n        /* do nothing */\n      }\n\n      const {\n        fileList\n      } = self.state;\n      const targetItem = getFileItem(file, fileList);\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.status = 'done';\n      targetItem.response = response;\n      targetItem.xhr = xhr;\n      self.onChange({\n        file: { ...targetItem\n        },\n        fileList\n      });\n    };\n\n    this.onError = (error, response, file) => {\n      let self = this;\n      const {\n        fileList\n      } = self.state;\n      const targetItem = getFileItem(file, fileList);\n\n      if (!targetItem) {\n        return;\n      }\n\n      targetItem.error = error;\n      targetItem.response = response;\n      targetItem.status = 'error';\n      self.onChange({\n        file: { ...targetItem\n        },\n        fileList\n      });\n    };\n\n    this.onChange = info => {\n      if (!('fileList' in this.props)) {\n        console.log(\"----\", info.fileList);\n        this.setState({\n          fileList: info.fileList\n        });\n      }\n\n      const {\n        onChange\n      } = this.props;\n\n      if (onChange) {\n        onChange({ ...info,\n          fileList: [...info.fileList]\n        });\n      }\n    };\n\n    this.saveUpload = node => {\n      this.upload = node;\n    };\n\n    this.state = {\n      fileList: props.fileList || props.defaultFileList || [],\n      showFileList: typeof props.showFileList === 'boolean' ? props.showFileList : true\n    };\n  }\n\n  render() {\n    const uploadProps = { ...this.props,\n      onSuccess: this.onSuccess,\n      onStart: this.onStart,\n      onProgress: this.onProgress,\n      onError: this.onError\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, uploadProps, {\n      ref: this.saveUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }), this.props.children), this.state.showFileList && this.state.fileList && this.state.fileList.length > 0 ? /*#__PURE__*/React.createElement(UploadList, {\n      fileList: this.state.fileList,\n      onRemove: this.handleRemove,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }) : null);\n  }\n\n}","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/components/common/Upload/index.js"],"names":["React","RcUpload","UploadList","getFileItem","file","fileList","matchKey","uid","undefined","filter","item","removeFileItem","removed","length","Upload","Component","constructor","props","handleRemove","self","onRemove","state","Promise","resolve","then","ret","removedFileList","status","upload","abort","setState","onStart","targetItem","nextFileList","concat","fileIndex","findIndex","push","onChange","onProgress","e","percent","onSuccess","response","xhr","JSON","parse","onError","error","info","console","log","saveUpload","node","defaultFileList","showFileList","render","uploadProps","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport RcUpload from 'rc-upload';\nimport UploadList from './list'\n\nfunction getFileItem(file, fileList) {\n    // get file from filelist\n    const matchKey = file.uid !== undefined ? 'uid' : 'name';\n    return fileList.filter(item => item[matchKey] === file[matchKey])[0];\n}\nfunction removeFileItem(file, fileList) {\n    // remove file from filelist\n    const matchKey = file.uid !== undefined ? 'uid' : 'name';\n    const removed = fileList.filter(item => item[matchKey] !== file[matchKey]);\n    if (removed.length === fileList.length) {\n        return null;\n    }\n    return removed;\n}\nexport default class Upload extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fileList: props.fileList || props.defaultFileList || [],\n            showFileList: typeof props.showFileList === 'boolean' ? props.showFileList : true\n        }\n    }\n\n    handleRemove = (file) => {\n        let self = this\n        const { onRemove } = self.props;\n        const { fileList } = self.state;\n\n        Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {\n            // Prevent removing file\n            if (ret === false) {\n                return;\n            }\n\n            const removedFileList = removeFileItem(file, fileList);\n\n            if (removedFileList) {\n                file.status = 'removed';\n\n                if (self.upload) {\n                    self.upload.abort(file);\n                }\n                self.setState({\n                    fileList: removedFileList,\n                });\n            }\n        });\n    };\n\n    onStart = (file) => {\n        //start uploading file\n        let self = this\n        const { fileList } = self.state;\n        const targetItem = file;\n        targetItem.status = 'uploading';\n        const nextFileList = fileList.concat();\n        const fileIndex = nextFileList.findIndex(({ uid }) => uid === targetItem.uid);\n        if (fileIndex === -1) {\n            nextFileList.push(targetItem);\n        } else {\n            nextFileList[fileIndex] = targetItem;\n        }\n        self.onChange({\n            file: targetItem,\n            fileList: nextFileList,\n        });\n    }\n\n    onProgress = (e, file) => {\n        let self = this\n        const { fileList } = self.state;\n        const targetItem = getFileItem(file, fileList);\n        if (!targetItem) {\n            return;\n        }\n        targetItem.percent = e.percent;\n        self.onChange({\n            file: { ...targetItem },\n            fileList,\n        });\n    }\n\n    onSuccess = (response, file, xhr) => {\n        // upload success handler\n        let self = this\n        try {\n            if (typeof response === 'string') {\n                response = JSON.parse(response);\n            }\n        } catch (e) {\n            /* do nothing */\n        }\n        const { fileList } = self.state;\n        const targetItem = getFileItem(file, fileList);\n        if (!targetItem) {\n            return;\n        }\n        targetItem.status = 'done';\n        targetItem.response = response;\n        targetItem.xhr = xhr;\n        self.onChange({\n            file: { ...targetItem },\n            fileList,\n        });\n    };\n\n    onError = (error, response, file) => {\n        let self = this\n        const { fileList } = self.state;\n        const targetItem = getFileItem(file, fileList);\n        if (!targetItem) {\n            return;\n        }\n        targetItem.error = error;\n        targetItem.response = response;\n        targetItem.status = 'error';\n        self.onChange({\n            file: { ...targetItem },\n            fileList,\n        });\n    }\n\n    onChange = (info) => {\n        if (!('fileList' in this.props)) {\n            console.log(\"----\", info.fileList)\n            this.setState({ fileList: info.fileList });\n        }\n        const { onChange } = this.props;\n        if (onChange) {\n            onChange({\n                ...info,\n                fileList: [...info.fileList],\n            });\n        }\n    };\n\n    saveUpload = (node) => {\n        this.upload = node;\n    };\n\n    render() {\n\n        const uploadProps = {\n            ...this.props,\n            onSuccess: this.onSuccess,\n            onStart: this.onStart,\n            onProgress: this.onProgress,\n            onError: this.onError,\n        }\n\n        return (\n            <>\n                <RcUpload {...uploadProps} ref={this.saveUpload}>{this.props.children}</RcUpload>\n                {this.state.showFileList &&\n                    this.state.fileList && this.state.fileList.length > 0 ?\n                    <UploadList\n                        fileList={this.state.fileList}\n                        onRemove={this.handleRemove}\n                    ></UploadList>\n                    : null\n                }\n            </>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}