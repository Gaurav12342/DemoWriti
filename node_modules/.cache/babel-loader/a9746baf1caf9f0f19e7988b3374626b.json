{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Xray/List/View/AddImagingDiagn.js\";\nimport React from 'react';\nimport { Option } from 'rc-select';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport { ErrorMsg } from '../../../../components/common/index';\nimport AutoComplete from '../../../../components/common/AutoComplete';\nimport '../../../../../node_modules/rc-datepicker/lib/style.css';\nimport DoctorFilter from '../../../../components/DoctorFilter';\nimport Modal from '../../../../components/common/Popup/index';\nimport { X_RAY_FORM_TYPE } from '../../../../constants/xray';\nimport { isDrOrNp } from '../../../../util/common';\nimport { USER_TYPE } from '../../../../constants/User';\nconst ImagingType = {\n  \"Mobile X-Ray\": X_RAY_FORM_TYPE.X_RAY,\n  \"Mobile Ultrasound\": X_RAY_FORM_TYPE.MOBILE_ULTRASOUND\n};\n\nfunction AddImagingDiagnostic(props) {\n  const {\n    onResidentChange,\n    onResidentSearch,\n    residentListing,\n    isVisible,\n    selectedType,\n    onDoctorChange,\n    authUser,\n    title,\n    onCancel,\n    onSubmit,\n    form,\n    onTypeChange\n  } = props;\n  let errors;\n  const {\n    getFieldDecorator,\n    getFieldError\n  } = form;\n  let x = residentListing.length > 0 ? residentListing.map(resident => {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: resident.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: 'inline !important'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 65\n      }\n    }, resident.name, resident.patientInfoId && resident.patientInfoId.hc ? `  (${resident.patientInfoId.hc})` : null, resident.patientInfoId && resident.patientInfoId.homeAreaId && resident.patientInfoId.homeAreaId.name ? `  (${resident.patientInfoId.homeAreaId.name})` : null)));\n  }) : null;\n  return /*#__PURE__*/React.createElement(Modal, {\n    visible: isVisible,\n    width: 800,\n    title: \"Add X-Ray - U/S Request\",\n    onCancel: onCancel,\n    onClose: onCancel,\n    footer: true,\n    onOk: onSubmit,\n    closable: false,\n    okText: \"continue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_row add-imaging\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group col-12 required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, \"Type\", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 28\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter_section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter_value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, Object.keys(ImagingType).map((k, i) => /*#__PURE__*/React.createElement(\"label\", {\n    key: `${k}${i}`,\n    for: k,\n    className: \"filter_switch\",\n    onClick: () => onTypeChange(ImagingType[k]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 68\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"xtype\",\n    id: ImagingType[k],\n    checked: selectedType === ImagingType[k] ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 33\n    }\n  }, k))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_row add-imaging\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group col-6 required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"Resident\", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 32\n    }\n  }, \"*\")), getFieldDecorator('residentId', {\n    rules: [{\n      required: true,\n      message: 'Please Search and Select Resident'\n    }]\n  })( /*#__PURE__*/React.createElement(AutoComplete, {\n    showSearch: true,\n    allowClear: true,\n    showArrow: false,\n    filterOption: false,\n    placeholder: \"Search Resident\",\n    onSearch: onResidentSearch,\n    notFoundContent: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 24\n    }\n  }, residentListing.length > 0 ? residentListing.map(resident => {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: resident._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 44\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: 'inline !important'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 41\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 89\n      }\n    }, resident.firstName, \" , \", resident.lastName, \"  \", resident && resident.hc ? `(${resident.hc})` : '', \"  \", resident && resident.homeAreaId && resident.homeAreaId.name ? `(${resident.homeAreaId.name})` : '')));\n  }) : null)), (errors = getFieldError('residentId')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 59\n    }\n  }) : null), (authUser === null || authUser === void 0 ? void 0 : authUser.type) !== USER_TYPE.HOME.PHYSICIAN && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group col-6 required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, \"Physician/Nurse Practitioner\", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 56\n    }\n  }, \"*\")), getFieldDecorator('doctorId', {\n    rules: [{\n      required: isDrOrNp(authUser) ? false : true,\n      message: 'Select Physician/Nurse Practitioner'\n    }]\n  })( /*#__PURE__*/React.createElement(DoctorFilter, {\n    allowClear: false // size={300}\n    ,\n    placeholder: \"Select Physician/Nurse Practitioner\",\n    authUser: authUser,\n    onDoctorChange: onDoctorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 28\n    }\n  })), (errors = getFieldError('doctorId')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 61\n    }\n  }) : null)));\n}\n\nexport default AddImagingDiagnostic;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Xray/List/View/AddImagingDiagn.js"],"names":["React","Option","ErrorMsg","AutoComplete","DoctorFilter","Modal","X_RAY_FORM_TYPE","isDrOrNp","USER_TYPE","ImagingType","X_RAY","MOBILE_ULTRASOUND","AddImagingDiagnostic","props","onResidentChange","onResidentSearch","residentListing","isVisible","selectedType","onDoctorChange","authUser","title","onCancel","onSubmit","form","onTypeChange","errors","getFieldDecorator","getFieldError","x","length","map","resident","id","display","name","patientInfoId","hc","homeAreaId","Object","keys","k","i","rules","required","message","_id","firstName","lastName","type","HOME","PHYSICIAN"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Option } from 'rc-select'\nimport 'rc-tooltip/assets/bootstrap.css';\nimport { ErrorMsg } from '../../../../components/common/index'\nimport AutoComplete from '../../../../components/common/AutoComplete'\nimport '../../../../../node_modules/rc-datepicker/lib/style.css'\nimport DoctorFilter from '../../../../components/DoctorFilter'\nimport Modal from '../../../../components/common/Popup/index'\nimport { X_RAY_FORM_TYPE } from '../../../../constants/xray';\nimport { isDrOrNp } from '../../../../util/common'\nimport { USER_TYPE } from '../../../../constants/User';\nconst ImagingType = {\n    \"Mobile X-Ray\": X_RAY_FORM_TYPE.X_RAY,\n    \"Mobile Ultrasound\": X_RAY_FORM_TYPE.MOBILE_ULTRASOUND\n}\n\nfunction AddImagingDiagnostic(props) {\n    const { onResidentChange, onResidentSearch, residentListing, isVisible, selectedType,\n        onDoctorChange, authUser, title, onCancel, onSubmit, form, onTypeChange } = props\n    let errors\n    const { getFieldDecorator, getFieldError } = form\n    let x = residentListing.length > 0 ?\n        residentListing.map(resident => {\n            return <Option value={resident.id} >\n                <span style={{ display: 'inline !important' }}> <p>{resident.name}\n                    {resident.patientInfoId && resident.patientInfoId.hc ? `  (${resident.patientInfoId.hc})` : null}\n                    {resident.patientInfoId && resident.patientInfoId.homeAreaId\n                        && resident.patientInfoId.homeAreaId.name ? `  (${resident.patientInfoId.homeAreaId.name})` : null}</p>\n                </span>\n            </Option>\n        }) : null\n\n    return (<Modal\n        visible={isVisible}\n        width={800}\n        title=\"Add X-Ray - U/S Request\"\n        onCancel={onCancel}\n        onClose={onCancel}\n        footer={true}\n        onOk={onSubmit}\n        closable={false}\n        okText=\"continue\" >\n        <div className=\"form_row add-imaging\">\n            <div className=\"form_group col-12 required\">\n                <label>Type<span>*</span></label>\n                <div className=\"filter_section\">\n                    <div className=\"filter_value\">\n                        {\n                            Object.keys(ImagingType).map((k, i) => <label key={`${k}${i}`} for={k} className=\"filter_switch\" onClick={() => onTypeChange(ImagingType[k])}>\n                                <input type=\"radio\" name=\"xtype\"\n                                    id={ImagingType[k]}\n                                    checked={selectedType === ImagingType[k] ? true : false} />\n                                <span>{k}</span>\n                            </label>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"form_row add-imaging\">\n            <div className=\"form_group col-6 required\">\n                <label>Resident<span>*</span></label>\n                {\n                    getFieldDecorator('residentId', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please Search and Select Resident'\n                            }\n                        ],\n                    })(<AutoComplete\n                        showSearch\n                        allowClear={true}\n                        showArrow={false}\n                        filterOption={false}\n                        placeholder=\"Search Resident\"\n                        onSearch={onResidentSearch}\n                        notFoundContent={null}\n                    >\n                        {\n                            residentListing.length > 0 ?\n                                residentListing.map(resident => {\n                                    return <Option value={resident._id} >\n                                        <span style={{ display: 'inline !important' }}> <p>{resident.firstName} , {resident.lastName}\n                                            {\"  \"}\n                                            {resident && resident.hc ? `(${resident.hc})` : ''}{\"  \"}\n                                            {resident && resident.homeAreaId && resident.homeAreaId.name ? `(${resident.homeAreaId.name})` : ''}</p>\n                                        </span>\n                                    </Option>\n                                }) : null\n                        }\n                    </AutoComplete>)\n                }\n                {(errors = getFieldError('residentId')) ? <ErrorMsg errors={errors} /> : null}\n            </div>\n            {\n                authUser?.type !== USER_TYPE.HOME.PHYSICIAN &&\n                <div className=\"form_group col-6 required\">\n                    <label>Physician/Nurse Practitioner<span>*</span></label>\n                    {\n                        getFieldDecorator('doctorId', {\n                            rules: [{\n                                required: isDrOrNp(authUser) ? false : true,\n                                message: 'Select Physician/Nurse Practitioner'\n                            }],\n                        })(<DoctorFilter\n                            allowClear={false}\n                            // size={300}\n                            placeholder=\"Select Physician/Nurse Practitioner\"\n                            authUser={authUser}\n                            onDoctorChange={onDoctorChange}\n                        />\n                        )\n                    }\n                    {(errors = getFieldError('doctorId')) ? <ErrorMsg errors={errors} /> : null}\n        </div>\n            }\n        </div>\n    </Modal >)\n}\nexport default AddImagingDiagnostic;"]},"metadata":{},"sourceType":"module"}