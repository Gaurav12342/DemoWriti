{"ast":null,"code":"import { useMemo, useState } from 'react';\n\nconst noop = () => {};\n\nconst createEventHandler = options => (dataTransfer, event) => {\n  if (dataTransfer.files && dataTransfer.files.length) {\n    (options.onFiles || noop)(Array.from(dataTransfer.files), event);\n    return;\n  }\n};\n\nconst registerDropEvents = (eventHandler, setIsHovering) => ({\n  onDragOver: event => {\n    event.preventDefault();\n    setIsHovering(true);\n  },\n  onDragEnter: event => {\n    event.preventDefault();\n    setIsHovering(true);\n  },\n  onDragLeave: () => {\n    setIsHovering(false);\n  },\n  onDrop: event => {\n    event.preventDefault();\n    event.persist();\n    setIsHovering(false);\n    eventHandler(event.dataTransfer, event);\n  },\n  onPaste: event => {\n    event.persist();\n    eventHandler(event.clipboardData, event);\n  }\n});\n\nconst useDrop = options => {\n  const {\n    onFiles\n  } = options;\n  const [isHovering, setIsHovering] = useState(false);\n  const eventHandler = useMemo(() => createEventHandler(options), [onFiles]);\n  const eventProps = useMemo(() => registerDropEvents(eventHandler, setIsHovering), [eventHandler, setIsHovering]);\n  return [eventProps, {\n    isHovering\n  }];\n};\n\nexport default useDrop;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/hooks/useDrop.js"],"names":["useMemo","useState","noop","createEventHandler","options","dataTransfer","event","files","length","onFiles","Array","from","registerDropEvents","eventHandler","setIsHovering","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","persist","onPaste","clipboardData","useDrop","isHovering","eventProps"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAG,CAAtB;;AAEA,MAAMC,kBAAkB,GAAIC,OAAD,IAAa,CAACC,YAAD,EAAeC,KAAf,KAAyB;AAC/D,MAAID,YAAY,CAACE,KAAb,IAAsBF,YAAY,CAACE,KAAb,CAAmBC,MAA7C,EAAqD;AACnD,KAACJ,OAAO,CAACK,OAAR,IAAmBP,IAApB,EAA0BQ,KAAK,CAACC,IAAN,CAAWN,YAAY,CAACE,KAAxB,CAA1B,EAA0DD,KAA1D;AACA;AACD;AACF,CALD;;AAOA,MAAMM,kBAAkB,GAAG,CAACC,YAAD,EAAeC,aAAf,MAAkC;AAC3DC,EAAAA,UAAU,EAAGT,KAAD,IAAW;AACrBA,IAAAA,KAAK,CAACU,cAAN;AACAF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAJ0D;AAK3DG,EAAAA,WAAW,EAAGX,KAAD,IAAW;AACtBA,IAAAA,KAAK,CAACU,cAAN;AACAF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAR0D;AAS3DI,EAAAA,WAAW,EAAE,MAAM;AACjBJ,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAX0D;AAY3DK,EAAAA,MAAM,EAAGb,KAAD,IAAW;AACjBA,IAAAA,KAAK,CAACU,cAAN;AACAV,IAAAA,KAAK,CAACc,OAAN;AACAN,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAD,IAAAA,YAAY,CAACP,KAAK,CAACD,YAAP,EAAqBC,KAArB,CAAZ;AACD,GAjB0D;AAkB3De,EAAAA,OAAO,EAAGf,KAAD,IAAW;AAClBA,IAAAA,KAAK,CAACc,OAAN;AACAP,IAAAA,YAAY,CAACP,KAAK,CAACgB,aAAP,EAAsBhB,KAAtB,CAAZ;AACD;AArB0D,CAAlC,CAA3B;;AAwBA,MAAMiB,OAAO,GAAInB,OAAD,IAAa;AAC3B,QAAM;AAAEK,IAAAA;AAAF,MAAcL,OAApB;AACA,QAAM,CAACoB,UAAD,EAAaV,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMY,YAAY,GAAGb,OAAO,CAAC,MAAMG,kBAAkB,CAACC,OAAD,CAAzB,EAAoC,CAACK,OAAD,CAApC,CAA5B;AACA,QAAMgB,UAAU,GAAGzB,OAAO,CAAC,MAAMY,kBAAkB,CAACC,YAAD,EAAeC,aAAf,CAAzB,EAAwD,CAACD,YAAD,EAAeC,aAAf,CAAxD,CAA1B;AAEA,SAAO,CAACW,UAAD,EAAa;AAAED,IAAAA;AAAF,GAAb,CAAP;AACD,CAPD;;AASA,eAAeD,OAAf","sourcesContent":["import { useMemo, useState } from 'react';\n\nconst noop = () => { };\n\nconst createEventHandler = (options) => (dataTransfer, event) => {\n  if (dataTransfer.files && dataTransfer.files.length) {\n    (options.onFiles || noop)(Array.from(dataTransfer.files), event);\n    return;\n  }\n};\n\nconst registerDropEvents = (eventHandler, setIsHovering) => ({\n  onDragOver: (event) => {\n    event.preventDefault();\n    setIsHovering(true);\n  },\n  onDragEnter: (event) => {\n    event.preventDefault();\n    setIsHovering(true);\n  },\n  onDragLeave: () => {\n    setIsHovering(false);\n  },\n  onDrop: (event) => {\n    event.preventDefault();\n    event.persist();\n    setIsHovering(false);\n    eventHandler(event.dataTransfer, event);\n  },\n  onPaste: (event) => {\n    event.persist();\n    eventHandler(event.clipboardData, event);\n  },\n});\n\nconst useDrop = (options) => {\n  const { onFiles } = options;\n  const [isHovering, setIsHovering] = useState(false);\n  const eventHandler = useMemo(() => createEventHandler(options), [onFiles]);\n  const eventProps = useMemo(() => registerDropEvents(eventHandler, setIsHovering), [eventHandler, setIsHovering]);\n\n  return [eventProps, { isHovering }];\n};\n\nexport default useDrop;\n"]},"metadata":{},"sourceType":"module"}