{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/mobile-xray.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport Spin from 'rc-spinner';\nimport ReviewPopup from './ReviewPopup/index';\nimport DynamicModal from './DynamicModal';\nimport { IMAGING_FORM_NAME } from '../../../constants/xray';\nimport { Toast, Button } from '../../../components/common/index';\nimport { displayDateTime } from '../../../util/moment';\nimport ConfirmPopup from '../../../components/common/ConfirmPopup';\nimport BodyPart from './BodyPart';\nimport { priority } from \"../../../constants/notes\";\n\nconst _ = require('lodash');\n\nconst moment = require('moment');\n\nconst initialXrayDetail = {\n  selectedOptions: {},\n  selectedBodyParts: [],\n  bodyPartsCodeList: []\n};\n\nfunction XRayDetail(props) {\n  const {\n    activeTab,\n    isEdit,\n    editDatas,\n    imagingInfo,\n    UltraSoundJson,\n    setNotesCount,\n    residentData,\n    doctorId,\n    authUser,\n    jsonData,\n    size,\n    residentAge,\n    setBtnLoading,\n    loading,\n    notesCount,\n    redirectToListing,\n    residentName,\n    onSubmit,\n    imagingJson,\n    roomNo,\n    btnLoading\n  } = props;\n  const [showDynamicModal, setShowDynamicModal] = useState(false);\n  const [showReviewPopUp, setShowReviewPopUp] = useState(false);\n  const [addedNotes, setAddedNotes] = useState([]);\n  const [selectedPart, setSelectedPart] = useState(null);\n  const [radioData, setRadioData] = useState('');\n  const [isUrgent, setIsUrgent] = useState(false);\n  const [isInfectionControl, setIsInfectionControl] = useState(false);\n  const [reasonText, setReasonText] = useState('');\n  const [xRayDetail, setXRayDetail] = useState(initialXrayDetail);\n  const [editCode, setEditCode] = useState([]);\n  const [editData, setEditData] = useState(undefined);\n  const [isDeleted, setIsDeleted] = useState({});\n  const [isConfirmPopup, setConFirmPopup] = useState(false);\n  const [isSubmit, setSubmit] = useState(false);\n  const [extensionNo, setExtensionNo] = useState(undefined);\n  const [phoneNo, setPhoneNo] = useState(undefined);\n  useEffect(() => {\n    setInitialState();\n\n    if (isEdit && editDatas && Object.keys(editDatas).length) {\n      setEditData(editDatas);\n      console.log(\"TCL: XRayDetail -> editDatas\", editDatas);\n\n      if (editDatas.phone) {\n        setPhoneNo(editDatas.phone);\n      }\n\n      if (editDatas.extension) {\n        setExtensionNo(editDatas.extension);\n      } // setStateByeditData(true)\n\n    }\n  }, [activeTab, isEdit, editDatas]);\n  useEffect(() => {\n    if (isEdit && editData && Object.keys(editData).length) {\n      setStateByeditData(true);\n    }\n  }, [editData]);\n  useEffect(() => {\n    if (isSubmit) {\n      handleSubmit();\n    }\n  }, [isSubmit]);\n\n  const getInitialStateValues = () => {\n    setShowReviewPopUp(false);\n    setShowDynamicModal(false);\n    setAddedNotes([]);\n    setSelectedPart(null);\n    setRadioData('');\n    setIsUrgent(false);\n    setIsInfectionControl(false);\n    setReasonText('');\n    setXRayDetail(initialXrayDetail);\n  };\n\n  const handleShowReviewPopUp = e => {\n    e.stopPropagation();\n    setShowReviewPopUp(true);\n  };\n\n  const closeReviewPopUp = () => {\n    setShowReviewPopUp(false);\n  };\n\n  const displayDynamicModal = (data, radioData) => {\n    setRadioData(radioData);\n    setSelectedPart(data);\n    setShowDynamicModal(true);\n  };\n\n  const hideDynamicModal = () => {\n    setShowDynamicModal(false);\n    setSelectedPart(null);\n  };\n\n  const hideReviewModal = (args, isSubmitted, updatedIsdeleted, doNotSubmit) => {\n    if (isSubmitted && updatedIsdeleted) {\n      setIsDeleted(updatedIsdeleted);\n    }\n\n    if (args && args.hasOwnProperty('updatedDetail') && isSubmitted) {\n      setXRayDetail(args.updatedDetail);\n      setShowReviewPopUp(false);\n      setReasonText(args.reasonText);\n\n      if (!doNotSubmit) {\n        setSubmit(true); // handleSubmit()\n      }\n    } else {\n      setShowReviewPopUp(false);\n    }\n  };\n\n  const setInitialState = () => {\n    setConFirmPopup(false);\n    getInitialStateValues();\n    setIsDeleted({});\n  };\n\n  const handleDynamicModalChange = (selectedParts, selectedBodyParts, updatedcodeList, updatedIsdeleted) => {\n    // let tempSelectedOpt = _.cloneDeep(xRayDetail.selectedOptions)\n    let tempSelectedOpt = { ...selectedParts\n    };\n\n    let tempXRayDetail = _.cloneDeep(xRayDetail);\n\n    tempXRayDetail = {\n      selectedOptions: tempSelectedOpt,\n      selectedBodyParts,\n      bodyPartsCodeList: updatedcodeList\n    };\n    setIsDeleted(updatedIsdeleted);\n    setXRayDetail(tempXRayDetail);\n  };\n\n  const handleIsUrgentChange = val => {\n    setIsUrgent(val);\n  };\n\n  const handleInfectionControl = val => {\n    setIsInfectionControl(val);\n  };\n\n  const setStateByeditData = assignToState => {\n    let tempEditData = _.cloneDeep(editData);\n\n    if (tempEditData && tempEditData.selectedBodyParts && tempEditData.selectedBodyParts.length) {\n      let parentObj = {},\n          selectedBodyParts = [],\n          bodyPartsCodeList = [];\n      tempEditData.selectedBodyParts.forEach(obj => {\n        if (assignToState) {\n          setEditCode(oldCodes => [...oldCodes, obj.code]);\n        }\n\n        if (obj.isClickable) {\n          let isDeleteObj = false;\n\n          if (assignToState && obj.hasOwnProperty('isDeleted') && obj.isDeleted) {\n            isDeleteObj = true;\n          }\n\n          if (!isDeleteObj) {\n            bodyPartsCodeList.push(obj.code);\n            selectedBodyParts.push(obj.label);\n\n            if (assignToState) {\n              setIsDeleted(oldDeleted => ({ ...oldDeleted,\n                [obj.label]: false\n              }));\n            }\n\n            let optionList = [];\n            let bodyCodesList = [];\n            let other = {};\n            obj.optionItems.forEach(option => {\n              if (option.hasOwnProperty(\"value\") && option.value.length > 0) {\n                other[option.code] = option.value;\n              }\n\n              optionList.push(option.name);\n              bodyPartsCodeList.push(option.code);\n              bodyCodesList.push(option.code);\n            });\n            bodyCodesList.push(obj.code);\n            parentObj = { ...parentObj,\n              [obj.label]: {\n                optionItems: optionList,\n                bodyCodes: bodyCodesList\n              }\n            };\n\n            if (Object.keys(other).length) {\n              parentObj[obj.label] = { ...parentObj[obj.label],\n                other: { ...other\n                }\n              };\n            }\n          }\n        } else {\n          if (obj.optionItems.length) {\n            obj.optionItems.forEach(option => {\n              if (option.radioButtons && option.radioButtons.length) {\n                option.radioButtons.forEach(radioOption => {\n                  let isDeleteObj = false;\n\n                  if (assignToState && obj.hasOwnProperty('isDeleted') && obj.isDeleted) {\n                    isDeleteObj = true;\n                  }\n\n                  if (!isDeleteObj) {\n                    bodyPartsCodeList.push(obj.code);\n                    selectedBodyParts.push(obj.label);\n\n                    if (assignToState) {\n                      setIsDeleted(oldDeleted => ({ ...oldDeleted,\n                        [obj.label]: false\n                      }));\n                    }\n\n                    if (radioOption.optionItems.length) {\n                      let tempCodeList = [];\n                      let optionList = [];\n                      let bodyCodesList = [];\n                      let other = {};\n                      radioOption.optionItems.forEach(obj => {\n                        if (obj.hasOwnProperty('value') && obj.value.length > 0) {\n                          other = { ...other,\n                            [obj.code]: obj.value\n                          };\n                        }\n\n                        optionList.push(obj.name);\n                        bodyPartsCodeList.push(obj.code);\n                        tempCodeList.push(obj.code);\n                      });\n                      tempCodeList.push(obj.code, radioOption.code);\n                      bodyCodesList.push(obj.code);\n                      let tempObj = {\n                        [radioOption.label]: {\n                          optionItems: optionList,\n                          bodyCodes: tempCodeList\n                        }\n                      };\n\n                      if (Object.keys(other).length > 0) {\n                        tempObj[radioOption.label] = { ...tempObj[radioOption.label],\n                          other: { ...other\n                          }\n                        };\n                      }\n\n                      bodyPartsCodeList.push(obj.code, radioOption.code);\n                      parentObj[obj.label] = { // ...parentObj[obj.label],\n                        ...tempObj\n                      };\n                    }\n                  }\n                });\n              }\n            });\n          }\n        }\n      });\n      let tempXRayDetail = {\n        selectedOptions: parentObj,\n        selectedBodyParts: selectedBodyParts,\n        bodyPartsCodeList: bodyPartsCodeList\n      };\n\n      if (isEdit && tempEditData && tempEditData.isUrgent) {\n        setIsUrgent(tempEditData.isUrgent);\n      } // console.log(\"tempXRayDetail\", tempXRayDetail)\n\n\n      if (assignToState) {\n        console.log(\"TCL: setStateByeditData -> setXRayDetail\");\n        setXRayDetail(tempXRayDetail);\n      } else {\n        return tempXRayDetail;\n      }\n    }\n  };\n\n  const handleReasonTextChange = () => {\n    setReasonText(reasonText);\n  };\n\n  const changeNoteCount = isDelete => {\n    const tempNotesCount = isDelete && isDelete === true ? notesCount - 1 : notesCount + 1;\n    setNotesCount(tempNotesCount);\n  };\n\n  const handleSubmit = () => {\n    let {\n      bodyPartsCodeList,\n      selectedOptions\n    } = _.cloneDeep(xRayDetail);\n\n    if (Object.keys(selectedOptions).length === 0) {\n      Toast.error('Empty Request cant be submitted');\n      return;\n    }\n\n    let jsonData = _.cloneDeep(imagingJson);\n\n    let formData = [];\n    jsonData.forEach(jsonObj => {\n      if (bodyPartsCodeList.indexOf(jsonObj.code) >= 0) {\n        let customObj = { ...jsonObj\n        };\n\n        if (jsonObj.isClickable) {\n          let filter = [];\n          jsonObj.optionItems.forEach(opt => {\n            if (bodyPartsCodeList.indexOf(opt.code) >= 0) {\n              if (opt.hasOwnProperty('value')) {\n                let tempValue = '';\n\n                if (selectedOptions[jsonObj.label] && selectedOptions[jsonObj.label].other && selectedOptions[jsonObj.label].other[opt.code]) {\n                  tempValue = selectedOptions[jsonObj.label].other[opt.code];\n                }\n\n                let optionToadd = { ...opt,\n                  value: tempValue,\n                  isSelected: true\n                };\n                filter.push({ ...optionToadd\n                });\n              } else {\n                filter.push({ ...opt,\n                  isSelected: true\n                });\n              }\n            }\n          });\n\n          if (isEdit) {\n            customObj.isDeleted = isDeleted[customObj.label] ? true : false;\n          }\n\n          customObj.optionItems = filter;\n          customObj.isSelected = true;\n        } else {\n          let isFound = false;\n          let filters = [];\n          jsonObj.optionItems.forEach(opt => {\n            if (opt.radioButtons) {\n              let btnArr = [];\n              opt.radioButtons.forEach(radioBtn => {\n                if (bodyPartsCodeList.indexOf(radioBtn.code) >= 0) {\n                  let radioOptionsList = [];\n                  radioBtn.optionItems.forEach(radioOption => {\n                    if (bodyPartsCodeList.indexOf(radioOption.code) >= 0) {\n                      let tempValue = '';\n\n                      if (radioOption.hasOwnProperty('value')) {\n                        if (selectedOptions[jsonObj.label] && selectedOptions[jsonObj.label][radioBtn.label] && selectedOptions[jsonObj.label][radioBtn.label].other && selectedOptions[jsonObj.label][radioBtn.label].other[radioOption.code]) {\n                          tempValue = selectedOptions[jsonObj.label][radioBtn.label].other[radioOption.code];\n                        }\n                      }\n\n                      let optionToadd = { ...radioOption,\n                        value: tempValue,\n                        isSelected: true\n                      };\n                      radioOptionsList.push({ ...optionToadd\n                      });\n                    }\n                  });\n                  radioBtn.optionItems = radioOptionsList;\n                  btnArr.push({ ...radioBtn,\n                    isSelected: true\n                  });\n                  isFound = true;\n                }\n              });\n\n              if (isFound) {\n                filters.push({ ...opt,\n                  radioButtons: btnArr,\n                  isSelected: true\n                });\n              }\n            }\n          });\n\n          if (isEdit) {\n            customObj.isDeleted = isDeleted[customObj.label] ? true : false;\n          }\n\n          customObj.optionItems = filters;\n        }\n\n        formData.push({ ...customObj\n        });\n      }\n    });\n\n    if (isEdit) {\n      let tempEditData = _.cloneDeep(editData);\n\n      if (tempEditData && tempEditData.selectedBodyParts && tempEditData.selectedBodyParts.length) {\n        let clonedData = _.cloneDeep(tempEditData.selectedBodyParts);\n\n        formData = formData.map(formObj => {\n          let newObj = formObj;\n          clonedData.forEach((selPart, i) => {\n            if (formObj.code === selPart.code) {\n              newObj = { ...selPart,\n                ...formObj\n              };\n              clonedData.splice(i, 1);\n            }\n          });\n          return newObj;\n        });\n      }\n    }\n\n    if (formData.length === 0) {\n      Toast.warn('You cant submit empty requisition');\n      return;\n    }\n\n    let isVerbalOrder = false;\n\n    if (isEdit) {\n      isVerbalOrder = editDatas.isVerbalOrder;\n    } else {\n      if (authUser._id !== doctorId) {\n        isVerbalOrder = true;\n      }\n    }\n\n    console.log('formData', formData);\n    let request = {\n      residentId: residentData._id,\n      // residentInfoId: residentData.patientInfoId.id,\n      homeId: authUser.homeId._id,\n      homeAreaId: residentData.homeAreaId || '',\n      imagingDiagnosticId: imagingInfo._id || '',\n      physicianId: doctorId,\n      isVerbalOrder: isVerbalOrder,\n      isUrgent: isUrgent,\n      isInfectionControl: isInfectionControl,\n      formType: +activeTab,\n      selectedBodyParts: formData\n    };\n\n    if (reasonText.length > 0) {\n      request.reason = reasonText;\n    } else if (isEdit && editData.reason && editData.reason.length > 0) {\n      request.reason = reasonText;\n    }\n\n    if (isUrgent && phoneNo && extensionNo) {\n      request.phone = phoneNo;\n      request.extension = extensionNo;\n    }\n\n    if (isEdit) {\n      request.isCancel = false;\n      request.id = editData._id;\n    } else {\n      let allNotes = _.cloneDeep(addedNotes);\n\n      allNotes.map(note => {\n        delete note.key;\n        delete note.createdAt;\n        note.addedBy = note.addedBy.id;\n        note.isPublic = true;\n        note.noteType = '5fe0724ff1c36b129ac204ab'; //check\n\n        note.priority = priority.LOW;\n        return note;\n      });\n      request.notes = _.cloneDeep(allNotes);\n    }\n\n    request.isCancel = false;\n    onSubmit(request);\n  };\n\n  const confirmClear = e => {\n    e.stopPropagation();\n    setConFirmPopup(true);\n  };\n\n  const addNote = note => {\n    let tempAddedNotes = _.cloneDeep(addedNotes);\n\n    tempAddedNotes.push({ ...note,\n      key: addedNotes.length\n    });\n    setNotesCount(tempAddedNotes.length);\n    setAddedNotes(tempAddedNotes);\n  };\n\n  const handleUpdateNoteList = updatedNoteList => {\n    if (updatedNoteList && updatedNoteList.length > 0) {\n      setNotesCount(updatedNoteList.length);\n      setAddedNotes(updatedNoteList);\n    }\n  };\n\n  const handlePhoneNoChange = e => {\n    if (e === undefined) {\n      setPhoneNo(undefined);\n    } else if (e.target.value && e.target.value.length < 12) {\n      setPhoneNo(e.target.value);\n    } else if (!e.target.value) {\n      setPhoneNo(undefined);\n    }\n  };\n\n  const handleExtensionChange = e => {\n    if (e === undefined) {\n      setExtensionNo(undefined);\n    } else if (e.target.value && e.target.value.length <= 5) {\n      setExtensionNo(e.target.value);\n    } else if (!e.target.value) {\n      setExtensionNo(undefined);\n    }\n  };\n\n  let clonedSelectedParts = [];\n  let clonedCodeList = [];\n\n  if (xRayDetail && xRayDetail.selectedBodyParts.length > 0) {\n    clonedSelectedParts = xRayDetail.selectedBodyParts;\n  } // console.log(\"TCL: XRayDetail -> clonedCodeList\", clonedCodeList)\n\n\n  if (xRayDetail && xRayDetail.bodyPartsCodeList.length > 0) {\n    clonedCodeList = xRayDetail.bodyPartsCodeList;\n  }\n\n  const handleDynamicModal = action => {\n    setShowDynamicModal(action);\n  };\n\n  const deleteSelectedPart = (key, subKey) => {\n    const accData = temp => {\n      if (subKey) {\n        return _.cloneDeep(temp[key][subKey]);\n      } else return _.cloneDeep(temp[key]);\n    };\n\n    const selected = _.cloneDeep(xRayDetail);\n\n    const selectedOptions = _.cloneDeep(selected.selectedOptions);\n\n    delete selected.selectedOptions[key];\n    selected.selectedBodyParts.splice(selected.selectedBodyParts.indexOf(key), 1);\n    accData(selectedOptions).bodyCodes.map(bodyCode => {\n      selected.bodyPartsCodeList.splice(selected.bodyPartsCodeList.indexOf(bodyCode), 1);\n    });\n    setXRayDetail(selected);\n  };\n\n  const todayDate = displayDateTime(moment());\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"xray-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"details-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 11\n    }\n  }, IMAGING_FORM_NAME[activeTab], \"\\xA0-\\xA0\", residentName, \" (Room No \", roomNo, \")\\xA0\\xA0\", todayDate)), loading || Object.keys(jsonData).length == 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    height: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 35\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(jsonData).map((bodyPart, i) => {\n    return /*#__PURE__*/React.createElement(BodyPart, {\n      key: `bodyPart${i}`,\n      onShowDynamicModal: displayDynamicModal,\n      clonedCodeList: clonedCodeList,\n      clonedSelectedParts: clonedSelectedParts,\n      name: bodyPart,\n      isEdit: isEdit,\n      editCode: editCode,\n      data: jsonData[bodyPart],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 26\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bottom-part\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 13\n    }\n  }, \"Selected\\xA0-\\xA0\"), xRayDetail.selectedBodyParts.join(',')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"save-graft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: confirmClear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 15\n    }\n  }, \"Clear all\")), /*#__PURE__*/React.createElement(Button, {\n    loading: btnLoading,\n    size: \"lg\",\n    onClick: handleShowReviewPopUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 13\n    }\n  }, \"\\xA0Review & Submit\\xA0\\xA0\")))), showDynamicModal ? /*#__PURE__*/React.createElement(DynamicModal, {\n    onDynamicModalChange: handleDynamicModalChange,\n    isVisible: showDynamicModal,\n    data: _.cloneDeep(selectedPart),\n    isEdit: isEdit,\n    P_isDeleted: isDeleted,\n    selectedBodyParts: _.cloneDeep(xRayDetail.selectedBodyParts),\n    bodyPartsCodeList: _.cloneDeep(xRayDetail.bodyPartsCodeList),\n    pickedBodyPartsOpt: _.cloneDeep(xRayDetail.selectedOptions),\n    radioData: _.cloneDeep(radioData),\n    onCloseModal: hideDynamicModal,\n    roomNo: roomNo,\n    residentName: residentName,\n    residentAge: residentAge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 11\n    }\n  }) : null, showReviewPopUp ? /*#__PURE__*/React.createElement(ReviewPopup, {\n    detail: _.cloneDeep(xRayDetail),\n    deleteSelectedPart: deleteSelectedPart,\n    isVisible: showReviewPopUp,\n    authUser: authUser,\n    isEdit: isEdit,\n    editData: editData,\n    isDeleted: _.cloneDeep(isDeleted),\n    bodyPartsCodeList: _.cloneDeep(xRayDetail.bodyPartsCodeList),\n    onReasonTextChange: handleReasonTextChange,\n    onisUrgentChange: handleIsUrgentChange,\n    onIsInfectionControl: handleInfectionControl,\n    onCancel: hideReviewModal,\n    addNote: addNote,\n    addedNotes: _.cloneDeep(addedNotes),\n    notesCount: notesCount,\n    changeNoteCount: changeNoteCount,\n    changeNoteCounts: setNotesCount,\n    onExtensionChange: handleExtensionChange,\n    onPhoneNoChange: handlePhoneNoChange,\n    phoneNo: phoneNo,\n    extensionNo: extensionNo,\n    onUpdateNoteList: handleUpdateNoteList,\n    roomNo: roomNo,\n    residentName: residentName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 11\n    }\n  }) : null, isConfirmPopup ? /*#__PURE__*/React.createElement(ConfirmPopup, {\n    title: \"Clear Selections\",\n    visible: isConfirmPopup,\n    onOk: setInitialState,\n    onCancel: () => {\n      setConFirmPopup(false);\n    },\n    okText: \"Confirm\",\n    cancelText: \"Cancel\",\n    footerDescription: \"This action cannot be undone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 11\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 13\n    }\n  }, \"Are you sure you want to clear Selected options\")) : null);\n}\n\nexport default XRayDetail;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Xray/View/mobile-xray.js"],"names":["React","Component","useState","useEffect","Spin","ReviewPopup","DynamicModal","IMAGING_FORM_NAME","Toast","Button","displayDateTime","ConfirmPopup","BodyPart","priority","_","require","moment","initialXrayDetail","selectedOptions","selectedBodyParts","bodyPartsCodeList","XRayDetail","props","activeTab","isEdit","editDatas","imagingInfo","UltraSoundJson","setNotesCount","residentData","doctorId","authUser","jsonData","size","residentAge","setBtnLoading","loading","notesCount","redirectToListing","residentName","onSubmit","imagingJson","roomNo","btnLoading","showDynamicModal","setShowDynamicModal","showReviewPopUp","setShowReviewPopUp","addedNotes","setAddedNotes","selectedPart","setSelectedPart","radioData","setRadioData","isUrgent","setIsUrgent","isInfectionControl","setIsInfectionControl","reasonText","setReasonText","xRayDetail","setXRayDetail","editCode","setEditCode","editData","setEditData","undefined","isDeleted","setIsDeleted","isConfirmPopup","setConFirmPopup","isSubmit","setSubmit","extensionNo","setExtensionNo","phoneNo","setPhoneNo","setInitialState","Object","keys","length","console","log","phone","extension","setStateByeditData","handleSubmit","getInitialStateValues","handleShowReviewPopUp","e","stopPropagation","closeReviewPopUp","displayDynamicModal","data","hideDynamicModal","hideReviewModal","args","isSubmitted","updatedIsdeleted","doNotSubmit","hasOwnProperty","updatedDetail","handleDynamicModalChange","selectedParts","updatedcodeList","tempSelectedOpt","tempXRayDetail","cloneDeep","handleIsUrgentChange","val","handleInfectionControl","assignToState","tempEditData","parentObj","forEach","obj","oldCodes","code","isClickable","isDeleteObj","push","label","oldDeleted","optionList","bodyCodesList","other","optionItems","option","value","name","bodyCodes","radioButtons","radioOption","tempCodeList","tempObj","handleReasonTextChange","changeNoteCount","isDelete","tempNotesCount","error","formData","jsonObj","indexOf","customObj","filter","opt","tempValue","optionToadd","isSelected","isFound","filters","btnArr","radioBtn","radioOptionsList","clonedData","map","formObj","newObj","selPart","i","splice","warn","isVerbalOrder","_id","request","residentId","homeId","homeAreaId","imagingDiagnosticId","physicianId","formType","reason","isCancel","id","allNotes","note","key","createdAt","addedBy","isPublic","noteType","LOW","notes","confirmClear","addNote","tempAddedNotes","handleUpdateNoteList","updatedNoteList","handlePhoneNoChange","target","handleExtensionChange","clonedSelectedParts","clonedCodeList","handleDynamicModal","action","deleteSelectedPart","subKey","accData","temp","selected","bodyCode","todayDate","bodyPart","join"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport Spin from 'rc-spinner'\nimport ReviewPopup from './ReviewPopup/index'\nimport DynamicModal from './DynamicModal'\nimport { IMAGING_FORM_NAME } from '../../../constants/xray'\nimport { Toast, Button } from '../../../components/common/index'\nimport { displayDateTime } from '../../../util/moment'\nimport ConfirmPopup from '../../../components/common/ConfirmPopup'\n\nimport BodyPart from './BodyPart'\nimport { priority } from \"../../../constants/notes\";\nconst _ = require('lodash')\nconst moment = require('moment')\n\nconst initialXrayDetail = {\n  selectedOptions: {},\n  selectedBodyParts: [],\n  bodyPartsCodeList: []\n}\n\nfunction XRayDetail(props) {\n\n  const { activeTab, isEdit, editDatas, imagingInfo, UltraSoundJson, setNotesCount,\n    residentData, doctorId, authUser, jsonData, size, residentAge, setBtnLoading, loading, notesCount,\n    redirectToListing, residentName, onSubmit, imagingJson, roomNo, btnLoading\n  } = props\n\n  const [showDynamicModal, setShowDynamicModal] = useState(false)\n  const [showReviewPopUp, setShowReviewPopUp] = useState(false)\n  const [addedNotes, setAddedNotes] = useState([])\n  const [selectedPart, setSelectedPart] = useState(null)\n  const [radioData, setRadioData] = useState('')\n  const [isUrgent, setIsUrgent] = useState(false)\n  const [isInfectionControl, setIsInfectionControl] = useState(false)\n  const [reasonText, setReasonText] = useState('')\n  const [xRayDetail, setXRayDetail] = useState(initialXrayDetail)\n  const [editCode, setEditCode] = useState([])\n  const [editData, setEditData] = useState(undefined)\n  const [isDeleted, setIsDeleted] = useState({})\n  const [isConfirmPopup, setConFirmPopup] = useState(false)\n  const [isSubmit, setSubmit] = useState(false)\n  const [extensionNo, setExtensionNo] = useState(undefined)\n  const [phoneNo, setPhoneNo] = useState(undefined)\n\n  useEffect(() => {\n    setInitialState()\n    if (isEdit && editDatas && Object.keys(editDatas).length) {\n      setEditData(editDatas)\n      console.log(\"TCL: XRayDetail -> editDatas\", editDatas)\n      if (editDatas.phone) {\n        setPhoneNo(editDatas.phone)\n      }\n      if (editDatas.extension) {\n        setExtensionNo(editDatas.extension)\n      }\n      // setStateByeditData(true)\n    }\n  }, [activeTab, isEdit, editDatas])\n\n  useEffect(() => {\n    if (isEdit && editData && Object.keys(editData).length) {\n      setStateByeditData(true)\n    }\n  }, [editData])\n  useEffect(() => {\n    if (isSubmit) {\n      handleSubmit()\n    }\n  }, [isSubmit])\n\n  const getInitialStateValues = () => {\n    setShowReviewPopUp(false)\n    setShowDynamicModal(false)\n    setAddedNotes([])\n    setSelectedPart(null)\n    setRadioData('')\n    setIsUrgent(false)\n    setIsInfectionControl(false)\n    setReasonText('')\n    setXRayDetail(initialXrayDetail)\n  }\n  const handleShowReviewPopUp = (e) => {\n    e.stopPropagation()\n    setShowReviewPopUp(true)\n  }\n\n  const closeReviewPopUp = () => {\n    setShowReviewPopUp(false)\n  }\n\n  const displayDynamicModal = (data, radioData) => {\n    setRadioData(radioData)\n    setSelectedPart(data)\n    setShowDynamicModal(true)\n  }\n\n  const hideDynamicModal = () => {\n    setShowDynamicModal(false)\n    setSelectedPart(null)\n  }\n\n  const hideReviewModal = (args, isSubmitted, updatedIsdeleted, doNotSubmit) => {\n\n    if (isSubmitted && updatedIsdeleted) {\n      setIsDeleted(updatedIsdeleted)\n    }\n    if (args && args.hasOwnProperty('updatedDetail') && isSubmitted) {\n      setXRayDetail(args.updatedDetail)\n      setShowReviewPopUp(false)\n      setReasonText(args.reasonText)\n      if (!doNotSubmit) {\n        setSubmit(true)\n        // handleSubmit()\n      }\n    }\n    else {\n      setShowReviewPopUp(false)\n    }\n  }\n\n  const setInitialState = () => {\n    setConFirmPopup(false)\n    getInitialStateValues()\n    setIsDeleted({})\n\n  }\n\n  const handleDynamicModalChange = (selectedParts, selectedBodyParts, updatedcodeList, updatedIsdeleted) => {\n    // let tempSelectedOpt = _.cloneDeep(xRayDetail.selectedOptions)\n    let tempSelectedOpt = { ...selectedParts }\n    let tempXRayDetail = _.cloneDeep(xRayDetail)\n    tempXRayDetail = {\n      selectedOptions: tempSelectedOpt,\n      selectedBodyParts,\n      bodyPartsCodeList: updatedcodeList\n    }\n    setIsDeleted(updatedIsdeleted)\n    setXRayDetail(tempXRayDetail)\n  }\n  const handleIsUrgentChange = (val) => {\n    setIsUrgent(val)\n  }\n  const handleInfectionControl = (val) => {\n    setIsInfectionControl(val)\n  }\n  const setStateByeditData = (assignToState) => {\n    let tempEditData = _.cloneDeep(editData)\n    if (tempEditData && tempEditData.selectedBodyParts && tempEditData.selectedBodyParts.length) {\n      let parentObj = {}, selectedBodyParts = [], bodyPartsCodeList = []\n      tempEditData.selectedBodyParts.forEach(obj => {\n        if (assignToState) {\n          setEditCode(oldCodes => [...oldCodes, obj.code])\n        }\n        if (obj.isClickable) {\n\n          let isDeleteObj = false\n          if (assignToState && obj.hasOwnProperty('isDeleted') && obj.isDeleted) {\n            isDeleteObj = true\n          }\n          if (!isDeleteObj) {\n            bodyPartsCodeList.push(obj.code)\n            selectedBodyParts.push(obj.label)\n            if (assignToState) {\n              setIsDeleted(oldDeleted => ({ ...oldDeleted, [obj.label]: false }))\n            }\n            let optionList = []\n            let bodyCodesList = []\n            let other = {}\n            obj.optionItems.forEach(option => {\n              if (option.hasOwnProperty(\"value\") && option.value.length > 0) {\n                other[option.code] = option.value\n              }\n              optionList.push(option.name)\n              bodyPartsCodeList.push(option.code)\n              bodyCodesList.push(option.code)\n            })\n            bodyCodesList.push(obj.code)\n            parentObj = {\n              ...parentObj,\n              [obj.label]: {\n                optionItems: optionList,\n                bodyCodes: bodyCodesList\n              }\n            }\n            if (Object.keys(other).length) {\n              parentObj[obj.label] = {\n                ...parentObj[obj.label],\n                other: { ...other }\n              }\n            }\n          }\n        }\n        else {\n          if (obj.optionItems.length) {\n            obj.optionItems.forEach(option => {\n              if (option.radioButtons && option.radioButtons.length) {\n                option.radioButtons.forEach(radioOption => {\n                  let isDeleteObj = false\n                  if (assignToState && obj.hasOwnProperty('isDeleted') && obj.isDeleted) {\n                    isDeleteObj = true\n                  }\n                  if (!isDeleteObj) {\n                    bodyPartsCodeList.push(obj.code)\n                    selectedBodyParts.push(obj.label)\n                    if (assignToState) {\n                      setIsDeleted(oldDeleted => ({ ...oldDeleted, [obj.label]: false }))\n                    }\n                    if (radioOption.optionItems.length) {\n                      let tempCodeList = []\n                      let optionList = []\n                      let bodyCodesList = []\n                      let other = {}\n                      radioOption.optionItems.forEach(obj => {\n                        if (obj.hasOwnProperty('value') && obj.value.length > 0) {\n                          other = {\n                            ...other,\n                            [obj.code]: obj.value\n                          }\n                        }\n                        optionList.push(obj.name)\n                        bodyPartsCodeList.push(obj.code)\n                        tempCodeList.push(obj.code)\n                      })\n                      tempCodeList.push(obj.code, radioOption.code)\n                      bodyCodesList.push(obj.code)\n                      let tempObj = {\n                        [radioOption.label]: {\n                          optionItems: optionList,\n                          bodyCodes: tempCodeList\n                        }\n                      }\n                      if (Object.keys(other).length > 0) {\n                        tempObj[radioOption.label] = {\n                          ...tempObj[radioOption.label],\n                          other: { ...other }\n                        }\n                      }\n                      bodyPartsCodeList.push(obj.code, radioOption.code)\n                      parentObj[obj.label] = {\n                        // ...parentObj[obj.label],\n                        ...tempObj\n                      }\n                    }\n                  }\n                })\n\n              }\n            })\n          }\n        }\n      })\n      let tempXRayDetail = {\n        selectedOptions: parentObj,\n        selectedBodyParts: selectedBodyParts,\n        bodyPartsCodeList: bodyPartsCodeList\n      }\n      if (isEdit && tempEditData && tempEditData.isUrgent) {\n        setIsUrgent(tempEditData.isUrgent)\n      }\n      // console.log(\"tempXRayDetail\", tempXRayDetail)\n      if (assignToState) {\n        console.log(\"TCL: setStateByeditData -> setXRayDetail\")\n        setXRayDetail(tempXRayDetail)\n      }\n      else {\n        return tempXRayDetail\n      }\n\n    }\n  }\n  const handleReasonTextChange = () => {\n    setReasonText(reasonText)\n  }\n  const changeNoteCount = (isDelete) => {\n    const tempNotesCount = isDelete && isDelete === true ? notesCount - 1 : notesCount + 1\n    setNotesCount(tempNotesCount)\n  }\n  const handleSubmit = () => {\n    let { bodyPartsCodeList, selectedOptions } = _.cloneDeep(xRayDetail)\n\n    if (Object.keys(selectedOptions).length === 0) {\n      Toast.error('Empty Request cant be submitted')\n      return\n    }\n    let jsonData = _.cloneDeep(imagingJson)\n    let formData = []\n    jsonData.forEach(jsonObj => {\n      if (bodyPartsCodeList.indexOf(jsonObj.code) >= 0) {\n        let customObj = { ...jsonObj }\n        if (jsonObj.isClickable) {\n          let filter = []\n          jsonObj.optionItems.forEach(opt => {\n            if (bodyPartsCodeList.indexOf(opt.code) >= 0) {\n              if (opt.hasOwnProperty('value')) {\n                let tempValue = ''\n                if (selectedOptions[jsonObj.label] && selectedOptions[jsonObj.label].other\n                  && selectedOptions[jsonObj.label].other[opt.code]) {\n                  tempValue = selectedOptions[jsonObj.label].other[opt.code]\n                }\n                let optionToadd = {\n                  ...opt,\n                  value: tempValue,\n                  isSelected: true\n                }\n                filter.push({ ...optionToadd })\n              }\n              else {\n                filter.push({ ...opt, isSelected: true })\n              }\n            }\n          })\n          if (isEdit) {\n            customObj.isDeleted = isDeleted[customObj.label] ? true : false\n          }\n          customObj.optionItems = filter\n          customObj.isSelected = true\n        }\n        else {\n          let isFound = false\n          let filters = []\n          jsonObj.optionItems.forEach(opt => {\n            if (opt.radioButtons) {\n              let btnArr = []\n              opt.radioButtons.forEach(radioBtn => {\n                if (bodyPartsCodeList.indexOf(radioBtn.code) >= 0) {\n                  let radioOptionsList = []\n                  radioBtn.optionItems.forEach(radioOption => {\n                    if (bodyPartsCodeList.indexOf(radioOption.code) >= 0) {\n                      let tempValue = ''\n                      if (radioOption.hasOwnProperty('value')) {\n                        if (selectedOptions[jsonObj.label] && selectedOptions[jsonObj.label][radioBtn.label]\n                          && selectedOptions[jsonObj.label][radioBtn.label].other &&\n                          selectedOptions[jsonObj.label][radioBtn.label].other[radioOption.code]) {\n                          tempValue = selectedOptions[jsonObj.label][radioBtn.label].other[radioOption.code]\n                        }\n                      }\n                      let optionToadd = {\n                        ...radioOption,\n                        value: tempValue,\n                        isSelected: true\n                      }\n                      radioOptionsList.push({ ...optionToadd })\n                    }\n                  })\n                  radioBtn.optionItems = radioOptionsList\n                  btnArr.push({ ...radioBtn, isSelected: true })\n                  isFound = true\n                }\n              })\n              if (isFound) {\n                filters.push({ ...opt, radioButtons: btnArr, isSelected: true })\n              }\n            }\n          })\n          if (isEdit) {\n            customObj.isDeleted = isDeleted[customObj.label] ? true : false\n          }\n          customObj.optionItems = filters\n        }\n        formData.push({ ...customObj })\n      }\n    })\n    if (isEdit) {\n      let tempEditData = _.cloneDeep(editData)\n      if (tempEditData && tempEditData.selectedBodyParts && tempEditData.selectedBodyParts.length) {\n        let clonedData = _.cloneDeep(tempEditData.selectedBodyParts)\n        formData = formData.map(formObj => {\n          let newObj = formObj\n          clonedData.forEach((selPart, i) => {\n            if (formObj.code === selPart.code) {\n              newObj = { ...selPart, ...formObj }\n              clonedData.splice(i, 1)\n            }\n          })\n          return newObj\n        })\n      }\n    }\n    if (formData.length === 0) {\n      Toast.warn('You cant submit empty requisition')\n      return\n    }\n    let isVerbalOrder = false\n    if (isEdit) {\n      isVerbalOrder = editDatas.isVerbalOrder\n    }\n    else {\n      if (authUser._id !== doctorId) {\n        isVerbalOrder = true\n      }\n    }\n    console.log('formData', formData)\n    let request = {\n      residentId: residentData._id,\n      // residentInfoId: residentData.patientInfoId.id,\n      homeId: authUser.homeId._id,\n      homeAreaId: residentData.homeAreaId || '',\n      imagingDiagnosticId: imagingInfo._id || '',\n      physicianId: doctorId,\n      isVerbalOrder: isVerbalOrder,\n      isUrgent: isUrgent,\n      isInfectionControl: isInfectionControl,\n      formType: +activeTab,\n      selectedBodyParts: formData,\n    }\n\n    if (reasonText.length > 0) {\n      request.reason = reasonText\n    }\n    else if (isEdit && editData.reason && editData.reason.length > 0) {\n      request.reason = reasonText\n    }\n    if (isUrgent && phoneNo && extensionNo) {\n      request.phone = phoneNo\n      request.extension = extensionNo\n    }\n\n    if (isEdit) {\n      request.isCancel = false\n      request.id = editData._id\n    }\n    else {\n      let allNotes = _.cloneDeep(addedNotes);\n      allNotes.map(note => {\n        delete note.key;\n        delete note.createdAt;\n        note.addedBy = note.addedBy.id;\n        note.isPublic = true;\n        note.noteType = '5fe0724ff1c36b129ac204ab'; //check\n        note.priority = priority.LOW;\n        return note;\n      })\n      request.notes = _.cloneDeep(allNotes)\n    }\n    request.isCancel = false;\n    onSubmit(request)\n  }\n  const confirmClear = (e) => {\n    e.stopPropagation()\n    setConFirmPopup(true)\n  }\n  const addNote = note => {\n    let tempAddedNotes = _.cloneDeep(addedNotes)\n    tempAddedNotes.push({ ...note, key: addedNotes.length })\n    setNotesCount(tempAddedNotes.length)\n    setAddedNotes(tempAddedNotes)\n  }\n  const handleUpdateNoteList = (updatedNoteList) => {\n    if (updatedNoteList && updatedNoteList.length > 0) {\n      setNotesCount(updatedNoteList.length)\n      setAddedNotes(updatedNoteList)\n    }\n  }\n  const handlePhoneNoChange = (e) => {\n    if (e === undefined) {\n      setPhoneNo(undefined)\n    }\n    else if (e.target.value && e.target.value.length < 12) {\n      setPhoneNo(e.target.value)\n    }\n    else if (!e.target.value) {\n      setPhoneNo(undefined)\n    }\n  }\n  const handleExtensionChange = (e) => {\n    if (e === undefined) {\n      setExtensionNo(undefined)\n    }\n    else if (e.target.value && e.target.value.length <= 5) {\n      setExtensionNo(e.target.value)\n    }\n    else if (!e.target.value) {\n      setExtensionNo(undefined)\n    }\n  }\n\n  let clonedSelectedParts = []\n  let clonedCodeList = []\n  if (xRayDetail && xRayDetail.selectedBodyParts.length > 0) {\n    clonedSelectedParts = xRayDetail.selectedBodyParts\n  }\n  // console.log(\"TCL: XRayDetail -> clonedCodeList\", clonedCodeList)\n  if (xRayDetail && xRayDetail.bodyPartsCodeList.length > 0) {\n    clonedCodeList = xRayDetail.bodyPartsCodeList\n  }\n\n  const handleDynamicModal = (action) => {\n    setShowDynamicModal(action)\n  }\n\n\n  const deleteSelectedPart = (key, subKey) => {\n    const accData = (temp) => {\n      if (subKey) {\n        return _.cloneDeep(temp[key][subKey])\n      } else return _.cloneDeep(temp[key]);\n    }\n    const selected = _.cloneDeep(xRayDetail);\n    const selectedOptions = _.cloneDeep(selected.selectedOptions);\n    delete selected.selectedOptions[key];\n    selected.selectedBodyParts.splice(selected.selectedBodyParts.indexOf(key), 1);\n    accData(selectedOptions).bodyCodes.map(bodyCode => {\n      selected.bodyPartsCodeList.splice(selected.bodyPartsCodeList.indexOf(bodyCode), 1)\n    })\n\n    setXRayDetail(selected)\n  }\n\n  const todayDate = displayDateTime(moment());\n  return (\n    <div className=\"xray-details\">\n      <div className=\"details-table\">\n        <div className=\"main-title\">\n          <h4>\n            {IMAGING_FORM_NAME[activeTab]}&nbsp;-&nbsp;{residentName} (Room No {roomNo})&nbsp;&nbsp;{todayDate}\n          </h4>\n        </div>\n        {\n          (loading || Object.keys(jsonData).length == 0) ?\n            <div className=\"spin\"><Spin height={40} /></div> :\n            <>\n              {\n                Object.keys(jsonData).map((bodyPart, i) => {\n                  return <BodyPart key={`bodyPart${i}`}\n                    onShowDynamicModal={displayDynamicModal}\n                    clonedCodeList={clonedCodeList}\n                    clonedSelectedParts={clonedSelectedParts}\n                    name={bodyPart}\n                    isEdit={isEdit}\n                    editCode={editCode}\n                    data={jsonData[bodyPart]} />\n                })\n              }\n            </>\n        }\n      </div>\n      <div className=\"bottom-part\">\n        <div className=\"d-flex\">\n          <label>\n            <span>Selected&nbsp;-&nbsp;</span>{xRayDetail.selectedBodyParts.join(',')}\n          </label>\n          <div className=\"d-flex-end\">\n            <div className=\"save-graft\">\n              <span onClick={confirmClear}>Clear all</span>\n            </div>\n            <Button loading={btnLoading} size=\"lg\" onClick={handleShowReviewPopUp}>&nbsp;Review & Submit&nbsp;&nbsp;</Button>\n          </div>\n        </div>\n      </div>\n      {\n        showDynamicModal ?\n          <DynamicModal\n            onDynamicModalChange={handleDynamicModalChange}\n            isVisible={showDynamicModal}\n            data={_.cloneDeep(selectedPart)}\n            isEdit={isEdit}\n            P_isDeleted={isDeleted}\n            selectedBodyParts={_.cloneDeep(xRayDetail.selectedBodyParts)}\n            bodyPartsCodeList={_.cloneDeep(xRayDetail.bodyPartsCodeList)}\n            pickedBodyPartsOpt={_.cloneDeep(xRayDetail.selectedOptions)}\n            radioData={_.cloneDeep(radioData)}\n            onCloseModal={hideDynamicModal}\n            roomNo={roomNo}\n            residentName={residentName}\n            residentAge={residentAge}\n          /> : null\n      }\n      {\n        showReviewPopUp ?\n          <ReviewPopup\n            detail={_.cloneDeep(xRayDetail)}\n            deleteSelectedPart={deleteSelectedPart}\n            isVisible={showReviewPopUp}\n            authUser={authUser}\n            isEdit={isEdit}\n            editData={editData}\n            isDeleted={_.cloneDeep(isDeleted)}\n            bodyPartsCodeList={_.cloneDeep(xRayDetail.bodyPartsCodeList)}\n            onReasonTextChange={handleReasonTextChange}\n            onisUrgentChange={handleIsUrgentChange}\n            onIsInfectionControl={handleInfectionControl}\n            onCancel={hideReviewModal}\n            addNote={addNote}\n            addedNotes={_.cloneDeep(addedNotes)}\n            notesCount={notesCount}\n            changeNoteCount={changeNoteCount}\n            changeNoteCounts={setNotesCount}\n            onExtensionChange={handleExtensionChange}\n            onPhoneNoChange={handlePhoneNoChange}\n            phoneNo={phoneNo}\n            extensionNo={extensionNo}\n            onUpdateNoteList={handleUpdateNoteList}\n            roomNo={roomNo}\n            residentName={residentName}\n          />\n          : null\n      }\n      {\n        isConfirmPopup ?\n          <ConfirmPopup\n            title='Clear Selections'\n            visible={isConfirmPopup}\n            onOk={setInitialState}\n            onCancel={() => { setConFirmPopup(false) }}\n            okText=\"Confirm\"\n            cancelText=\"Cancel\"\n            footerDescription=\"This action cannot be undone\"\n          > <p>Are you sure you want to clear Selected options</p></ConfirmPopup > : null\n      }\n      {/* {\n        fingersPopup && <FingersPopup visible={fingersPopup}\n        // onClosed={() => modalActionFn('fingersPopup', false)}\n        />\n      } */}\n    </div>\n  );\n}\n\nexport default XRayDetail;\n"]},"metadata":{},"sourceType":"module"}