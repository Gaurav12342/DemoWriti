{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/components/Prescription/UpsertPrescription.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createForm } from 'rc-form';\nimport { Input, ErrorMsg, Select, Option, Button, TextArea, Toast, Confirm } from '../common';\nimport Table from '../common/Table/index';\nimport RadioButtonGroup from '../common/RadioButtonGroup';\nimport SearchMedication from '../SearchMedication/SearchMedicationCopy';\nimport ReminderForm from '../common/Reminder';\nimport DoctorFilter from '../DoctorFilter';\nimport IndicationJson from '../../assets/files/JSON/indications.json';\nimport { Edit } from \"../../assets/images/resident-detail\";\nimport { Reminder, Notes } from \"../../assets/images/pmr\";\nimport { Cancel, Correct, PlusBtn } from \"../../assets/images/resident-detail\";\nimport { ORDER_TYPE, RX_TYPE, STATUS, TYPE } from '../../constants/prescription';\nimport { isDrOrNp, getUserNameWithDesignation } from '../../util/common';\nimport SavePrescriptionPopup from \"../../components/common/Popup/savePrescription-popup\";\nimport NotesModal from '../../components/NotesPopup/List';\nimport MedFavourite from './MedFavourite';\nimport { addFavouriteMeds, upsert } from '../../services/api/routes/prescription';\nimport axios, { getSubMasters } from '../../services/api/services/common';\nimport uuid from 'uuid';\nimport _ from 'lodash';\nimport { TODO_CATEGORY, SUB_CATEGORY } from '../../constants/todo';\n\nconst PrescriptionForm = props => {\n  const {\n    edit,\n    form,\n    authUser,\n    residentDetail,\n    onOk\n  } = props;\n  const {\n    getFieldError,\n    getFieldDecorator,\n    validateFields,\n    setFieldsValue,\n    getFieldsValue,\n    resetFields\n  } = form;\n  let errors;\n  const [visibleReminder, setVisibleReminder] = useState(false);\n  const [visibleNotes, setVisibleNotes] = useState(false);\n  const [reminderObj, setReminderObj] = useState(null);\n  const [loader, setLoader] = useState(false);\n  const [saveLoader, setSaveLoader] = useState(false);\n  const [orderType, setOrderType] = useState(ORDER_TYPE['ROUTINE']);\n  const [orderTypes, setOrderTypes] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [notesData, setNotesData] = useState([]);\n  const [rowId, setRowId] = useState();\n  const [selectedDrug, setSelectedDrug] = useState(null);\n  const [visibleSave, setVisibleSave] = useState(false);\n  const [requestObj, setRequestObj] = useState({\n    medStrip: false\n  });\n  const [fav, setFav] = useState(false);\n  const [isUrgent, setIsUrgent] = useState('no');\n  const [editId, setEditId] = useState('');\n  const [indiacationData, setIndicationData] = useState(null);\n  const [notesModal, setNotesModal] = useState(false);\n  const [notesFilterOptions, setNotesFilterOptions] = useState({});\n  const currentModalData = React.useRef();\n  const currentResidentId = useSelector(state => state.resident.currentResidentId);\n  const initObj = {\n    // physicianId: undefined,\n    medication: '',\n    direction: '',\n    indication: '',\n    progressNote: '',\n    pharmacyNote: ''\n  };\n  useEffect(() => {\n    // setSubMasterLoader(true)\n    getSubMasters('RXTYPE').then(res => {\n      // setSubMasterLoader(false)\n      setOrderTypes(res);\n    }).catch(err => {// setSubMasterLoader(false)\n    });\n  }, []);\n  useEffect(() => {\n    if (edit) {\n      const {\n        prescriptionMedication,\n        physicianId,\n        medStrip,\n        orderType\n      } = edit; // set medications in table\n\n      if ((prescriptionMedication === null || prescriptionMedication === void 0 ? void 0 : prescriptionMedication.length) > 0) {\n        let medicineData = _.cloneDeep(prescriptionMedication);\n\n        medicineData = medicineData.map((x, index) => {\n          x.key = index;\n          x.medicineFullName = x.medicineFullName || x.name || x.medication;\n          return x;\n        });\n        setTableData(medicineData); // set physician\n\n        setFieldsValue({\n          physicianId: physicianId === null || physicianId === void 0 ? void 0 : physicianId._id\n        }); //set medstrip\n\n        setRequestObj({ ...requestObj,\n          medStrip: medStrip,\n          physicianId: physicianId === null || physicianId === void 0 ? void 0 : physicianId._id\n        });\n      }\n\n      setIsUrgent(edit.isUrgent ? 'yes' : 'no');\n    }\n  }, [edit]);\n\n  const selectMedication = (value, option) => {\n    if (option.hasOwnProperty('prescrible_name')) setSelectedDrug(option);\n  };\n\n  const handlePhyChange = val => {\n    let tempReqObj = { ...requestObj\n    };\n    tempReqObj.physicianId = val;\n    setRequestObj(tempReqObj);\n  };\n\n  const handleSave = params => {\n    validateFields((error, values) => {\n      if (error) return;\n      if (!params) setSaveLoader(true);\n      let medObj = { ...values,\n        orderType: orderType\n      }; // if (selectedDrug && Object.keys(selectedDrug).length > 0) {\n      //     medObj.drugId = selectedDrug.drugId;\n      //     medObj.name = selectedDrug.name\n      //     medObj.strength = selectedDrug.strengthUnit;\n      //     medObj.dosage = selectedDrug.dosageForm;\n      //     medObj.medicineFullName = selectedDrug.medicineFullName;\n      // }\n      // else {\n\n      medObj = { ...medObj,\n        \"name\": values.medication,\n        \"strength\": selectedDrug === null || selectedDrug === void 0 ? void 0 : selectedDrug.strength_number,\n        \"dosage\": selectedDrug === null || selectedDrug === void 0 ? void 0 : selectedDrug.dosage_form,\n        \"medicineFullName\": values.medication\n      }; // medObj.name = values.medication\n      // }\n\n      delete medObj.medication;\n\n      if (params === 'fav') {\n        addToFav(medObj);\n        return;\n      }\n\n      if (rowId >= 0 && rowId < tableData.length) {\n        let newData = [...tableData];\n        newData[rowId] = { ...medObj,\n          key: rowId,\n          _id: editId\n        };\n        setTableData(newData);\n      } else {\n        if (tableData.length < 3) {\n          let newData = [...tableData];\n          newData.push({ ...medObj,\n            key: newData.length\n          });\n          setTableData(newData); // resetFields()\n        } else {\n          Toast.error('only 3 Medications are allowed');\n        }\n      } // resetFields()\n\n\n      handleCancelForm();\n      setSaveLoader(false);\n    });\n  };\n\n  const handleCancelForm = () => {\n    setFieldsValue(initObj);\n    setRowId();\n    setFav(false);\n    setEditId('');\n    setSelectedDrug(null);\n    setOrderType(ORDER_TYPE['ROUTINE']);\n  };\n\n  const cancelPresc = str => {\n    handleCancelForm();\n    setTableData([]);\n    setOrderType(ORDER_TYPE['ROUTINE']);\n    setRequestObj({\n      medStrip: false,\n      physicianId: undefined\n    });\n    setFieldsValue({\n      physicianId: undefined\n    });\n    if (str !== 'ok') props.onCancel();\n  };\n\n  const setReminder = (visible, data) => {\n    if (visible) {\n      setReminderObj({});\n    } else {\n      setReminderObj(null);\n\n      if (data) {\n        let newData = [...tableData];\n        let index = newData.findIndex(obj => obj.key === reminderObj.key);\n\n        if (index >= 0) {\n          newData[index] = { ...newData[index],\n            notes: data\n          };\n        }\n\n        setTableData(newData);\n      }\n    }\n\n    setVisibleReminder(visible);\n  };\n\n  const addToFav = async params => {\n    let req = {\n      \"name\": params.name,\n      \"strength\": params.strength,\n      \"dosage\": params.dosage,\n      \"medicineFullName\": params.medicineFullName || params.name,\n      \"indication\": params.indication,\n      \"direction\": params.direction,\n      \"isActive\": true\n    };\n    let res = await axios({ ...addFavouriteMeds,\n      data: req\n    });\n\n    if (res) {\n      if (res.code === 'OK') {\n        setFav(true); // resetFields()\n\n        Toast.success(res.message);\n      } else Toast.error(res.message);\n    }\n  };\n\n  const onCancelRx = record => {\n    Confirm.confirm({\n      title: 'Are you sure, You want to cancel this Rx?',\n\n      onOk() {\n        let newData = [...tableData];\n        let indexToDel = record.key;\n\n        if (edit) {\n          newData[indexToDel].isDelete = true;\n        } else {\n          newData.splice(indexToDel, 1);\n\n          if (newData.length) {\n            newData = newData.map((x, i) => {\n              x.key = i;\n              return x;\n            });\n          }\n        }\n\n        setTableData(newData);\n        setEditId();\n        setRowId();\n      },\n\n      onCancel() {}\n\n    });\n  };\n\n  const onEditRx = record => {\n    setEditId(record._id);\n    setRowId(record.key);\n    let obj = {\n      // physicianId: record.physicianId,\n      medication: record.medicineFullName,\n      direction: record.direction,\n      indication: record.indication,\n      progressNote: record.progressNote,\n      pharmacyNote: record.pharmacyNote\n    };\n    setOrderType(record.orderType);\n    setFieldsValue(obj);\n  };\n\n  const getColumns = [{\n    title: 'Sr.No',\n    key: 'index',\n    render: (text, record, index) => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 46\n      }\n    }, index + 1)\n  }, {\n    title: 'Medication',\n    dataIndex: 'medicineFullName',\n    render: (text, record) => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 40\n      }\n    }, text || record.name || record.medication) // `${text} ${record.medStrength ? `, ${record.medStrength}` : ''} ${record.medDosageType ? `, ${record.medDosageType}` : ''} `}</span>),\n\n  }, {\n    title: 'Directions',\n    dataIndex: 'direction',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 32\n      }\n    }, text)\n  }, {\n    title: 'Indication',\n    dataIndex: 'indication',\n    render: text => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 32\n      }\n    }, text)\n  }, {\n    title: 'Actions',\n    width: '300px',\n    // render: (record, row) => <div className='patient_order_d ac' style={{ textAlign: 'center' }}>\n    render: (row, record) => {\n      var _record$notes;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"patient_order_d ac\",\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 38\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => visibleNotesModal(true, record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"action_ico\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Notes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 29\n        }\n      }), ((_record$notes = record.notes) === null || _record$notes === void 0 ? void 0 : _record$notes.length) > 0 ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"todo tot read\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 33\n        }\n      }, record.notes.length) : null), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 25\n        }\n      }, \"Notes\")),\n      /*#__PURE__*/\n      // edit ?\n      React.createElement(\"a\", {\n        onClick: () => onEditRx(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Edit, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 29\n        }\n      }, \"Edit Rx\")) // : null\n      , /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => onCancelRx(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Cancel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 25\n        }\n      }, \"Cancel Rx\"))));\n    }\n  }];\n\n  const handleVisibleSave = (visible, str) => {\n    if (filteredTable.length === 0) {\n      Toast.error('Please Add Medications');\n      return;\n    }\n\n    if (!isDrOrNp(authUser) && !form.getFieldValue('physicianId')) {\n      Toast.error('Please Select Physician');\n      return;\n    }\n\n    if (str) savePresc(str);\n    setVisibleSave(visible);\n  };\n\n  const createRequest = str => {\n    var _residentDetail$homeA;\n\n    let newTableData = [...tableData];\n    newTableData = _.map(newTableData, function (obj) {\n      return _.omit(obj, ['key', 'physicianId']);\n    });\n    let request = {\n      \"medStrip\": requestObj.medStrip,\n      // \"isCancel\": true, while cancel\n      \"physicianId\": isDrOrNp(authUser) ? authUser._id : requestObj.physicianId,\n      \"residentId\": residentDetail._id,\n      \"type\": TYPE.COE,\n      \"rxType\": RX_TYPE.PRESCRIPTION,\n      \"status\": STATUS.SUBMITTED,\n      \"deviceId\": uuid(),\n      \"isVerbalOrder\": isDrOrNp(authUser) ? false : true,\n      \"homeAreaId\": (_residentDetail$homeA = residentDetail.homeAreaId) === null || _residentDetail$homeA === void 0 ? void 0 : _residentDetail$homeA._id,\n      \"attachments\": [],\n      \"prescriptionMedication\": newTableData,\n      \"isUrgent\": isUrgent === 'yes'\n    };\n\n    if (edit) {\n      request = { ...request,\n        \"status\": edit.status === STATUS.DRAFT ? STATUS.SUBMITTED : STATUS.EDITED,\n        \"_id\": edit._id,\n        \"uniqueId\": edit.uniqueId\n      }; // add or remove _id for medications added in db or not\n\n      let existingMedicationIds = _.map(edit.prescriptionMedication, '_id');\n\n      request.prescriptionMedication = request.prescriptionMedication.map(x => {\n        if (x._id) {\n          let existing = existingMedicationIds.includes(x._id);\n          if (!existing) delete x._id;\n        }\n\n        return x;\n      });\n    } else {\n      request.prescriptionMedication = _.map(request.prescriptionMedication, d => _.omit(d, \"_id\"));\n    }\n\n    if (str === 'draft') request.status = STATUS.DRAFT;\n    return request;\n  };\n\n  const savePresc = async str => {\n    if (tableData.length === 0) {\n      Toast.error('Please Add Medications');\n      return;\n    }\n\n    let req = createRequest(str);\n\n    if (!req.physicianId) {\n      Toast.error('Please Select Physician');\n      return;\n    }\n\n    try {\n      setLoader(true);\n      let res = await axios({ ...upsert,\n        data: req\n      });\n\n      if (res) {\n        if (res.code === 'OK') {\n          Toast.success(res.message);\n          cancelPresc('ok');\n          onOk();\n        } else Toast.error(res.message);\n      }\n\n      setLoader(false);\n    } catch {\n      setLoader(false);\n    }\n  };\n\n  const setRowStyle = (record, index) => {\n    return rowId === index ? 'custom-row-style' : '';\n  };\n\n  useEffect(() => {}, [rowId]);\n\n  const handleSaveFav = favMeds => {\n    let newTableData = [...tableData];\n    newTableData = newTableData.concat(favMeds);\n    newTableData = newTableData.map((x, i) => {\n      if (!x.key) x.key = i;\n      return x;\n    });\n    setTableData(newTableData);\n  };\n\n  const handleChaneUrgent = e => {\n    setIsUrgent(e.target.value);\n  };\n\n  const visibleNotesModal = (visible, record, noteCount, resOptions) => {\n    console.log(\"visibleNotesModal -> visible, record, noteCount, resOptions\", visible, record, noteCount, resOptions); // setNotesData(newData)\n\n    setNotesModal(visible);\n    setNotesFilterOptions({});\n\n    if (noteCount) {\n      let newData = [...tableData];\n      let index = newData.findIndex(obj => obj.key === currentModalData.current.key);\n\n      if (index >= 0) {\n        newData[index] = { ...newData[index],\n          notes: resOptions.notesData\n        };\n      }\n\n      setTableData(newData);\n      console.log(\"visibleNotesModal -> newData\", newData);\n    }\n\n    currentModalData.current = visible ? { ...record\n    } : null;\n  };\n\n  const filteredTable = tableData.filter(x => !x.isDelete);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"add_resident\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"prep_right_wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box-inner-border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sub-box-border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 29\n    }\n  }, `${edit ? 'Update' : 'Add'} Rx Order for - ${residentDetail.mergeLFName} \n                                    ${!isDrOrNp(authUser) ? `(VO/TO By ${getUserNameWithDesignation(authUser)}\n                                         ${edit && edit.physicianId && edit.physicianId._id ? `for ${getUserNameWithDesignation(edit.physicianId)}` : ''} \n                                       )` : ''}`), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 29\n    }\n  }, edit === null || edit === void 0 ? void 0 : edit.orderNumber)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_row d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-create-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sub-text \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 37\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rx-btns drug-bts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 41\n    }\n  }, orderTypes === null || orderTypes === void 0 ? void 0 : orderTypes.map(x => {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 60\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: orderType === x._id ? 'rout-btn' : '',\n      onClick: () => setOrderType(x._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 57\n      }\n    }, x.name));\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"filter_check\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: requestObj.medStrip,\n    onChange: () => setRequestObj({ ...requestObj,\n      medStrip: !requestObj.medStrip\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 41\n    }\n  }, \"Start with next med strips\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 37\n    }\n  }, !isDrOrNp(authUser) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-b-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 49\n    }\n  }, getFieldDecorator('physicianId', {\n    rules: [{\n      required: false,\n      message: 'Please Select Physician'\n    }]\n  })( /*#__PURE__*/React.createElement(DoctorFilter, {\n    onChange: handlePhyChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 57\n    }\n  })), (errors = getFieldError('physicianId')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 96\n    }\n  }) : null) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-b-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 41\n    }\n  }, getFieldDecorator('medication', {\n    rules: [{\n      required: true,\n      message: `Please enter medication` // whitespace: true,\n\n    }]\n  })( /*#__PURE__*/React.createElement(SearchMedication, {\n    onSelectMedication: selectMedication,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 49\n    }\n  })), (errors = getFieldError('medication')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 87\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group textInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 41\n    }\n  }, getFieldDecorator('direction', {\n    rules: [{\n      required: false,\n      message: `Please enter directions`,\n      whitespace: true\n    }]\n  })( /*#__PURE__*/React.createElement(TextArea, {\n    placeholder: \"Directions\",\n    style: {\n      height: '81px'\n    },\n    class: \"inputForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 49\n    }\n  })), (errors = getFieldError('direction')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 86\n    }\n  }) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 41\n    }\n  }, getFieldDecorator('indication', {\n    rules: [{\n      required: false,\n      message: `Please enter indication`,\n      whitespace: true\n    }]\n  })( /*#__PURE__*/React.createElement(Select, {\n    combobox: true,\n    showSearch: true,\n    allowClear: true,\n    placeholder: \"Select Indication\" // optionFilterProp=\"children\"\n    ,\n    filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 49\n    }\n  }, IndicationJson.map(data => {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: data.name,\n      key: data.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 68\n      }\n    }, data.name);\n  }))), (errors = getFieldError('indication')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 87\n    }\n  }) : null, getFieldDecorator('progressNote')( /*#__PURE__*/React.createElement(TextArea, {\n    placeholder: \"Progress Notes \\n(will push to PCC/MED e-care)\",\n    class: \"inputForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 49\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"right-textarea primary-notes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 37\n    }\n  }, getFieldDecorator('pharmacyNote')( /*#__PURE__*/React.createElement(TextArea, {\n    placeholder: \"Notes to Pharmacy\",\n    class: \"inputForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 45\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex j-space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plus-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex mr-20\",\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 41\n    }\n  }, fav ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"green-bg-plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Correct, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 53\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"green-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 53\n    }\n  }, \"Added\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"green-bg-plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(PlusBtn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 61\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"green-text\",\n    onClick: () => handleSave('fav'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 57\n    }\n  }, \"Add to Favourites\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"d-flex green-text mr-10\",\n    style: {\n      alignItems: 'center',\n      'font-weight': 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 45\n    }\n  }, \"  Urgent Order\"), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"filter_check radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"medium\",\n    value: \"yes\",\n    checked: isUrgent === 'yes',\n    onChange: handleChaneUrgent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"checkbox radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 49\n    }\n  }, \"Yes\")), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"filter_check radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"medium\",\n    value: \"no\",\n    checked: isUrgent === 'no',\n    onChange: handleChaneUrgent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"checkbox radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 49\n    }\n  }, \"No\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex sm_btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 656,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"lg\",\n    type: \"secondary\",\n    class: \"prev-screen-btn gray-btn\",\n    onClick: handleCancelForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 41\n    }\n  }, \"CANCEL\"), /*#__PURE__*/React.createElement(Button, {\n    size: \"lg\",\n    class: \"btn add-btn\",\n    disabled: rowId >= 0 ? false : tableData.length >= 3,\n    loading: saveLoader,\n    onClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 41\n    }\n  }, rowId >= 0 ? 'UPDATE' : 'ADD')))), /*#__PURE__*/React.createElement(MedFavourite, {\n    tableLength: filteredTable.length,\n    tableData: filteredTable,\n    onSaveFav: handleSaveFav,\n    isFavAdded: fav,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 29\n    }\n  }))), tableData && tableData.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    pagination: false,\n    columns: getColumns,\n    datasource: filteredTable,\n    noLRPad: true,\n    rowId: rowId,\n    rowClassName: 'custom-row-style',\n    style: {\n      minHeight: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 33\n    }\n  })) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 17\n    }\n  }, (edit === null || edit === void 0 ? void 0 : edit.status) !== STATUS.SUBMITTED ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"save-graft\",\n    onClick: () => savePresc('draft'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 33\n    }\n  }, \"Save as Draft\"), /*#__PURE__*/React.createElement(Correct, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 33\n    }\n  })) : null, /*#__PURE__*/React.createElement(Button, {\n    size: \"lg\",\n    type: \"secondary\",\n    className: \"prev-screen-btn gray-btn\",\n    onClick: cancelPresc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 21\n    }\n  }, \"CANCEL\"), /*#__PURE__*/React.createElement(Button, {\n    size: \"lg\",\n    type: \"primary\",\n    loading: loader,\n    onClick: () => handleVisibleSave(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 21\n    }\n  }, \"SAVE\"), visibleSave && /*#__PURE__*/React.createElement(SavePrescriptionPopup, {\n    visible: visibleSave,\n    residentDetail: residentDetail,\n    edit: edit,\n    onOk: () => handleVisibleSave(false, 'ok'),\n    onDraft: () => handleVisibleSave(false, 'draft'),\n    onCancel: () => handleVisibleSave(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 25\n    }\n  })))), visibleReminder ? /*#__PURE__*/React.createElement(ReminderForm, {\n    visible: visibleReminder,\n    options: reminderObj,\n    onOk: data => setReminder(false, data),\n    onCancel: () => setReminder(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 31\n    }\n  }) : null, notesModal && /*#__PURE__*/React.createElement(NotesModal, {\n    isNotApiCall: true,\n    defaultNotes: currentModalData.current.notes,\n    visible: notesModal,\n    filterOptions: notesFilterOptions,\n    onCancel: (data, options) => visibleNotesModal(false, null, data, options),\n    isUpsertList: true // modalTitle={`View Notes - ${currentModalData.current?.orderNumber || ''}`}\n    ,\n    xRayNumber: currentModalData.current.medicineFullName || currentModalData.current.medication,\n    addData: edit ? {\n      residentId: currentResidentId,\n      prescriptionMedicationId: currentModalData.current._id,\n      category: TODO_CATEGORY.PRESCRIPTION,\n      subCategory: SUB_CATEGORY.NOTES.GENERAL\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default createForm()(PrescriptionForm);","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/components/Prescription/UpsertPrescription.js"],"names":["React","useEffect","useState","useSelector","createForm","Input","ErrorMsg","Select","Option","Button","TextArea","Toast","Confirm","Table","RadioButtonGroup","SearchMedication","ReminderForm","DoctorFilter","IndicationJson","Edit","Reminder","Notes","Cancel","Correct","PlusBtn","ORDER_TYPE","RX_TYPE","STATUS","TYPE","isDrOrNp","getUserNameWithDesignation","SavePrescriptionPopup","NotesModal","MedFavourite","addFavouriteMeds","upsert","axios","getSubMasters","uuid","_","TODO_CATEGORY","SUB_CATEGORY","PrescriptionForm","props","edit","form","authUser","residentDetail","onOk","getFieldError","getFieldDecorator","validateFields","setFieldsValue","getFieldsValue","resetFields","errors","visibleReminder","setVisibleReminder","visibleNotes","setVisibleNotes","reminderObj","setReminderObj","loader","setLoader","saveLoader","setSaveLoader","orderType","setOrderType","orderTypes","setOrderTypes","tableData","setTableData","notesData","setNotesData","rowId","setRowId","selectedDrug","setSelectedDrug","visibleSave","setVisibleSave","requestObj","setRequestObj","medStrip","fav","setFav","isUrgent","setIsUrgent","editId","setEditId","indiacationData","setIndicationData","notesModal","setNotesModal","notesFilterOptions","setNotesFilterOptions","currentModalData","useRef","currentResidentId","state","resident","initObj","medication","direction","indication","progressNote","pharmacyNote","then","res","catch","err","prescriptionMedication","physicianId","length","medicineData","cloneDeep","map","x","index","key","medicineFullName","name","_id","selectMedication","value","option","hasOwnProperty","handlePhyChange","val","tempReqObj","handleSave","params","error","values","medObj","strength_number","dosage_form","addToFav","newData","push","handleCancelForm","cancelPresc","str","undefined","onCancel","setReminder","visible","data","findIndex","obj","notes","req","strength","dosage","code","success","message","onCancelRx","record","confirm","title","indexToDel","isDelete","splice","i","onEditRx","getColumns","render","text","dataIndex","width","row","textAlign","visibleNotesModal","handleVisibleSave","filteredTable","getFieldValue","savePresc","createRequest","newTableData","omit","request","COE","PRESCRIPTION","SUBMITTED","homeAreaId","status","DRAFT","EDITED","uniqueId","existingMedicationIds","existing","includes","d","setRowStyle","handleSaveFav","favMeds","concat","handleChaneUrgent","e","target","noteCount","resOptions","console","log","current","filter","mergeLFName","orderNumber","rules","required","whitespace","height","input","children","toLowerCase","indexOf","id","cursor","alignItems","minHeight","options","residentId","prescriptionMedicationId","category","subCategory","NOTES","GENERAL"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux'\nimport { createForm } from 'rc-form';\nimport { Input, ErrorMsg, Select, Option, Button, TextArea, Toast, Confirm } from '../common'\nimport Table from '../common/Table/index'\nimport RadioButtonGroup from '../common/RadioButtonGroup'\nimport SearchMedication from '../SearchMedication/SearchMedicationCopy'\nimport ReminderForm from '../common/Reminder'\nimport DoctorFilter from '../DoctorFilter'\nimport IndicationJson from '../../assets/files/JSON/indications.json'\nimport { Edit } from \"../../assets/images/resident-detail\";\nimport { Reminder, Notes } from \"../../assets/images/pmr\";\nimport { Cancel, Correct, PlusBtn } from \"../../assets/images/resident-detail\"\nimport { ORDER_TYPE, RX_TYPE, STATUS, TYPE } from '../../constants/prescription'\nimport { isDrOrNp, getUserNameWithDesignation } from '../../util/common'\nimport SavePrescriptionPopup from \"../../components/common/Popup/savePrescription-popup\";\nimport NotesModal from '../../components/NotesPopup/List';\nimport MedFavourite from './MedFavourite'\nimport { addFavouriteMeds, upsert } from '../../services/api/routes/prescription';\nimport axios, { getSubMasters } from '../../services/api/services/common';\nimport uuid from 'uuid'\nimport _ from 'lodash'\nimport {\n    TODO_CATEGORY,\n    SUB_CATEGORY\n} from '../../constants/todo';\n\nconst PrescriptionForm = props => {\n    const { edit, form, authUser, residentDetail, onOk } = props\n    const { getFieldError, getFieldDecorator, validateFields, setFieldsValue, getFieldsValue, resetFields } = form;\n    let errors\n    const [visibleReminder, setVisibleReminder] = useState(false)\n    const [visibleNotes, setVisibleNotes] = useState(false)\n    const [reminderObj, setReminderObj] = useState(null)\n    const [loader, setLoader] = useState(false)\n    const [saveLoader, setSaveLoader] = useState(false)\n    const [orderType, setOrderType] = useState(ORDER_TYPE['ROUTINE'])\n    const [orderTypes, setOrderTypes] = useState([])\n    const [tableData, setTableData] = useState([])\n    const [notesData, setNotesData] = useState([])\n    const [rowId, setRowId] = useState()\n    const [selectedDrug, setSelectedDrug] = useState(null)\n    const [visibleSave, setVisibleSave] = useState(false)\n    const [requestObj, setRequestObj] = useState({ medStrip: false })\n    const [fav, setFav] = useState(false)\n    const [isUrgent, setIsUrgent] = useState('no')\n    const [editId, setEditId] = useState('')\n    const [indiacationData, setIndicationData] = useState(null);\n    const [notesModal, setNotesModal] = useState(false);\n    const [notesFilterOptions, setNotesFilterOptions] = useState({});\n    const currentModalData = React.useRef();\n    const currentResidentId = useSelector(state => state.resident.currentResidentId)\n\n    const initObj = {\n        // physicianId: undefined,\n        medication: '',\n        direction: '',\n        indication: '',\n        progressNote: '',\n        pharmacyNote: '',\n    }\n\n    useEffect(() => {\n        // setSubMasterLoader(true)\n        getSubMasters('RXTYPE').then(res => {\n            // setSubMasterLoader(false)\n            setOrderTypes(res)\n        }).catch(err => {\n            // setSubMasterLoader(false)\n        })\n    }, [])\n\n    useEffect(() => {\n        if (edit) {\n            const { prescriptionMedication, physicianId, medStrip, orderType } = edit\n\n            // set medications in table\n            if (prescriptionMedication?.length > 0) {\n                let medicineData = _.cloneDeep(prescriptionMedication)\n                medicineData = medicineData.map((x, index) => {\n                    x.key = index\n                    x.medicineFullName = x.medicineFullName || x.name || x.medication\n                    return x\n                })\n                setTableData(medicineData)\n                // set physician\n                setFieldsValue({ physicianId: physicianId?._id })\n                //set medstrip\n                setRequestObj({\n                    ...requestObj,\n                    medStrip: medStrip,\n                    physicianId: physicianId?._id\n                })\n            }\n            setIsUrgent(edit.isUrgent ? 'yes' : 'no')\n        }\n    }, [edit])\n\n    const selectMedication = (value, option) => {\n        if (option.hasOwnProperty('prescrible_name'))\n            setSelectedDrug(option)\n    }\n\n    const handlePhyChange = (val) => {\n        let tempReqObj = { ...requestObj }\n        tempReqObj.physicianId = val\n        setRequestObj(tempReqObj)\n\n    }\n\n    const handleSave = (params) => {\n        validateFields((error, values) => {\n            if (error)\n                return\n            if (!params)\n                setSaveLoader(true)\n\n            let medObj = {\n                ...values,\n                orderType: orderType\n            }\n            // if (selectedDrug && Object.keys(selectedDrug).length > 0) {\n            //     medObj.drugId = selectedDrug.drugId;\n            //     medObj.name = selectedDrug.name\n            //     medObj.strength = selectedDrug.strengthUnit;\n            //     medObj.dosage = selectedDrug.dosageForm;\n            //     medObj.medicineFullName = selectedDrug.medicineFullName;\n            // }\n            // else {\n            medObj = {\n                ...medObj,\n                \"name\": values.medication,\n                \"strength\": selectedDrug?.strength_number,\n                \"dosage\": selectedDrug?.dosage_form,\n                \"medicineFullName\": values.medication,\n\n            }\n            // medObj.name = values.medication\n            // }\n            delete medObj.medication\n\n            if (params === 'fav') {\n                addToFav(medObj)\n                return\n            }\n\n            if (rowId >= 0 && rowId < tableData.length) {\n                let newData = [...tableData]\n                newData[rowId] = {\n                    ...medObj,\n                    key: rowId,\n                    _id: editId\n                }\n                setTableData(newData)\n            }\n            else {\n                if (tableData.length < 3) {\n                    let newData = [...tableData]\n                    newData.push({\n                        ...medObj,\n                        key: newData.length,\n                    })\n                    setTableData(newData)\n                    // resetFields()\n                }\n                else {\n                    Toast.error('only 3 Medications are allowed')\n                }\n            }\n            // resetFields()\n            handleCancelForm()\n            setSaveLoader(false)\n        })\n\n    }\n\n    const handleCancelForm = () => {\n        setFieldsValue(initObj)\n        setRowId()\n        setFav(false)\n        setEditId('')\n        setSelectedDrug(null)\n        setOrderType(ORDER_TYPE['ROUTINE'])\n    }\n\n    const cancelPresc = (str) => {\n        handleCancelForm()\n        setTableData([])\n        setOrderType(ORDER_TYPE['ROUTINE'])\n        setRequestObj({ medStrip: false, physicianId: undefined })\n        setFieldsValue({ physicianId: undefined })\n        if (str !== 'ok')\n            props.onCancel()\n    }\n\n    const setReminder = (visible, data) => {\n        if (visible) {\n            setReminderObj({})\n        } else {\n            setReminderObj(null)\n            if (data) {\n                let newData = [...tableData]\n                let index = newData.findIndex(obj => obj.key === reminderObj.key)\n                if (index >= 0) {\n                    newData[index] = {\n                        ...newData[index],\n                        notes: data\n                    }\n                }\n                setTableData(newData)\n            }\n        }\n        setVisibleReminder(visible)\n    }\n\n    const addToFav = async (params) => {\n        let req = {\n            \"name\": params.name,\n            \"strength\": params.strength,\n            \"dosage\": params.dosage,\n            \"medicineFullName\": params.medicineFullName || params.name,\n            \"indication\": params.indication,\n            \"direction\": params.direction,\n            \"isActive\": true\n        }\n        let res = await axios({ ...addFavouriteMeds, data: req })\n        if (res) {\n            if (res.code === 'OK') {\n                setFav(true)\n                // resetFields()\n                Toast.success(res.message)\n            } else\n                Toast.error(res.message)\n        }\n    }\n\n    const onCancelRx = (record) => {\n        Confirm.confirm({\n            title: 'Are you sure, You want to cancel this Rx?',\n            onOk() {\n                let newData = [...tableData]\n                let indexToDel = record.key\n                if (edit) {\n                    newData[indexToDel].isDelete = true\n                } else {\n                    newData.splice(indexToDel, 1)\n                    if (newData.length) {\n                        newData = newData.map((x, i) => {\n                            x.key = i\n                            return x\n                        })\n                    }\n                }\n                setTableData(newData)\n                setEditId()\n                setRowId()\n            },\n            onCancel() { }\n        })\n    }\n\n    const onEditRx = (record) => {\n        setEditId(record._id)\n        setRowId(record.key)\n        let obj = {\n            // physicianId: record.physicianId,\n            medication: record.medicineFullName,\n            direction: record.direction,\n            indication: record.indication,\n            progressNote: record.progressNote,\n            pharmacyNote: record.pharmacyNote,\n        }\n        setOrderType(record.orderType)\n        setFieldsValue(obj)\n\n    }\n\n    const getColumns = [\n        {\n            title: 'Sr.No',\n            key: 'index',\n            render: (text, record, index) => <span>{index + 1}</span>\n        },\n        {\n            title: 'Medication',\n            dataIndex: 'medicineFullName',\n            render: (text, record) => (<span>{text || record.name || record.medication}</span>),\n            // `${text} ${record.medStrength ? `, ${record.medStrength}` : ''} ${record.medDosageType ? `, ${record.medDosageType}` : ''} `}</span>),\n        },\n        {\n            title: 'Directions',\n            dataIndex: 'direction',\n            render: (text) => (<span>{text}</span>),\n        },\n        {\n            title: 'Indication',\n            dataIndex: 'indication',\n            render: (text) => (<span>{text}</span>),\n        },\n        {\n            title: 'Actions',\n            width: '300px',\n            // render: (record, row) => <div className='patient_order_d ac' style={{ textAlign: 'center' }}>\n            render: (row, record) => <div className='patient_order_d ac' style={{ textAlign: 'center' }}>\n                <div className=\"actions\">\n                    <a onClick={() => visibleNotesModal(true, record)}>\n                        <div className=\"action_ico\">\n                            <Notes />\n                            {record.notes?.length > 0 ?\n                                <span className=\"todo tot read\">{record.notes.length}</span>\n                                : null}\n                        </div>\n                        <p>Notes</p>\n\n                    </a>\n                    {/* <a onClick={() => setReminder(true, record)}>\n                        <div className=\"action_ico\">\n                            <Reminder />\n                            <span className=\"rem tot read\">05</span>\n                        </div>\n                        <p>Reminders</p>\n\n                    </a> */}\n                    {\n                        // edit ?\n                        <a onClick={() => onEditRx(record)}>\n                            <Edit />\n                            <p>Edit Rx</p>\n                        </a>\n                        // : null\n                    }\n                    <a onClick={() => onCancelRx(record)}>\n                        <Cancel />\n                        <p>Cancel Rx</p>\n                    </a>\n                </div>\n            </div>\n        }\n    ]\n\n    const handleVisibleSave = (visible, str) => {\n        if (filteredTable.length === 0) {\n            Toast.error('Please Add Medications')\n            return\n        }\n        if (!isDrOrNp(authUser) && !form.getFieldValue('physicianId')) {\n            Toast.error('Please Select Physician')\n            return\n        }\n        if (str)\n            savePresc(str)\n        setVisibleSave(visible)\n    }\n\n    const createRequest = (str) => {\n\n        let newTableData = [...tableData]\n        newTableData = _.map(newTableData, function (obj) {\n            return _.omit(obj, ['key', 'physicianId']);\n        })\n        let request = {\n            \"medStrip\": requestObj.medStrip,\n            // \"isCancel\": true, while cancel\n            \"physicianId\": isDrOrNp(authUser) ? authUser._id : requestObj.physicianId,\n            \"residentId\": residentDetail._id,\n            \"type\": TYPE.COE,\n            \"rxType\": RX_TYPE.PRESCRIPTION,\n            \"status\": STATUS.SUBMITTED,\n            \"deviceId\": uuid(),\n            \"isVerbalOrder\": isDrOrNp(authUser) ? false : true,\n            \"homeAreaId\": residentDetail.homeAreaId?._id,\n            \"attachments\": [],\n            \"prescriptionMedication\": newTableData,\n            \"isUrgent\": isUrgent === 'yes'\n        }\n        if (edit) {\n            request = {\n                ...request,\n                \"status\": edit.status === STATUS.DRAFT ? STATUS.SUBMITTED : STATUS.EDITED,\n                \"_id\": edit._id,\n                \"uniqueId\": edit.uniqueId\n            }\n            // add or remove _id for medications added in db or not\n            let existingMedicationIds = _.map(edit.prescriptionMedication, '_id')\n            request.prescriptionMedication = request.prescriptionMedication.map(x => {\n                if (x._id) {\n                    let existing = existingMedicationIds.includes(x._id)\n                    if (!existing)\n                        delete x._id\n                }\n                return x\n            })\n        } else {\n            request.prescriptionMedication = _.map(request.prescriptionMedication, (d) => _.omit(d, \"_id\"))\n        }\n        if (str === 'draft')\n            request.status = STATUS.DRAFT\n        return request\n    }\n\n    const savePresc = async (str) => {\n        if (tableData.length === 0) {\n            Toast.error('Please Add Medications')\n            return\n        }\n        let req = createRequest(str)\n        if (!req.physicianId) {\n            Toast.error('Please Select Physician')\n            return\n        }\n        try {\n            setLoader(true)\n            let res = await axios({ ...upsert, data: req })\n            if (res) {\n                if (res.code === 'OK') {\n                    Toast.success(res.message)\n                    cancelPresc('ok')\n                    onOk()\n                } else\n                    Toast.error(res.message)\n            }\n            setLoader(false)\n        } catch{\n            setLoader(false)\n        }\n    }\n\n    const setRowStyle = (record, index) => {\n        return rowId === index ? 'custom-row-style' : ''\n    }\n\n    useEffect(() => {\n\n    }, [rowId])\n\n    const handleSaveFav = (favMeds) => {\n        let newTableData = [...tableData]\n        newTableData = newTableData.concat(favMeds)\n        newTableData = newTableData.map((x, i) => {\n            if (!x.key)\n                x.key = i\n            return x\n        })\n        setTableData(newTableData)\n    }\n\n    const handleChaneUrgent = e => {\n        setIsUrgent(e.target.value)\n    }\n\n    const visibleNotesModal = (visible, record, noteCount, resOptions) => {\n        console.log(\"visibleNotesModal -> visible, record, noteCount, resOptions\", visible, record, noteCount, resOptions)\n        // setNotesData(newData)\n        setNotesModal(visible);\n        setNotesFilterOptions({});\n        if (noteCount) {\n            let newData = [...tableData]\n            let index = newData.findIndex(obj => obj.key === currentModalData.current.key)\n            if (index >= 0) {\n                newData[index] = {\n                    ...newData[index],\n                    notes: resOptions.notesData\n                }\n            }\n            setTableData(newData)\n            console.log(\"visibleNotesModal -> newData\", newData)\n        }\n        currentModalData.current = visible ? { ...record } : null;\n    };\n\n\n    const filteredTable = tableData.filter(x => !x.isDelete)\n\n    return <>\n        <div class=\"add_resident\">\n            <div className=\"prep_right_wrap\">\n                <div className=\"box-inner-border\">\n                    <div className=\"sub-box-border\">\n                        <div className=\"d-flex-box\">\n                            <h2>\n                                {\n                                    `${edit ? 'Update' : 'Add'} Rx Order for - ${residentDetail.mergeLFName} \n                                    ${!isDrOrNp(authUser) ? `(VO/TO By ${getUserNameWithDesignation(authUser)}\n                                         ${edit && edit.physicianId && edit.physicianId._id ? `for ${getUserNameWithDesignation(edit.physicianId)}` : ''} \n                                       )`: ''}`\n                                }\n                            </h2>\n                            <h2>{edit?.orderNumber}</h2>\n                        </div>\n                        <div className=\"form_row d-flex\">\n                            <div className=\"left-create-box\">\n                                <div className=\"text-left\">\n                                    <span className=\"sub-text \">Type</span>\n                                    <div className=\"rx-btns drug-bts\">\n                                        <div className=\"flex-block\">\n                                            {\n                                                orderTypes?.map(x => {\n                                                    return <a>\n                                                        <Button className={orderType === x._id ? 'rout-btn' : ''}\n                                                            onClick={() => setOrderType(x._id)}>\n                                                            {x.name}\n                                                        </Button>\n                                                    </a>\n                                                })\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"checkbox-control\">\n                                    <label className=\"filter_check\">\n                                        <input type=\"checkbox\"\n                                            checked={requestObj.medStrip}\n                                            onChange={() => setRequestObj({\n                                                ...requestObj,\n                                                medStrip: !requestObj.medStrip\n                                            })} />\n                                        <span className=\"checkbox\"></span>\n                                        <span className=\"lbl\">Start with next med strips</span>\n                                    </label>\n                                </div>\n                                <div className=\"d-flex\">\n                                    <div className=\"left-select\">\n                                        {\n                                            !isDrOrNp(authUser) ?\n                                                <div className=\"m-b-10\">\n                                                    {getFieldDecorator('physicianId', {\n                                                        rules: [\n                                                            { required: false, message: 'Please Select Physician' }\n                                                        ]\n                                                    })(\n                                                        <DoctorFilter onChange={handlePhyChange} />\n                                                    )}\n                                                    {(errors = getFieldError('physicianId')) ? <ErrorMsg errors={errors} /> : null}\n                                                </div>\n                                                : null\n                                        }\n                                        <div className=\"m-b-10\">\n                                            {getFieldDecorator('medication', {\n                                                rules: [{\n                                                    required: true, message: `Please enter medication`,\n                                                    // whitespace: true,\n                                                }]\n                                            })(\n                                                <SearchMedication onSelectMedication={selectMedication} />\n                                            )}\n                                            {(errors = getFieldError('medication')) ? <ErrorMsg errors={errors} /> : null}\n                                        </div>\n                                        <div className=\"form_group textInput\">\n                                            {getFieldDecorator('direction', {\n                                                rules: [{\n                                                    required: false, message: `Please enter directions`,\n                                                    whitespace: true,\n                                                }]\n                                            })(\n                                                <TextArea placeholder='Directions' style={{ height: '81px' }} class=\"inputForm\" />\n                                            )}\n                                            {(errors = getFieldError('direction')) ? <ErrorMsg errors={errors} /> : null}\n\n                                        </div>\n                                    </div>\n                                    <div className=\"right-textarea\">\n                                        <div className=\"\">\n                                            {getFieldDecorator('indication', {\n                                                rules: [{\n                                                    required: false, message: `Please enter indication`,\n                                                    whitespace: true,\n                                                }]\n                                            })(\n                                                <Select\n                                                    combobox={true}\n                                                    showSearch allowClear\n                                                    placeholder=\"Select Indication\"\n                                                    // optionFilterProp=\"children\"\n                                                    filterOption={(input, option) =>\n                                                        option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                                    }\n                                                >\n                                                    {\n                                                        IndicationJson.map((data) => {\n                                                            return <Option value={data.name} key={data.id}>{data.name}</Option>\n                                                        })\n                                                    }\n                                                </Select>\n                                            )}\n                                            {(errors = getFieldError('indication')) ? <ErrorMsg errors={errors} /> : null}\n\n                                            {getFieldDecorator('progressNote')(\n                                                <TextArea\n                                                    placeholder=\"Progress Notes &#10;(will push to PCC/MED e-care)\"\n                                                    class=\"inputForm\"\n                                                ></TextArea>\n                                            )}\n                                        </div>\n                                    </div>\n                                    <div class=\"right-textarea primary-notes\">\n                                        {getFieldDecorator('pharmacyNote')(\n                                            <TextArea\n                                                placeholder=\"Notes to Pharmacy\"\n                                                class=\"inputForm\"\n                                            ></TextArea>\n                                        )}\n                                    </div>\n                                </div>\n                                <div className=\"d-flex j-space-between\">\n                                    <div className=\"plus-icon\">\n                                        {/* <div className=\"d-flex mr-20\" onClick={() => setReminder(true)}>\n                                            <p className=\"green-bg-plus\">\n                                                <PlusBtn />\n                                            </p>\n                                            <span className=\"green-text\">Set Reminder</span>\n                                        </div> */}\n                                        <div className=\"d-flex mr-20\" style={{ cursor: 'pointer' }}>\n                                            {\n                                                fav ? <><p className=\"green-bg-plus\">\n                                                    <Correct />\n                                                </p>\n                                                    <span className=\"green-text\">Added</span>\n                                                </> :\n                                                    <>\n                                                        <p className=\"green-bg-plus\">\n                                                            <PlusBtn />\n                                                        </p>\n                                                        <span className=\"green-text\" onClick={() => handleSave('fav')}>Add to Favourites</span>\n\n                                                    </>\n                                            }\n                                        </div>\n                                        <div className=\"d-flex\" style={{ cursor: 'pointer' }}>\n                                            <span className=\"d-flex green-text mr-10\"\n                                                style={{ alignItems: 'center', 'font-weight': 'bold' }}>  Urgent Order</span>\n                                            <label className='filter_check radio'>\n                                                <input\n                                                    type='checkbox'\n                                                    name='medium'\n                                                    value='yes'\n                                                    checked={isUrgent === 'yes'}\n                                                    onChange={handleChaneUrgent}\n                                                />\n                                                <span className='checkbox radio'></span>\n                                                <span className='lbl'>Yes</span>\n                                            </label>\n                                            <label className='filter_check radio'>\n                                                <input\n                                                    type='checkbox'\n                                                    name='medium'\n                                                    value='no'\n                                                    checked={isUrgent === 'no'}\n                                                    onChange={handleChaneUrgent}\n                                                />\n                                                <span className='checkbox radio'></span>\n                                                <span className='lbl'>No</span>\n                                            </label>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"d-flex sm_btn\">\n                                        <Button size='lg' type='secondary'\n                                            class=\"prev-screen-btn gray-btn\"\n                                            onClick={handleCancelForm}>\n                                            CANCEL\n                                        </Button>\n                                        <Button size='lg' class=\"btn add-btn\"\n                                            disabled={rowId >= 0 ? false : tableData.length >= 3}\n                                            loading={saveLoader}\n                                            onClick={handleSave}>\n                                            {rowId >= 0 ? 'UPDATE' : 'ADD'}\n                                        </Button>\n                                    </div>\n                                </div>\n                            </div>\n                            <MedFavourite tableLength={filteredTable.length} tableData={filteredTable}\n                                onSaveFav={handleSaveFav}\n                                isFavAdded={fav} />\n                        </div>\n                    </div>\n\n                    {\n                        tableData && tableData.length ?\n                            <div className=\"mt-20\">\n                                <Table pagination={false}\n                                    columns={getColumns}\n                                    datasource={filteredTable}\n                                    noLRPad={true}\n                                    rowId={rowId}\n                                    rowClassName={'custom-row-style'}\n                                    style={{ minHeight: 'auto' }}\n                                />\n                            </div> : null\n                    }\n                </div>\n                <div className=\"d-flex-end\">\n                    {\n                        edit?.status !== STATUS.SUBMITTED ?\n                            <div className=\"save-graft\" onClick={() => savePresc('draft')}>\n                                <span>Save as Draft</span>\n                                <Correct />\n                            </div>\n                            : null\n                    }\n                    <Button size='lg' type='secondary' className=\"prev-screen-btn gray-btn\" onClick={cancelPresc}>CANCEL</Button>\n                    <Button size='lg' type='primary'\n                        loading={loader}\n                        onClick={() => handleVisibleSave(true)} >\n                        SAVE\n                    </Button>\n\n                    {visibleSave && (\n                        <SavePrescriptionPopup\n                            visible={visibleSave}\n                            residentDetail={residentDetail}\n                            edit={edit}\n                            onOk={() => handleVisibleSave(false, 'ok')}\n                            onDraft={() => handleVisibleSave(false, 'draft')}\n                            onCancel={() => handleVisibleSave(false)}\n                        />\n                    )}\n                </div>\n            </div>\n\n        </div>\n        {\n            visibleReminder ? <ReminderForm visible={visibleReminder} options={reminderObj}\n                onOk={(data) => setReminder(false, data)}\n                onCancel={() => setReminder(false)} />\n                : null\n        }\n        {notesModal && (\n            <NotesModal\n                isNotApiCall={true}\n                defaultNotes={currentModalData.current.notes}\n                visible={notesModal}\n                filterOptions={notesFilterOptions}\n                onCancel={(data, options) => visibleNotesModal(false, null, data, options)}\n                isUpsertList={true}\n                // modalTitle={`View Notes - ${currentModalData.current?.orderNumber || ''}`}\n                xRayNumber={currentModalData.current.medicineFullName ||\n                    currentModalData.current.medication}\n                addData={edit ? {\n                    residentId: currentResidentId,\n                    prescriptionMedicationId: currentModalData.current._id,\n                    category: TODO_CATEGORY.PRESCRIPTION,\n                    subCategory: SUB_CATEGORY.NOTES.GENERAL,\n                } : {}}\n            />\n        )}\n    </>\n}\nexport default createForm()(PrescriptionForm)"]},"metadata":{},"sourceType":"module"}