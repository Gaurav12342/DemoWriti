{"ast":null,"code":"import React from 'react';\nconst parse = JSON.parse,\n      serialize = JSON.stringify;\n\nconst useCacheQuery = (queryKey, fetchFn, config = {\n  clearOnTabClose: true\n}) => {\n  //Please check SearchMedicationCopy.js file for how to use.\n  const [state, setState] = React.useState({\n    loading: false,\n    data: null,\n    error: null\n  });\n  React.useEffect(() => {\n    window.onbeforeunload = () => {\n      if (config.clearOnTabClose) {\n        localStorage.removeItem(queryKey);\n      }\n    };\n  }, []);\n\n  if (!queryKey || !fetchFn) {\n    throw new Error(\"Please provide query key and data fetch function or promise.\");\n  }\n\n  const getCacheItem = React.useCallback(key => {\n    let allLocalData = parse(localStorage.getItem(queryKey)) || {};\n    return allLocalData[key];\n  }, []);\n  const setCacheData = React.useCallback((key, data) => {\n    let allLocalData = parse(localStorage.getItem(queryKey)) || {};\n    allLocalData[key] = data;\n    localStorage.setItem(queryKey, serialize(allLocalData));\n  }, []);\n  const setData = React.useCallback(data => {\n    setState({\n      loading: false,\n      data,\n      error: null\n    });\n  }, []);\n  const setError = React.useCallback(error => {\n    setState({\n      loading: false,\n      data: null,\n      error\n    });\n  }, []);\n\n  const fetchResults = (...params) => {\n    setState({ ...state,\n      loading: true\n    });\n    const cacheKey = params.join('');\n    const localData = getCacheItem(cacheKey);\n\n    if (!!localData) {\n      console.log(\"local data bind\");\n      setData(localData);\n    } else {\n      const fetcher = fetchFn(...params);\n\n      if (fetcher instanceof Promise) {\n        fetcher.then(data => {\n          setData(data);\n          setCacheData(cacheKey, data);\n        }).catch(setError);\n      } else {\n        //if fetch is not promise then its already resolved data from function\n        setData(fetcher);\n        setCacheData(cacheKey, fetcher);\n      }\n    }\n  };\n\n  return {\n    fetchResults,\n    ...state\n  };\n};\n\nexport default useCacheQuery;","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/hooks/useCacheQuery.js"],"names":["React","parse","JSON","serialize","stringify","useCacheQuery","queryKey","fetchFn","config","clearOnTabClose","state","setState","useState","loading","data","error","useEffect","window","onbeforeunload","localStorage","removeItem","Error","getCacheItem","useCallback","key","allLocalData","getItem","setCacheData","setItem","setData","setError","fetchResults","params","cacheKey","join","localData","console","log","fetcher","Promise","then","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,KAAK,GAAGC,IAAI,CAACD,KAAnB;AAAA,MAA0BE,SAAS,GAAGD,IAAI,CAACE,SAA3C;;AACA,MAAMC,aAAa,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,MAAM,GAAG;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAA7B,KAA2D;AAC/E;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,KAAK,CAACY,QAAN,CAAe;AACvCC,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,IAAI,EAAE,IAFiC;AAGvCC,IAAAA,KAAK,EAAE;AAHgC,GAAf,CAA1B;AAMAf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpBC,IAAAA,MAAM,CAACC,cAAP,GAAwB,MAAM;AAC5B,UAAIV,MAAM,CAACC,eAAX,EAA4B;AAC1BU,QAAAA,YAAY,CAACC,UAAb,CAAwBd,QAAxB;AACD;AACF,KAJD;AAKD,GAND,EAMG,EANH;;AAQA,MAAI,CAACA,QAAD,IAAa,CAACC,OAAlB,EAA2B;AACzB,UAAM,IAAIc,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED,QAAMC,YAAY,GAAGtB,KAAK,CAACuB,WAAN,CAAmBC,GAAD,IAAS;AAC9C,QAAIC,YAAY,GAAGxB,KAAK,CAACkB,YAAY,CAACO,OAAb,CAAqBpB,QAArB,CAAD,CAAL,IAAyC,EAA5D;AACA,WAAOmB,YAAY,CAACD,GAAD,CAAnB;AACD,GAHoB,EAGlB,EAHkB,CAArB;AAKA,QAAMG,YAAY,GAAG3B,KAAK,CAACuB,WAAN,CAAkB,CAACC,GAAD,EAAMV,IAAN,KAAe;AACpD,QAAIW,YAAY,GAAGxB,KAAK,CAACkB,YAAY,CAACO,OAAb,CAAqBpB,QAArB,CAAD,CAAL,IAAyC,EAA5D;AACAmB,IAAAA,YAAY,CAACD,GAAD,CAAZ,GAAoBV,IAApB;AACAK,IAAAA,YAAY,CAACS,OAAb,CAAqBtB,QAArB,EAA+BH,SAAS,CAACsB,YAAD,CAAxC;AACD,GAJoB,EAIlB,EAJkB,CAArB;AAMA,QAAMI,OAAO,GAAG7B,KAAK,CAACuB,WAAN,CAAkBT,IAAI,IAAI;AACxCH,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,IAAlB;AAAwBC,MAAAA,KAAK,EAAE;AAA/B,KAAD,CAAR;AACD,GAFe,EAEb,EAFa,CAAhB;AAGA,QAAMe,QAAQ,GAAG9B,KAAK,CAACuB,WAAN,CAAkBR,KAAK,IAAI;AAC1CJ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,IAAI,EAAE,IAAxB;AAA8BC,MAAAA;AAA9B,KAAD,CAAR;AACD,GAFgB,EAEd,EAFc,CAAjB;;AAIA,QAAMgB,YAAY,GAAG,CAAC,GAAGC,MAAJ,KAAe;AAClCrB,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYG,MAAAA,OAAO,EAAE;AAArB,KAAD,CAAR;AACA,UAAMoB,QAAQ,GAAGD,MAAM,CAACE,IAAP,CAAY,EAAZ,CAAjB;AAEA,UAAMC,SAAS,GAAGb,YAAY,CAACW,QAAD,CAA9B;;AAEA,QAAI,CAAC,CAACE,SAAN,EAAiB;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAR,MAAAA,OAAO,CAACM,SAAD,CAAP;AACD,KAHD,MAGO;AACL,YAAMG,OAAO,GAAG/B,OAAO,CAAC,GAAGyB,MAAJ,CAAvB;;AACA,UAAIM,OAAO,YAAYC,OAAvB,EAAgC;AAC9BD,QAAAA,OAAO,CAACE,IAAR,CAAa1B,IAAI,IAAI;AACnBe,UAAAA,OAAO,CAACf,IAAD,CAAP;AACAa,UAAAA,YAAY,CAACM,QAAD,EAAWnB,IAAX,CAAZ;AACD,SAHD,EAGG2B,KAHH,CAGSX,QAHT;AAID,OALD,MAKO;AACL;AACAD,QAAAA,OAAO,CAACS,OAAD,CAAP;AACAX,QAAAA,YAAY,CAACM,QAAD,EAAWK,OAAX,CAAZ;AACD;AACF;AACF,GAtBD;;AAwBA,SAAO;AACLP,IAAAA,YADK;AAEL,OAAGrB;AAFE,GAAP;AAKD,CAnED;;AAoEA,eAAeL,aAAf","sourcesContent":["import React from 'react'\nconst parse = JSON.parse, serialize = JSON.stringify\nconst useCacheQuery = (queryKey, fetchFn, config = { clearOnTabClose: true }) => {\n  //Please check SearchMedicationCopy.js file for how to use.\n  const [state, setState] = React.useState({\n    loading: false,\n    data: null,\n    error: null\n  });\n\n  React.useEffect(() => {\n    window.onbeforeunload = () => {\n      if (config.clearOnTabClose) {\n        localStorage.removeItem(queryKey)\n      }\n    }\n  }, [])\n\n  if (!queryKey || !fetchFn) {\n    throw new Error(\"Please provide query key and data fetch function or promise.\")\n  }\n\n  const getCacheItem = React.useCallback((key) => {\n    let allLocalData = parse(localStorage.getItem(queryKey)) || {};\n    return allLocalData[key]\n  }, [])\n\n  const setCacheData = React.useCallback((key, data) => {\n    let allLocalData = parse(localStorage.getItem(queryKey)) || {};\n    allLocalData[key] = data;\n    localStorage.setItem(queryKey, serialize(allLocalData))\n  }, [])\n\n  const setData = React.useCallback(data => {\n    setState({ loading: false, data, error: null })\n  }, [])\n  const setError = React.useCallback(error => {\n    setState({ loading: false, data: null, error })\n  }, [])\n\n  const fetchResults = (...params) => {\n    setState({ ...state, loading: true })\n    const cacheKey = params.join('');\n\n    const localData = getCacheItem(cacheKey)\n\n    if (!!localData) {\n      console.log(\"local data bind\")\n      setData(localData)\n    } else {\n      const fetcher = fetchFn(...params);\n      if (fetcher instanceof Promise) {\n        fetcher.then(data => {\n          setData(data)\n          setCacheData(cacheKey, data)\n        }).catch(setError)\n      } else {\n        //if fetch is not promise then its already resolved data from function\n        setData(fetcher)\n        setCacheData(cacheKey, fetcher)\n      }\n    }\n  }\n\n  return {\n    fetchResults,\n    ...state\n  }\n\n}\nexport default useCacheQuery"]},"metadata":{},"sourceType":"module"}