{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/PmrTodo/components/AddNewPMR.js\";\nimport React, { useState } from 'react';\nimport Modal from \"../../../../src/components/common/Popup\";\nimport { ORDER_TYPE } from '../../../constants/prescription';\nimport { createForm } from 'rc-form';\nimport { ErrorMsg, Input, Select, TextArea, Option, Toast } from '../../../components/common';\nimport IndicationJson from '../../../assets/files/JSON/indications.json';\nimport SearchMedication from '../../../components/SearchMedication/SearchMedicationCopy';\nimport { medicationAdd } from '../../../services/api/routes/pmr';\nimport axios from \"./../../../services/api/services/common\";\nimport { isDrOrNp } from '../../../util/common';\nimport { SUB_CATEGORY } from '../../../constants/todo';\nimport { PMR_ORDER } from '../../../constants/pmr';\nimport { USER_TYPE } from '../../../constants/User';\n\nfunction AddNewPMRModal({\n  visible,\n  onClose,\n  form,\n  detail,\n  orderData: propOrderData,\n  onAddOrder,\n  onNurseAck,\n  onDrAck,\n  standingOrder,\n  authUser,\n  orderStatus\n}) {\n  var _orderData;\n\n  const {\n    getFieldError,\n    getFieldDecorator,\n    setFieldsValue\n  } = form;\n  let errors;\n  let orderData = propOrderData;\n\n  if (propOrderData && propOrderData.clonedOrders && propOrderData.clonedOrders.length > 1) {\n    orderData = propOrderData.clonedOrders.find(ord => ord.cloneFrom == propOrderData._id);\n  }\n\n  const [orderType, setOrderType] = useState(0);\n  const [medication, setMedication] = useState(null);\n  const [indication, setIndication] = useState('');\n  const [direction, setDirection] = useState('');\n  const [progressNote, setProgressNote] = useState('');\n  const [description, setDescription] = useState('');\n  const [descError, setDescError] = useState('');\n  const [orderTypeErr, setOrderTypeErr] = useState('');\n  const [loading, setLoading] = useState(false);\n  const medicationRecord = React.useRef({});\n  const isEdit = React.useRef(!!((_orderData = orderData) === null || _orderData === void 0 ? void 0 : _orderData._id));\n  React.useEffect(() => {\n    if (orderData && orderData._id) {\n      var _orderData2, _orderData2$drug, _orderData3, _orderData4, _orderData5, _orderData5$drug, _orderData6, _orderData7, _orderData8, _orderData9, _orderData10;\n\n      setFieldsValue({\n        'medication': (_orderData2 = orderData) === null || _orderData2 === void 0 ? void 0 : (_orderData2$drug = _orderData2.drug) === null || _orderData2$drug === void 0 ? void 0 : _orderData2$drug.name,\n        'indication': (_orderData3 = orderData) === null || _orderData3 === void 0 ? void 0 : _orderData3.indication,\n        'direction': orderData.sig || orderData.direction,\n        'progressNotes': (_orderData4 = orderData) === null || _orderData4 === void 0 ? void 0 : _orderData4.progressNotes\n      });\n      setDirection(orderData.sig || orderData.direction);\n      setMedication((_orderData5 = orderData) === null || _orderData5 === void 0 ? void 0 : (_orderData5$drug = _orderData5.drug) === null || _orderData5$drug === void 0 ? void 0 : _orderData5$drug.name);\n      setOrderType((_orderData6 = orderData) === null || _orderData6 === void 0 ? void 0 : _orderData6.orderType);\n      setProgressNote((_orderData7 = orderData) === null || _orderData7 === void 0 ? void 0 : _orderData7.progressNotes);\n      setDescription((_orderData8 = orderData) === null || _orderData8 === void 0 ? void 0 : _orderData8.description);\n      setIndication((_orderData9 = orderData) === null || _orderData9 === void 0 ? void 0 : _orderData9.indication);\n      setProgressNote((_orderData10 = orderData) === null || _orderData10 === void 0 ? void 0 : _orderData10.progressNotes);\n    }\n  }, [orderData]);\n\n  const handleMedicationChange = (medication, record) => {\n    medicationRecord.current = record;\n    setMedication(medication);\n  };\n\n  const onStandingOrderSave = () => {\n    if (!description || !(description === null || description === void 0 ? void 0 : description.trim())) {\n      return setDescError(\"Please add description\");\n    }\n\n    setDescError(\"\");\n    const reqData = {\n      \"pmrId\": detail._id,\n      description,\n      \"subCategory\": detail.subCategory,\n      pmrOrderId: !!orderData && orderData._id,\n      isEdit: !!orderData && orderData._id,\n      rxNum: '',\n      source: 'KROLL'\n    };\n    onNurseAck(reqData);\n  };\n\n  const onSave = () => {\n    var _medicationRecord$cur, _medicationRecord$cur2, _medicationRecord$cur3, _medicationRecord$cur4, _medicationRecord$cur5, _medicationRecord$cur6;\n\n    const reqData = {\n      \"pmrId\": detail._id,\n      \"indication\": indication,\n      \"medication\": medication,\n      \"orderType\": orderType,\n      direction: direction,\n      \"luCode\": {\n        \"reasonForUseId\": \"\",\n        \"reasonText\": \"\"\n      },\n      \"subCategory\": detail.subCategory,\n      \"odbId\": \"5d64d870417e1a43fd6f040e\",\n      \"strength\": medicationRecord === null || medicationRecord === void 0 ? void 0 : (_medicationRecord$cur = medicationRecord.current) === null || _medicationRecord$cur === void 0 ? void 0 : _medicationRecord$cur.number,\n      \"strengthUnit\": medicationRecord === null || medicationRecord === void 0 ? void 0 : (_medicationRecord$cur2 = medicationRecord.current) === null || _medicationRecord$cur2 === void 0 ? void 0 : _medicationRecord$cur2.unit,\n      \"dosageForm\": medicationRecord === null || medicationRecord === void 0 ? void 0 : (_medicationRecord$cur3 = medicationRecord.current) === null || _medicationRecord$cur3 === void 0 ? void 0 : _medicationRecord$cur3.dosage_form,\n      \"din\": medicationRecord === null || medicationRecord === void 0 ? void 0 : (_medicationRecord$cur4 = medicationRecord.current) === null || _medicationRecord$cur4 === void 0 ? void 0 : (_medicationRecord$cur5 = _medicationRecord$cur4.ingredients) === null || _medicationRecord$cur5 === void 0 ? void 0 : (_medicationRecord$cur6 = _medicationRecord$cur5[0]) === null || _medicationRecord$cur6 === void 0 ? void 0 : _medicationRecord$cur6.drugbank_id,\n      \"progressNotes\": progressNote\n    };\n\n    if (!orderType) {\n      setOrderTypeErr(\"Please select order type\");\n      return;\n    } else {\n      setOrderTypeErr('');\n    }\n\n    if (!reqData.medication) {\n      Toast.error('Please input medication of minimum 3 characters');\n      return;\n    }\n\n    form.validateFields((err, values) => {\n      if (!!orderData && orderData._id || orderStatus === PMR_ORDER.STATUS.DISCONTINUE) {\n        // while edit\n        if (authUser.type === USER_TYPE.HOME.NURSE) {\n          onNurseAck(reqData);\n        } else if (authUser.type === USER_TYPE.HOME.PHYSICIAN && detail.subCategory === SUB_CATEGORY.MED_REVIEW.PMR) {\n          onDrAck(reqData);\n        }\n      } else {\n        if (isDrOrNp(authUser) && detail.subCategory === SUB_CATEGORY.MED_REVIEW.PMR) {\n          //Add new form\n          reqData.status = PMR_ORDER.STATUS.CONTINUE;\n          reqData.docStatusUpdate = PMR_ORDER.STATUS.CONTINUE;\n        }\n\n        setLoading(true);\n        axios({ ...medicationAdd,\n          data: reqData\n        }).then(res => {\n          if (res.code === 'OK') {\n            Toast.success(res.message);\n            onAddOrder(res.data);\n            setLoading(false);\n            onClose();\n          }\n        }).catch(err => {\n          console.log(\"error = \", err);\n          setLoading(false);\n        }).finally(() => setLoading(false));\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    visible: visible,\n    title: `${isEdit.current ? 'Update' : 'Add'} Order`,\n    maskClosable: true,\n    onCancel: onClose,\n    onClose: onClose,\n    footer: true,\n    className: \"lock_popup addxray-popup\",\n    closable: false,\n    okText: isEdit.current ? 'Update' : 'Add',\n    btnClass: \"d-flex-end f-end footer-block\",\n    onOk: standingOrder ? onStandingOrderSave : onSave,\n    okButtonProps: {\n      loading: loading\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, standingOrder ? /*#__PURE__*/React.createElement(StandingOrder, Object.assign({\n    description,\n    setDescription,\n    descError\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter_wrap\",\n    style: {\n      borderTop: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter_section add-pmr-order\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sub-text \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rx-btns drug-bts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-block filter_value\",\n    style: {\n      padding: '10px 0 5px',\n      flexWrap: 'wrap',\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 19\n    }\n  }, Object.keys(ORDER_TYPE).map(x => /*#__PURE__*/React.createElement(\"label\", {\n    for: x.replace(/_/, ' '),\n    className: \"filter_switch\",\n    onClick: () => setOrderType(ORDER_TYPE[x]),\n    style: {\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: x.replace(/_/, ' '),\n    id: x.replace(/_/, ' '),\n    value: ORDER_TYPE[x],\n    checked: orderType === ORDER_TYPE[x],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      whiteSpace: 'nowrap',\n      display: 'block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 27\n    }\n  }, x.replace(/_/, ' '))))), !!orderTypeErr ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: [orderTypeErr],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 23\n    }\n  })) : null))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }, getFieldDecorator('medication', {\n    rules: [{\n      required: true,\n      message: `Please enter medication` // whitespace: true,\n\n    }]\n  })( /*#__PURE__*/React.createElement(SearchMedication, {\n    value: medication,\n    onSelectMedication: handleMedicationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 19\n    }\n  })), (errors = getFieldError('medication')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 59\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group textInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }, getFieldDecorator('direction', {\n    rules: [{\n      required: false,\n      message: `Please enter direction`,\n      whitespace: true\n    }]\n  })( /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"direction\",\n    onChange: e => setDirection(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 19\n    }\n  })), (errors = getFieldError('direction')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 58\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 15\n    }\n  }, getFieldDecorator('indication', {\n    rules: [{\n      required: false,\n      message: `Please enter indication`,\n      whitespace: true\n    }]\n  })( /*#__PURE__*/React.createElement(Select, {\n    showSearch: true,\n    combobox: true,\n    allowClear: true,\n    placeholder: \"Select Indication\" // optionFilterProp=\"children\"\n    ,\n    onChange: setIndication,\n    filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 19\n    }\n  }, IndicationJson.map(data => {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: data.name,\n      key: data.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 27\n      }\n    }, data.name);\n  }))), (errors = getFieldError('indication')) ? /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 59\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    placeholder: \"Progress Notes \\n(will push to PCC/MED e-care)\",\n    class: \"inputForm form_group\",\n    onChange: e => setProgressNote(e.target.value),\n    value: progressNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }\n  })))));\n}\n\nfunction StandingOrder({\n  description,\n  setDescription,\n  descError = ''\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form_group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    placeholder: \"Description\",\n    class: \"inputForm form_group\",\n    onChange: e => setDescription(e.target.value),\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }\n  }), !!descError && /*#__PURE__*/React.createElement(ErrorMsg, {\n    errors: [descError],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 23\n    }\n  }));\n}\n\nexport default createForm()(AddNewPMRModal);","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/PmrTodo/components/AddNewPMR.js"],"names":["React","useState","Modal","ORDER_TYPE","createForm","ErrorMsg","Input","Select","TextArea","Option","Toast","IndicationJson","SearchMedication","medicationAdd","axios","isDrOrNp","SUB_CATEGORY","PMR_ORDER","USER_TYPE","AddNewPMRModal","visible","onClose","form","detail","orderData","propOrderData","onAddOrder","onNurseAck","onDrAck","standingOrder","authUser","orderStatus","getFieldError","getFieldDecorator","setFieldsValue","errors","clonedOrders","length","find","ord","cloneFrom","_id","orderType","setOrderType","medication","setMedication","indication","setIndication","direction","setDirection","progressNote","setProgressNote","description","setDescription","descError","setDescError","orderTypeErr","setOrderTypeErr","loading","setLoading","medicationRecord","useRef","isEdit","useEffect","drug","name","sig","progressNotes","handleMedicationChange","record","current","onStandingOrderSave","trim","reqData","subCategory","pmrOrderId","rxNum","source","onSave","number","unit","dosage_form","ingredients","drugbank_id","error","validateFields","err","values","STATUS","DISCONTINUE","type","HOME","NURSE","PHYSICIAN","MED_REVIEW","PMR","status","CONTINUE","docStatusUpdate","data","then","res","code","success","message","catch","console","log","finally","borderTop","padding","flexWrap","display","Object","keys","map","x","replace","marginBottom","whiteSpace","rules","required","whitespace","e","target","value","input","option","props","children","toLowerCase","indexOf","id","StandingOrder"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,yCAAlB;AACA,SAASC,UAAT,QAA2B,iCAA3B;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,MAA5C,EAAoDC,KAApD,QAAiE,4BAAjE;AAEA,OAAOC,cAAP,MAA2B,6CAA3B;AACA,OAAOC,gBAAP,MAA6B,2DAA7B;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,OAAOC,KAAP,MAAkB,yCAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,SAAT,QAA0B,yBAA1B;;AAEA,SAASC,cAAT,CAAwB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,MAA1B;AAAkCC,EAAAA,SAAS,EAAEC,aAA7C;AAA4DC,EAAAA,UAA5D;AACtBC,EAAAA,UADsB;AACVC,EAAAA,OADU;AACDC,EAAAA,aADC;AACcC,EAAAA,QADd;AACwBC,EAAAA;AADxB,CAAxB,EAC+D;AAAA;;AAC7D,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,iBAAjB;AAAoCC,IAAAA;AAApC,MAAuDZ,IAA7D;AACA,MAAIa,MAAJ;AAEA,MAAIX,SAAS,GAAGC,aAAhB;;AACA,MAAIA,aAAa,IAAIA,aAAa,CAACW,YAA/B,IAA+CX,aAAa,CAACW,YAAd,CAA2BC,MAA3B,GAAoC,CAAvF,EAA0F;AACxFb,IAAAA,SAAS,GAAGC,aAAa,CAACW,YAAd,CAA2BE,IAA3B,CAAgCC,GAAG,IAAIA,GAAG,CAACC,SAAJ,IAAiBf,aAAa,CAACgB,GAAtE,CAAZ;AACD;;AACD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B1C,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAAC2C,UAAD,EAAaC,aAAb,IAA8B5C,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAAC6C,UAAD,EAAaC,aAAb,IAA8B9C,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC+C,SAAD,EAAYC,YAAZ,IAA4BhD,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACiD,YAAD,EAAeC,eAAf,IAAkClD,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACmD,WAAD,EAAcC,cAAd,IAAgCpD,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACqD,SAAD,EAAYC,YAAZ,IAA4BtD,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACuD,YAAD,EAAeC,eAAf,IAAkCxD,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACyD,OAAD,EAAUC,UAAV,IAAwB1D,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM2D,gBAAgB,GAAG5D,KAAK,CAAC6D,MAAN,CAAa,EAAb,CAAzB;AACA,QAAMC,MAAM,GAAG9D,KAAK,CAAC6D,MAAN,CAAa,CAAC,gBAACrC,SAAD,+CAAC,WAAWiB,GAAZ,CAAd,CAAf;AAEAzC,EAAAA,KAAK,CAAC+D,SAAN,CAAgB,MAAM;AACpB,QAAIvC,SAAS,IAAIA,SAAS,CAACiB,GAA3B,EAAgC;AAAA;;AAC9BP,MAAAA,cAAc,CAAC;AACb,qCAAcV,SAAd,oEAAc,YAAWwC,IAAzB,qDAAc,iBAAiBC,IADlB;AAEb,qCAAczC,SAAd,gDAAc,YAAWsB,UAFZ;AAGb,qBAAatB,SAAS,CAAC0C,GAAV,IAAiB1C,SAAS,CAACwB,SAH3B;AAIb,wCAAiBxB,SAAjB,gDAAiB,YAAW2C;AAJf,OAAD,CAAd;AAMAlB,MAAAA,YAAY,CAACzB,SAAS,CAAC0C,GAAV,IAAiB1C,SAAS,CAACwB,SAA5B,CAAZ;AACAH,MAAAA,aAAa,gBAACrB,SAAD,oEAAC,YAAWwC,IAAZ,qDAAC,iBAAiBC,IAAlB,CAAb;AACAtB,MAAAA,YAAY,gBAACnB,SAAD,gDAAC,YAAWkB,SAAZ,CAAZ;AACAS,MAAAA,eAAe,gBAAC3B,SAAD,gDAAC,YAAW2C,aAAZ,CAAf;AACAd,MAAAA,cAAc,gBAAC7B,SAAD,gDAAC,YAAW4B,WAAZ,CAAd;AACAL,MAAAA,aAAa,gBAACvB,SAAD,gDAAC,YAAWsB,UAAZ,CAAb;AACAK,MAAAA,eAAe,iBAAC3B,SAAD,iDAAC,aAAW2C,aAAZ,CAAf;AACD;AACF,GAhBD,EAgBG,CAAC3C,SAAD,CAhBH;;AAkBA,QAAM4C,sBAAsB,GAAG,CAACxB,UAAD,EAAayB,MAAb,KAAwB;AACrDT,IAAAA,gBAAgB,CAACU,OAAjB,GAA2BD,MAA3B;AACAxB,IAAAA,aAAa,CAACD,UAAD,CAAb;AACD,GAHD;;AAKA,QAAM2B,mBAAmB,GAAG,MAAM;AAChC,QAAI,CAACnB,WAAD,IAAgB,EAACA,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEoB,IAAb,EAAD,CAApB,EAA0C;AACxC,aAAOjB,YAAY,CAAC,wBAAD,CAAnB;AACD;;AACDA,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACA,UAAMkB,OAAO,GAAG;AACd,eAASlD,MAAM,CAACkB,GADF;AAEdW,MAAAA,WAFc;AAGd,qBAAe7B,MAAM,CAACmD,WAHR;AAIdC,MAAAA,UAAU,EAAE,CAAC,CAACnD,SAAF,IAAeA,SAAS,CAACiB,GAJvB;AAKdqB,MAAAA,MAAM,EAAE,CAAC,CAACtC,SAAF,IAAeA,SAAS,CAACiB,GALnB;AAMdmC,MAAAA,KAAK,EAAE,EANO;AAOdC,MAAAA,MAAM,EAAE;AAPM,KAAhB;AASAlD,IAAAA,UAAU,CAAC8C,OAAD,CAAV;AACD,GAfD;;AAiBA,QAAMK,MAAM,GAAG,MAAM;AAAA;;AACnB,UAAML,OAAO,GAAG;AACd,eAASlD,MAAM,CAACkB,GADF;AAEd,oBAAcK,UAFA;AAGd,oBAAcF,UAHA;AAId,mBAAaF,SAJC;AAKdM,MAAAA,SAAS,EAAEA,SALG;AAMd,gBAAU;AACR,0BAAkB,EADV;AAER,sBAAc;AAFN,OANI;AAUd,qBAAezB,MAAM,CAACmD,WAVR;AAWd,eAAS,0BAXK;AAYd,kBAAYd,gBAAZ,aAAYA,gBAAZ,gDAAYA,gBAAgB,CAAEU,OAA9B,0DAAY,sBAA2BS,MAZzB;AAad,sBAAgBnB,gBAAhB,aAAgBA,gBAAhB,iDAAgBA,gBAAgB,CAAEU,OAAlC,2DAAgB,uBAA2BU,IAb7B;AAcd,oBAAcpB,gBAAd,aAAcA,gBAAd,iDAAcA,gBAAgB,CAAEU,OAAhC,2DAAc,uBAA2BW,WAd3B;AAed,aAAOrB,gBAAP,aAAOA,gBAAP,iDAAOA,gBAAgB,CAAEU,OAAzB,qFAAO,uBAA2BY,WAAlC,qFAAO,uBAAyC,CAAzC,CAAP,2DAAO,uBAA6CC,WAftC;AAgBd,uBAAiBjC;AAhBH,KAAhB;;AAkBA,QAAI,CAACR,SAAL,EAAgB;AACde,MAAAA,eAAe,CAAC,0BAAD,CAAf;AACA;AACD,KAHD,MAGO;AACLA,MAAAA,eAAe,CAAC,EAAD,CAAf;AACD;;AACD,QAAI,CAACgB,OAAO,CAAC7B,UAAb,EAAyB;AACvBlC,MAAAA,KAAK,CAAC0E,KAAN,CAAY,iDAAZ;AACA;AACD;;AACD9D,IAAAA,IAAI,CAAC+D,cAAL,CAAoB,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACnC,UAAI,CAAC,CAAC/D,SAAF,IAAeA,SAAS,CAACiB,GAAzB,IAAgCV,WAAW,KAAKd,SAAS,CAACuE,MAAV,CAAiBC,WAArE,EAAkF;AAChF;AACA,YAAI3D,QAAQ,CAAC4D,IAAT,KAAkBxE,SAAS,CAACyE,IAAV,CAAeC,KAArC,EAA4C;AAC1CjE,UAAAA,UAAU,CAAC8C,OAAD,CAAV;AACD,SAFD,MAGK,IAAI3C,QAAQ,CAAC4D,IAAT,KAAkBxE,SAAS,CAACyE,IAAV,CAAeE,SAAjC,IACJtE,MAAM,CAACmD,WAAP,KAAuB1D,YAAY,CAAC8E,UAAb,CAAwBC,GAD/C,EACoD;AACvDnE,UAAAA,OAAO,CAAC6C,OAAD,CAAP;AACD;AACF,OATD,MASO;AACL,YAAI1D,QAAQ,CAACe,QAAD,CAAR,IAAsBP,MAAM,CAACmD,WAAP,KAAuB1D,YAAY,CAAC8E,UAAb,CAAwBC,GAAzE,EAA8E;AAC5E;AACAtB,UAAAA,OAAO,CAACuB,MAAR,GAAiB/E,SAAS,CAACuE,MAAV,CAAiBS,QAAlC;AACAxB,UAAAA,OAAO,CAACyB,eAAR,GAA0BjF,SAAS,CAACuE,MAAV,CAAiBS,QAA3C;AACD;;AACDtC,QAAAA,UAAU,CAAC,IAAD,CAAV;AAEA7C,QAAAA,KAAK,CAAC,EAAE,GAAGD,aAAL;AAAoBsF,UAAAA,IAAI,EAAE1B;AAA1B,SAAD,CAAL,CAA2C2B,IAA3C,CAAgDC,GAAG,IAAI;AACrD,cAAIA,GAAG,CAACC,IAAJ,KAAa,IAAjB,EAAuB;AACrB5F,YAAAA,KAAK,CAAC6F,OAAN,CAAcF,GAAG,CAACG,OAAlB;AACA9E,YAAAA,UAAU,CAAC2E,GAAG,CAACF,IAAL,CAAV;AACAxC,YAAAA,UAAU,CAAC,KAAD,CAAV;AACAtC,YAAAA,OAAO;AACR;AACF,SAPD,EAOGoF,KAPH,CAOSnB,GAAG,IAAI;AACdoB,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBrB,GAAxB;AACA3B,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD,SAVD,EAUGiD,OAVH,CAUW,MAAMjD,UAAU,CAAC,KAAD,CAV3B;AAWD;AACF,KA9BD;AAgCD,GA7DD;;AA+DA,sBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAEvC,OADX;AAEE,IAAA,KAAK,EAAG,GAAE0C,MAAM,CAACQ,OAAP,GAAiB,QAAjB,GAA4B,KAAM,QAF9C;AAGE,IAAA,YAAY,EAAE,IAHhB;AAIE,IAAA,QAAQ,EAAEjD,OAJZ;AAKE,IAAA,OAAO,EAAEA,OALX;AAME,IAAA,MAAM,EAAE,IANV;AAOE,IAAA,SAAS,EAAC,0BAPZ;AAQE,IAAA,QAAQ,EAAE,KARZ;AASE,IAAA,MAAM,EAAEyC,MAAM,CAACQ,OAAP,GAAiB,QAAjB,GAA4B,KATtC;AAUE,IAAA,QAAQ,EAAC,+BAVX;AAWE,IAAA,IAAI,EAAEzC,aAAa,GAAG0C,mBAAH,GAAyBO,MAX9C;AAYE,IAAA,aAAa,EAAE;AAAEpB,MAAAA,OAAO,EAAEA;AAAX,KAZjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeI7B,aAAa,gBACX,oBAAC,aAAD,gBAAmB;AAAEuB,IAAAA,WAAF;AAAeC,IAAAA,cAAf;AAA+BC,IAAAA;AAA/B,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADW,gBAGX,uDACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,KAAK,EAAE;AAAEuD,MAAAA,SAAS,EAAE;AAAb,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAyC,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,YAAX;AAAyBC,MAAAA,QAAQ,EAAE,MAAnC;AAA2CC,MAAAA,OAAO,EAAE;AAApD,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIC,MAAM,CAACC,IAAP,CAAY/G,UAAZ,EAAwBgH,GAAxB,CAA4BC,CAAC,iBAC3B;AACE,IAAA,GAAG,EAAEA,CAAC,CAACC,OAAF,CAAU,GAAV,EAAe,GAAf,CADP;AAEE,IAAA,SAAS,EAAC,eAFZ;AAGE,IAAA,OAAO,EAAE,MAAM1E,YAAY,CAACxC,UAAU,CAACiH,CAAD,CAAX,CAH7B;AAIE,IAAA,KAAK,EAAE;AAAEE,MAAAA,YAAY,EAAE;AAAhB,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAEF,CAAC,CAACC,OAAF,CAAU,GAAV,EAAe,GAAf,CAFR;AAGE,IAAA,EAAE,EAAED,CAAC,CAACC,OAAF,CAAU,GAAV,EAAe,GAAf,CAHN;AAIE,IAAA,KAAK,EAAElH,UAAU,CAACiH,CAAD,CAJnB;AAKE,IAAA,OAAO,EAAE1E,SAAS,KAAKvC,UAAU,CAACiH,CAAD,CALnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAaE;AAAM,IAAA,KAAK,EAAE;AAAEG,MAAAA,UAAU,EAAE,QAAd;AAAwBP,MAAAA,OAAO,EAAE;AAAjC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,CAAC,CAACC,OAAF,CAAU,GAAV,EAAe,GAAf,CADH,CAbF,CADF,CAFJ,CADF,EAwBG,CAAC,CAAC7D,YAAF,gBACC;AAAK,IAAA,KAAK,EAAE;AAAE8D,MAAAA,YAAY,EAAE;AAAhB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAE,CAAC9D,YAAD,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,GAIG,IA5BN,CAFF,CADF,CADF,eAqCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,iBAAiB,CAAC,YAAD,EAAe;AAC/BuF,IAAAA,KAAK,EAAE,CAAC;AACNC,MAAAA,QAAQ,EAAE,IADJ;AACUjB,MAAAA,OAAO,EAAG,yBADpB,CAEN;;AAFM,KAAD;AADwB,GAAf,CAAjB,eAMC,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAE5D,UADT;AAEE,IAAA,kBAAkB,EAAEwB,sBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAND,CADH,EAYG,CAACjC,MAAM,GAAGH,aAAa,CAAC,YAAD,CAAvB,iBAAyC,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAEG,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzC,GAAwE,IAZ3E,CARF,eAuBE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,iBAAiB,CAAC,WAAD,EAAc;AAC9BuF,IAAAA,KAAK,EAAE,CAAC;AACNC,MAAAA,QAAQ,EAAE,KADJ;AACWjB,MAAAA,OAAO,EAAG,wBADrB;AAENkB,MAAAA,UAAU,EAAE;AAFN,KAAD;AADuB,GAAd,CAAjB,eAMC,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,WAAnB;AAA+B,IAAA,QAAQ,EAAEC,CAAC,IAAI1E,YAAY,CAAC0E,CAAC,CAACC,MAAF,CAASC,KAAV,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAND,CADH,EASG,CAAC1F,MAAM,GAAGH,aAAa,CAAC,WAAD,CAAvB,iBAAwC,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAEG,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxC,GAAuE,IAT1E,CAvBF,eAmCE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,iBAAiB,CAAC,YAAD,EAAe;AAC/BuF,IAAAA,KAAK,EAAE,CAAC;AACNC,MAAAA,QAAQ,EAAE,KADJ;AACWjB,MAAAA,OAAO,EAAG,yBADrB;AAENkB,MAAAA,UAAU,EAAE;AAFN,KAAD;AADwB,GAAf,CAAjB,eAMC,oBAAC,MAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,QAAQ,EAAE,IAFZ;AAGE,IAAA,UAAU,MAHZ;AAIE,IAAA,WAAW,EAAC,mBAJd,CAKE;AALF;AAME,IAAA,QAAQ,EAAE3E,aANZ;AAOE,IAAA,YAAY,EAAE,CAAC+E,KAAD,EAAQC,MAAR,KACZA,MAAM,CAACC,KAAP,CAAaC,QAAb,CAAsBC,WAAtB,GAAoCC,OAApC,CAA4CL,KAAK,CAACI,WAAN,EAA5C,KAAoE,CARxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYIvH,cAAc,CAACwG,GAAf,CAAoBhB,IAAD,IAAU;AAC3B,wBACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEA,IAAI,CAAClC,IAApB;AAA0B,MAAA,GAAG,EAAEkC,IAAI,CAACiC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyCjC,IAAI,CAAClC,IAA9C,CADF;AAGD,GAJD,CAZJ,CAND,CADH,EA2BG,CAAC9B,MAAM,GAAGH,aAAa,CAAC,YAAD,CAAvB,iBAAyC,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAEG,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzC,GAAwE,IA3B3E,CAnCF,eAgEE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,WAAW,EAAC,gDADd;AAEE,IAAA,KAAK,EAAC,sBAFR;AAGE,IAAA,QAAQ,EAAEwF,CAAC,IAAIxE,eAAe,CAACwE,CAAC,CAACC,MAAF,CAASC,KAAV,CAHhC;AAIE,IAAA,KAAK,EAAE3E,YAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhEF,CArCF,CAlBN,CADF;AAqID;;AAED,SAASmF,aAAT,CAAuB;AAAEjF,EAAAA,WAAF;AAAeC,EAAAA,cAAf;AAA+BC,EAAAA,SAAS,GAAG;AAA3C,CAAvB,EAAwE;AACtE,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,WAAW,EAAC,aADd;AAEE,IAAA,KAAK,EAAC,sBAFR;AAGE,IAAA,QAAQ,EAAEqE,CAAC,IAAItE,cAAc,CAACsE,CAAC,CAACC,MAAF,CAASC,KAAV,CAH/B;AAIE,IAAA,KAAK,EAAEzE,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOG,CAAC,CAACE,SAAF,iBAAe,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAE,CAACA,SAAD,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPlB,CADF;AAWD;;AAED,eAAelD,UAAU,GAAGe,cAAH,CAAzB","sourcesContent":["import React, { useState } from 'react';\nimport Modal from \"../../../../src/components/common/Popup\";\nimport { ORDER_TYPE } from '../../../constants/prescription';\nimport { createForm } from 'rc-form'\nimport { ErrorMsg, Input, Select, TextArea, Option, Toast } from '../../../components/common';\n\nimport IndicationJson from '../../../assets/files/JSON/indications.json'\nimport SearchMedication from '../../../components/SearchMedication/SearchMedicationCopy';\nimport { medicationAdd } from '../../../services/api/routes/pmr';\nimport axios from \"./../../../services/api/services/common\";\nimport { isDrOrNp } from '../../../util/common'\nimport { SUB_CATEGORY } from '../../../constants/todo';\nimport { PMR_ORDER } from '../../../constants/pmr';\nimport { USER_TYPE } from '../../../constants/User';\n\nfunction AddNewPMRModal({ visible, onClose, form, detail, orderData: propOrderData, onAddOrder,\n  onNurseAck, onDrAck, standingOrder, authUser, orderStatus }) {\n  const { getFieldError, getFieldDecorator, setFieldsValue } = form;\n  let errors\n\n  let orderData = propOrderData;\n  if (propOrderData && propOrderData.clonedOrders && propOrderData.clonedOrders.length > 1) {\n    orderData = propOrderData.clonedOrders.find(ord => ord.cloneFrom == propOrderData._id)\n  }\n  const [orderType, setOrderType] = useState(0);\n  const [medication, setMedication] = useState(null)\n  const [indication, setIndication] = useState('');\n  const [direction, setDirection] = useState('');\n  const [progressNote, setProgressNote] = useState('');\n  const [description, setDescription] = useState('');\n  const [descError, setDescError] = useState('');\n  const [orderTypeErr, setOrderTypeErr] = useState('');\n  const [loading, setLoading] = useState(false)\n  const medicationRecord = React.useRef({});\n  const isEdit = React.useRef(!!orderData?._id);\n\n  React.useEffect(() => {\n    if (orderData && orderData._id) {\n      setFieldsValue({\n        'medication': orderData?.drug?.name,\n        'indication': orderData?.indication,\n        'direction': orderData.sig || orderData.direction,\n        'progressNotes': orderData?.progressNotes\n      });\n      setDirection(orderData.sig || orderData.direction)\n      setMedication(orderData?.drug?.name)\n      setOrderType(orderData?.orderType);\n      setProgressNote(orderData?.progressNotes);\n      setDescription(orderData?.description);\n      setIndication(orderData?.indication);\n      setProgressNote(orderData?.progressNotes);\n    }\n  }, [orderData])\n\n  const handleMedicationChange = (medication, record) => {\n    medicationRecord.current = record;\n    setMedication(medication);\n  }\n\n  const onStandingOrderSave = () => {\n    if (!description || !description?.trim()) {\n      return setDescError(\"Please add description\");\n    }\n    setDescError(\"\");\n    const reqData = {\n      \"pmrId\": detail._id,\n      description,\n      \"subCategory\": detail.subCategory,\n      pmrOrderId: !!orderData && orderData._id,\n      isEdit: !!orderData && orderData._id,\n      rxNum: '',\n      source: 'KROLL'\n    }\n    onNurseAck(reqData)\n  }\n\n  const onSave = () => {\n    const reqData = {\n      \"pmrId\": detail._id,\n      \"indication\": indication,\n      \"medication\": medication,\n      \"orderType\": orderType,\n      direction: direction,\n      \"luCode\": {\n        \"reasonForUseId\": \"\",\n        \"reasonText\": \"\"\n      },\n      \"subCategory\": detail.subCategory,\n      \"odbId\": \"5d64d870417e1a43fd6f040e\",\n      \"strength\": medicationRecord?.current?.number,\n      \"strengthUnit\": medicationRecord?.current?.unit,\n      \"dosageForm\": medicationRecord?.current?.dosage_form,\n      \"din\": medicationRecord?.current?.ingredients?.[0]?.drugbank_id,\n      \"progressNotes\": progressNote\n    }\n    if (!orderType) {\n      setOrderTypeErr(\"Please select order type\");\n      return\n    } else {\n      setOrderTypeErr('')\n    }\n    if (!reqData.medication) {\n      Toast.error('Please input medication of minimum 3 characters')\n      return\n    }\n    form.validateFields((err, values) => {\n      if (!!orderData && orderData._id || orderStatus === PMR_ORDER.STATUS.DISCONTINUE) {\n        // while edit\n        if (authUser.type === USER_TYPE.HOME.NURSE) {\n          onNurseAck(reqData)\n        }\n        else if (authUser.type === USER_TYPE.HOME.PHYSICIAN\n          && detail.subCategory === SUB_CATEGORY.MED_REVIEW.PMR) {\n          onDrAck(reqData)\n        }\n      } else {\n        if (isDrOrNp(authUser) && detail.subCategory === SUB_CATEGORY.MED_REVIEW.PMR) {\n          //Add new form\n          reqData.status = PMR_ORDER.STATUS.CONTINUE\n          reqData.docStatusUpdate = PMR_ORDER.STATUS.CONTINUE\n        }\n        setLoading(true);\n\n        axios({ ...medicationAdd, data: reqData }).then(res => {\n          if (res.code === 'OK') {\n            Toast.success(res.message)\n            onAddOrder(res.data);\n            setLoading(false);\n            onClose()\n          }\n        }).catch(err => {\n          console.log(\"error = \", err)\n          setLoading(false);\n        }).finally(() => setLoading(false))\n      }\n    });\n\n  };\n\n  return (\n    <Modal\n      visible={visible}\n      title={`${isEdit.current ? 'Update' : 'Add'} Order`}\n      maskClosable={true}\n      onCancel={onClose}\n      onClose={onClose}\n      footer={true}\n      className=\"lock_popup addxray-popup\"\n      closable={false}\n      okText={isEdit.current ? 'Update' : 'Add'}\n      btnClass=\"d-flex-end f-end footer-block\"\n      onOk={standingOrder ? onStandingOrderSave : onSave}\n      okButtonProps={{ loading: loading }}\n    >\n      {\n        standingOrder ?\n          <StandingOrder {...{ description, setDescription, descError }}></StandingOrder>\n          :\n          <>\n            <div className=\"filter_wrap\" style={{ borderTop: 0 }}>\n              <div className=\"filter_section add-pmr-order\">\n                <span className=\"sub-text \">Type</span>\n                <div className=\"rx-btns drug-bts\">\n                  <div className=\"flex-block filter_value\" style={{ padding: '10px 0 5px', flexWrap: 'wrap', display: 'flex' }}>\n                    {\n                      Object.keys(ORDER_TYPE).map(x => (\n                        <label\n                          for={x.replace(/_/, ' ')}\n                          className=\"filter_switch\"\n                          onClick={() => setOrderType(ORDER_TYPE[x])}\n                          style={{ marginBottom: '5px' }}\n                        >\n                          <input\n                            type=\"checkbox\"\n                            name={x.replace(/_/, ' ')}\n                            id={x.replace(/_/, ' ')}\n                            value={ORDER_TYPE[x]}\n                            checked={orderType === ORDER_TYPE[x]}\n                          />\n                          <span style={{ whiteSpace: 'nowrap', display: 'block' }}>\n                            {x.replace(/_/, ' ')}\n                          </span>\n                        </label>\n                      ))\n                    }\n                  </div>\n                  {!!orderTypeErr ?\n                    <div style={{ marginBottom: 15 }}>\n                      <ErrorMsg errors={[orderTypeErr]} />\n                    </div>\n                    : null}\n                </div>\n              </div>\n            </div>\n\n            <div>\n              {/* <div className=\"form_group\">\n          {\n            !isDrOrNp(authUser) ?\n              <DoctorFilter value={physicianId} onChange={setPhysicianId} />\n              : null\n          }\n        </div> */}\n              <div className=\"form_group\">\n                {getFieldDecorator('medication', {\n                  rules: [{\n                    required: true, message: `Please enter medication`,\n                    // whitespace: true,\n                  }]\n                })(\n                  <SearchMedication\n                    value={medication}\n                    onSelectMedication={handleMedicationChange}\n                  />\n                )}\n                {(errors = getFieldError('medication')) ? <ErrorMsg errors={errors} /> : null}\n\n              </div>\n              <div className=\"form_group textInput\">\n                {getFieldDecorator('direction', {\n                  rules: [{\n                    required: false, message: `Please enter direction`,\n                    whitespace: true,\n                  }]\n                })(\n                  <Input placeholder='direction' onChange={e => setDirection(e.target.value)} />\n                )}\n                {(errors = getFieldError('direction')) ? <ErrorMsg errors={errors} /> : null}\n\n              </div>\n              <div className=\"form_group\">\n                {getFieldDecorator('indication', {\n                  rules: [{\n                    required: false, message: `Please enter indication`,\n                    whitespace: true,\n                  }]\n                })(\n                  <Select\n                    showSearch\n                    combobox={true}\n                    allowClear\n                    placeholder=\"Select Indication\"\n                    // optionFilterProp=\"children\"\n                    onChange={setIndication}\n                    filterOption={(input, option) =>\n                      option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                  >\n                    {\n                      IndicationJson.map((data) => {\n                        return (\n                          <Option value={data.name} key={data.id}>{data.name}</Option>\n                        )\n                      })\n                    }\n                  </Select>\n                )}\n                {(errors = getFieldError('indication')) ? <ErrorMsg errors={errors} /> : null}\n              </div>\n              <div className=\"form_group\">\n                <TextArea\n                  placeholder=\"Progress Notes &#10;(will push to PCC/MED e-care)\"\n                  class=\"inputForm form_group\"\n                  onChange={e => setProgressNote(e.target.value)}\n                  value={progressNote}\n                ></TextArea>\n              </div>\n            </div>\n          </>\n      }\n    </Modal>\n  )\n}\n\nfunction StandingOrder({ description, setDescription, descError = '' }) {\n  return (\n    <div className=\"form_group\">\n      <TextArea\n        placeholder=\"Description\"\n        class=\"inputForm form_group\"\n        onChange={e => setDescription(e.target.value)}\n        value={description}\n      ></TextArea>\n      {!!descError && <ErrorMsg errors={[descError]} />}\n    </div>\n  )\n}\n\nexport default createForm()(AddNewPMRModal);"]},"metadata":{},"sourceType":"module"}