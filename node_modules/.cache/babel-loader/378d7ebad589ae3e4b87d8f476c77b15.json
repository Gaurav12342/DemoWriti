{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/PrescriptionTodo/components/TodoListContainer.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { TodoSubCategory, ViewTypeFilter } from '../../../components/Todo';\nimport { getTodoCounts } from '../../../services/api/routes/todoDashboard';\nimport ResidentList from './ResidentList';\nimport axios from '../../../services/api/services/common';\nimport { todoDashboardUpdate } from '../../../services/socket/routes/todo';\nimport queryString from \"query-string\";\nimport { TODO_CATEGORY, SUB_CATEGORY, MAP_TODOS } from '../../../constants/todo';\nimport { DEVICE_VIEW } from '../../../constants/prescription';\nimport { isDrOrNp } from '../../../util/common';\nimport { getDeviceView } from '../../../util/todo';\nimport _ from 'lodash';\n\nconst TodoListContainer = props => {\n  const {\n    socket,\n    authUser,\n    location,\n    todoListContainerProps\n  } = props;\n  const {\n    activeSubCategory,\n    onChangeListview,\n    onsetActiveTodo,\n    onSetActiveSubCategory\n  } = todoListContainerProps;\n  const [query, setQuery] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isPrimaryFilter, setIsPrimaryFilter] = useState(false);\n  const [dashboardData, setDashboardData] = useState([]);\n  const [todoList, setTodoList] = useState([]);\n  const [dashboardCount, setDashboardCount] = useState(0);\n  const [filter, setFilter] = useState({\n    category: TODO_CATEGORY.PRESCRIPTION\n  });\n  useEffect(() => {\n    const location = props.location;\n    let queryObj = queryString.parse(location.search);\n    queryObj = { ...queryObj,\n      category: parseInt(queryObj.category),\n      subCategory: parseInt(queryObj.subCategory),\n      viewType: parseInt(queryObj.viewType)\n    };\n    let obj = getDeviceView(queryObj, authUser);\n    queryObj.viewType = obj.viewType;\n    setIsPrimaryFilter(obj.deviceView);\n    handleSetQuery(queryObj);\n  }, []);\n  useEffect(() => {\n    // get dashboard count\n    fetch();\n  }, [filter]);\n  useEffect(() => {\n    if (query && (dashboardData === null || dashboardData === void 0 ? void 0 : dashboardData.length) > 0) {\n      let activeSubcat = dashboardData.find(x => x.type === query.subCategory);\n      if (activeSubcat) onSetActiveSubCategory(activeSubcat);\n    }\n  }, [query, dashboardData]);\n  useEffect(() => {\n    //update dashboard count\n    if (socket) {\n      socket.on(todoDashboardUpdate, handleDashboardUpdate);\n      return () => {\n        socket.off(todoDashboardUpdate);\n      };\n    }\n  }, [dashboardData]);\n\n  const handleSetQuery = queryObj => {\n    if (queryObj) {\n      setQuery(queryObj);\n    }\n  };\n\n  const handleDashboardUpdate = data => {\n    var _filter$homeAreaId;\n\n    console.log(\"handleDashboardUpdate data => \", data);\n    if (filter && ((_filter$homeAreaId = filter.homeAreaId) === null || _filter$homeAreaId === void 0 ? void 0 : _filter$homeAreaId.length) > 0) return;\n    let tempData = [...dashboardData];\n    tempData.map(todo => {\n      let updatedTodo = data.data.find(y => y.type === todo.type);\n      if (updatedTodo) todo.value = updatedTodo.value;\n      return todo;\n    });\n    setDashboardData(tempData);\n  };\n\n  const fetch = () => {\n    // get dashboard count\n    setLoading(true);\n    axios({ ...getTodoCounts,\n      data: filter\n    }).then(data => {\n      if (data.code === 'OK') {\n        setDashboardData(data.data[0].data);\n        setDashboardCount(data.data[0].count);\n      }\n\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n    });\n  };\n\n  const handleTodoCat = todo => {\n    let queryObj = { ...query,\n      subCategory: todo.type\n    };\n    let obj = getDeviceView(queryObj, authUser);\n    queryObj.viewType = obj.viewType;\n    setIsPrimaryFilter(obj.deviceView);\n    setQuery(queryObj);\n    onSetActiveSubCategory(todo);\n  };\n\n  const handleViewType = viewType => {\n    let queryObj = { ...query,\n      viewType: viewType\n    };\n    setQuery(queryObj);\n    onChangeListview(viewType);\n  };\n\n  const handleHomeAreaChange = val => {\n    let tempFilter = { ...filter,\n      homeAreaId: val ? [val] : undefined\n    };\n    setFilter(tempFilter);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, query ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TodoSubCategory, {\n    todos: dashboardData,\n    dashboardCount: dashboardCount,\n    loading: loading,\n    onSetActiveSubCategory: handleTodoCat,\n    onHomeAreaChange: handleHomeAreaChange,\n    onChangeListview: handleViewType,\n    activeSubCategory: activeSubCategory,\n    query: query,\n    isPrimaryFilter: isPrimaryFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(ResidentList, {\n    query: query,\n    onsetActiveTodo: onsetActiveTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  })) : null);\n};\n\nconst mapStateToProps = ({\n  auth\n}) => {\n  const {\n    authUser,\n    socket\n  } = auth;\n  return {\n    authUser,\n    socket\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(TodoListContainer));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/PrescriptionTodo/components/TodoListContainer.js"],"names":["React","Component","useState","useEffect","connect","withRouter","TodoSubCategory","ViewTypeFilter","getTodoCounts","ResidentList","axios","todoDashboardUpdate","queryString","TODO_CATEGORY","SUB_CATEGORY","MAP_TODOS","DEVICE_VIEW","isDrOrNp","getDeviceView","_","TodoListContainer","props","socket","authUser","location","todoListContainerProps","activeSubCategory","onChangeListview","onsetActiveTodo","onSetActiveSubCategory","query","setQuery","loading","setLoading","isPrimaryFilter","setIsPrimaryFilter","dashboardData","setDashboardData","todoList","setTodoList","dashboardCount","setDashboardCount","filter","setFilter","category","PRESCRIPTION","queryObj","parse","search","parseInt","subCategory","viewType","obj","deviceView","handleSetQuery","fetch","length","activeSubcat","find","x","type","on","handleDashboardUpdate","off","data","console","log","homeAreaId","tempData","map","todo","updatedTodo","y","value","then","code","count","catch","err","handleTodoCat","handleViewType","handleHomeAreaChange","val","tempFilter","undefined","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { TodoSubCategory, ViewTypeFilter } from '../../../components/Todo';\nimport { getTodoCounts } from '../../../services/api/routes/todoDashboard';\nimport ResidentList from './ResidentList';\nimport axios from '../../../services/api/services/common'\nimport { todoDashboardUpdate } from '../../../services/socket/routes/todo'\nimport queryString from \"query-string\";\nimport { TODO_CATEGORY, SUB_CATEGORY, MAP_TODOS } from '../../../constants/todo';\nimport { DEVICE_VIEW } from '../../../constants/prescription'\nimport { isDrOrNp } from '../../../util/common'\nimport { getDeviceView } from '../../../util/todo'\nimport _ from 'lodash'\n\nconst TodoListContainer = props => {\n    const { socket, authUser, location, todoListContainerProps } = props;\n    const { activeSubCategory,\n        onChangeListview,\n        onsetActiveTodo,\n        onSetActiveSubCategory } = todoListContainerProps;\n    const [query, setQuery] = useState(null)\n    const [loading, setLoading] = useState(false);\n    const [isPrimaryFilter, setIsPrimaryFilter] = useState(false);\n    const [dashboardData, setDashboardData] = useState([]);\n    const [todoList, setTodoList] = useState([]);\n    const [dashboardCount, setDashboardCount] = useState(0);\n    const [filter, setFilter] = useState({\n        category: TODO_CATEGORY.PRESCRIPTION\n    });\n\n    useEffect(() => {\n        const location = props.location;\n        let queryObj = queryString.parse(location.search);\n        queryObj = {\n            ...queryObj,\n            category: parseInt(queryObj.category),\n            subCategory: parseInt(queryObj.subCategory),\n            viewType: parseInt(queryObj.viewType),\n        }\n        let obj = getDeviceView(queryObj, authUser)\n        queryObj.viewType = obj.viewType\n        setIsPrimaryFilter(obj.deviceView)\n        handleSetQuery(queryObj)\n    }, [])\n\n    useEffect(() => {\n        // get dashboard count\n        fetch();\n    }, [filter]);\n\n    useEffect(() => {\n        if (query && dashboardData?.length > 0) {\n            let activeSubcat = dashboardData.find(x => x.type === query.subCategory)\n            if (activeSubcat)\n                onSetActiveSubCategory(activeSubcat)\n        }\n    }, [query, dashboardData])\n\n    useEffect(() => {\n        //update dashboard count\n        if (socket) {\n            socket.on(todoDashboardUpdate, handleDashboardUpdate)\n            return () => {\n                socket.off(todoDashboardUpdate);\n            };\n        }\n    }, [dashboardData])\n\n    const handleSetQuery = (queryObj) => {\n        if (queryObj) {\n            setQuery(queryObj)\n        }\n    }\n\n    const handleDashboardUpdate = (data) => {\n        console.log(\"handleDashboardUpdate data => \", data)\n        if (filter && filter.homeAreaId?.length > 0)\n            return\n        let tempData = [...dashboardData]\n        tempData.map(todo => {\n            let updatedTodo = data.data.find(y => y.type === todo.type)\n            if (updatedTodo)\n                todo.value = updatedTodo.value\n            return todo\n        })\n        setDashboardData(tempData);\n    }\n\n    const fetch = () => {\n        // get dashboard count\n        setLoading(true);\n        axios({ ...getTodoCounts, data: filter }).then((data) => {\n            if (data.code === 'OK') {\n                setDashboardData(data.data[0].data)\n                setDashboardCount(data.data[0].count)\n            }\n            setLoading(false);\n        }).catch(err => {\n            setLoading(false);\n        })\n    };\n\n\n    const handleTodoCat = (todo) => {\n        let queryObj = {\n            ...query,\n            subCategory: todo.type,\n        }\n        let obj = getDeviceView(queryObj, authUser)\n        queryObj.viewType = obj.viewType\n        setIsPrimaryFilter(obj.deviceView)\n        setQuery(queryObj)\n        onSetActiveSubCategory(todo)\n    }\n\n    const handleViewType = (viewType) => {\n        let queryObj = {\n            ...query,\n            viewType: viewType,\n        }\n        setQuery(queryObj)\n        onChangeListview(viewType)\n    }\n\n    const handleHomeAreaChange = (val) => {\n        let tempFilter = {\n            ...filter,\n            homeAreaId: val ? [val] : undefined\n        }\n        setFilter(tempFilter)\n    }\n\n    return <>\n        {\n            query ?\n                <>\n                    <TodoSubCategory\n                        todos={dashboardData}\n                        dashboardCount={dashboardCount}\n                        loading={loading}\n                        onSetActiveSubCategory={handleTodoCat}\n                        onHomeAreaChange={handleHomeAreaChange}\n                        onChangeListview={handleViewType}\n                        activeSubCategory={activeSubCategory}\n                        query={query}\n                        isPrimaryFilter={isPrimaryFilter}\n                    />\n                    <ResidentList query={query} onsetActiveTodo={onsetActiveTodo} />\n                </>\n                : null\n        }\n    </>\n\n}\nconst mapStateToProps = ({ auth }) => {\n    const { authUser, socket } = auth\n    return {\n        authUser, socket\n    }\n}\nexport default withRouter(connect(mapStateToProps)(TodoListContainer));"]},"metadata":{},"sourceType":"module"}