{"ast":null,"code":"var _jsxFileName = \"/home/gauravpendherkar/DemoWriti/src/containers/Customers/Pharmacy/components/PharmacyTabs.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '../../../../components/common/index';\nimport UpsertForm from '../../Pharmacy/components/UpsertForm';\nimport axios from '../../../../services/api/config';\nimport SettingForm from '../../../../containers/Customers/Clientele/components/SettingForm';\nimport createForm from 'rc-form/lib/createForm';\nimport routes from '../../../../routes/constant';\nimport { getAll } from '../../../../services/api/routes/subscription';\nimport { Toast } from '../../../../components/common/Toast';\nimport Tabs, { TabPane } from 'rc-tabs';\nimport { canPerformAction } from '../../../../util/common';\nimport 'rc-tabs/assets/index.css';\nimport { MODULE, SUB_MODULE } from '../../../../constants/subscription';\nimport { CLIENTELE_TYPE } from '../../../../constants/Customer';\nimport { pharmacyPaginate, pharmacyUpsert, getSpecificPharmacy, pharmacyUpdate } from '../../../../services/api/routes/customer';\nimport { fileUpload } from '../../../../services/api/routes/common';\nimport Uploader, { FILE_CATEGORY, FILE_TYPES } from '../../../../components/common/Upload/Uploader';\n\nconst _ = require('lodash');\n\nconst PharmacyTabs = props => {\n  const [btnLoading, setBtnLoading] = useState(false);\n  const {\n    form\n  } = props;\n  const {\n    validateFields\n  } = form;\n  const [getData, setData] = useState({});\n  const [pharamcyData, setPharmacyData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [subscripData, setSubscripData] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('1');\n  const [pdfVisible, setPdfVisible] = useState(false);\n  const [jsonVisible, setJsonVisible] = useState(false);\n  const [pdfData, setPdfData] = useState();\n  const [jsonData, setJsonData] = useState();\n\n  let parentPhamracyData = _.find(pharamcyData, {\n    parentId: null\n  });\n\n  const storeData = [{\n    name: 'Burlington',\n    id: 1\n  }, {\n    name: 'London',\n    id: 2\n  }];\n  useEffect(() => {\n    fetchSubscritions();\n  }, []);\n  useEffect(() => {\n    if (props.match.params.id) getPharmacy();\n  }, [props.match.params.id]);\n  useEffect(() => {\n    fetch();\n  }, []);\n\n  const fetch = () => {\n    let {\n      method,\n      url,\n      baseURL\n    } = pharmacyPaginate;\n    axios({\n      method,\n      url,\n      baseURL\n    }).then(data => {\n      if (data.data.code === 'OK') {\n        let updatedList = data.data.data.data.filter(x => !x.parentId);\n        setPharmacyData(updatedList);\n        setTotal(data.data.data.count);\n      }\n    }).catch(err => {\n      Toast.error(err);\n    });\n  };\n\n  const fetchSubscritions = () => {\n    let {\n      method,\n      url,\n      baseURL\n    } = getAll;\n    const data = {\n      sort: {\n        createdAt: -1\n      },\n      where: {\n        isActive: true\n      }\n    };\n    axios({\n      method,\n      url,\n      baseURL,\n      data\n    }).then(response => {\n      if (response.data.code === 'OK') {\n        setSubscripData(response.data.data.data);\n      } else {\n        Toast.error(response.data.message);\n      }\n    }).catch(error => {\n      Toast.error(error);\n    });\n  };\n\n  const modifiedList = list => {\n    let modifiedList = list.map(current => {\n      return current;\n    });\n    return modifiedList;\n  };\n\n  const handlePharmacyUpsert = () => {\n    setBtnLoading(true);\n    validateFields((error, value) => {\n      if (!error) {\n        let obj = _.clone(value);\n\n        if (obj) {\n          obj.formData = {\n            pdfPath: pdfData,\n            jsonPath: jsonData\n          };\n        }\n\n        if (obj) {\n          obj.printer = {\n            name: obj.printerName,\n            machineId: obj.machineId\n          };\n        }\n\n        if (obj.email && _.size(obj.email) > 0) {\n          obj.emails = [{\n            email: obj.email,\n            isPrimary: true\n          }];\n        }\n\n        if (obj.fax && _.size(obj.fax) > 0) {\n          obj.faxes = [{\n            fax: obj.fax,\n            isPrimary: true\n          }];\n        }\n\n        if (obj) {\n          obj.mobiles = [{\n            mobile: obj.phone,\n            countryCode: '91',\n            isPrimary: true\n          }];\n          obj.addresses = [{\n            isPrimary: true,\n            line1: obj.line1,\n            line2: obj.line1,\n            city: obj.city,\n            province: obj.province,\n            country: obj.country,\n            postalCode: obj.postalCode\n          }];\n        }\n\n        delete obj.email;\n        delete obj.fax;\n        delete obj.line1;\n        delete obj.line2;\n        delete obj.postalCode;\n        delete obj.province;\n        delete obj.country;\n        delete obj.city;\n        delete obj.printerName;\n        delete obj.machineId;\n\n        if (!pdfData && jsonData || pdfData && !jsonData) {\n          Toast.error(`Please upload the ${!jsonData ? 'JSON' : 'PDF'} file.`);\n        } else {\n          let {\n            method,\n            url,\n            baseURL\n          } = getData._id ? pharmacyUpdate : pharmacyUpsert;\n          url = getData._id ? `${url}/${getData._id}` : url;\n          axios({\n            method,\n            url,\n            data: obj,\n            baseURL\n          }).then(response => {\n            if (response && response.data.code == 'OK') {\n              Toast.success(response.data.message);\n              props.history.push(routes.pharmacy.path);\n            }\n\n            setBtnLoading(false);\n          }).catch(error => {\n            setBtnLoading(false);\n            Toast.error(error);\n          });\n        }\n      } else {\n        setBtnLoading(false);\n        Toast.error('Please fill required fields...!');\n      }\n    });\n  };\n\n  const getPharmacy = () => {\n    let {\n      method,\n      url,\n      baseURL\n    } = getSpecificPharmacy;\n    url = `${url}/${props.match.params.id}`;\n    axios({\n      method,\n      url,\n      baseURL\n    }).then(response => {\n      if (response.data.code == 'OK') {\n        var _response$data$data, _response$data$data$f, _response$data$data2, _response$data$data2$;\n\n        setPdfData((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : (_response$data$data$f = _response$data$data.formData) === null || _response$data$data$f === void 0 ? void 0 : _response$data$data$f.pdfPath);\n        setJsonData((_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : (_response$data$data2$ = _response$data$data2.formData) === null || _response$data$data2$ === void 0 ? void 0 : _response$data$data2$.jsonPath);\n        setData(response.data.data);\n      }\n    }).catch(error => {\n      Toast.error(error);\n    });\n  };\n\n  const handleBackRedirect = () => {\n    props.history.push(`${routes.pharmacy.path}`);\n  };\n\n  const handleTabChange = key => {\n    setSelectedTab(key);\n  };\n\n  let pharmacySettingParams = {\n    moduleId: MODULE.PHARMACY,\n    subModuleId: SUB_MODULE.PHARMACY_SETTING\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pmr_wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page_head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginBottom: '-1%',\n      fontSize: '20px',\n      marginLeft: '2px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }, props.match.params.id ? 'Edit' : 'Add', \" Pharmacy\")), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginTop: '5px'\n    },\n    size: \"lg\",\n    onClick: () => {\n      handleBackRedirect();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, \"Back\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pmr_list_wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patient_order_wrap\",\n    style: {\n      border: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    defaultActiveKey: selectedTab,\n    activeKey: selectedTab,\n    className: \"permission_tab_wrap\",\n    onChange: handleTabChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Basic\",\n    key: \"1\",\n    className: \"resi_treat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(UpsertForm, {\n    onTabChange: handleTabChange,\n    parentPharmacy: pharamcyData,\n    store: storeData,\n    form: form,\n    editPhamacy: getData,\n    editId: props.match.params.id,\n    onCancel: handleBackRedirect,\n    onSave: handlePharmacyUpsert // onTabVisible={tabVisible}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 19\n    }\n  })), canPerformAction(pharmacySettingParams, true) ? /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Setting\",\n    key: \"2\",\n    className: \"resi_treat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(SettingForm, {\n    onPdfVisible: () => {\n      setPdfVisible(true);\n    },\n    onPdfData: pdfData,\n    onJsonData: jsonData,\n    onJsonVisible: () => {\n      setJsonVisible(true);\n    },\n    form: form,\n    onSave: handlePharmacyUpsert,\n    loading: btnLoading,\n    editId: props.match.params.id,\n    onCancel: handleBackRedirect,\n    subscripData: subscripData,\n    queryData: CLIENTELE_TYPE.PHARMACY,\n    editPhamacy: getData,\n    isPharmacy: true // onTableVisible={(value) => {\n    //   setTabVisible(value);\n    // }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 21\n    }\n  })) : null))))), pdfVisible && /*#__PURE__*/React.createElement(Uploader, {\n    visible: pdfVisible,\n    onRequestClose: () => setPdfVisible(false),\n    title: \"Upload PDF file\",\n    uploadUrl: { ...fileUpload\n    },\n    allowedTypes: FILE_TYPES.PDF,\n    accept: [FILE_TYPES.PDF],\n    extraData: {\n      isUploadToS3: true,\n      category: [FILE_CATEGORY.PDF].join(',')\n    },\n    uploadUrl: { ...fileUpload\n    },\n    maxSizeInMB: 10,\n    onError: err => {\n      Toast.error(err);\n    },\n    onSuccess: response => {\n      if (response.code === 'OK') {\n        response && response.data && response.data.length && response.data.map(data => {\n          return setPdfData(data.path);\n        });\n        setPdfVisible(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }), jsonVisible && /*#__PURE__*/React.createElement(Uploader, {\n    visible: jsonVisible,\n    onRequestClose: () => setJsonVisible(false),\n    title: \"Upload JSON file\",\n    uploadUrl: { ...fileUpload\n    },\n    accept: [FILE_TYPES.JSON],\n    allowedTypes: FILE_TYPES.JSON,\n    accept: [FILE_CATEGORY.JSON].join(','),\n    extraData: {\n      isUploadToS3: true,\n      category: [FILE_CATEGORY.JSON].join(',')\n    },\n    maxSizeInMB: 10,\n    onError: err => {\n      Toast.error(err);\n    },\n    onSuccess: response => {\n      if (response.code === 'OK') {\n        response && response.data && response.data.length && response.data.map(data => {\n          return setJsonData(data.path);\n        });\n        setJsonVisible(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default withRouter(createForm()(PharmacyTabs));","map":{"version":3,"sources":["/home/gauravpendherkar/DemoWriti/src/containers/Customers/Pharmacy/components/PharmacyTabs.js"],"names":["React","useState","useEffect","withRouter","Button","UpsertForm","axios","SettingForm","createForm","routes","getAll","Toast","Tabs","TabPane","canPerformAction","MODULE","SUB_MODULE","CLIENTELE_TYPE","pharmacyPaginate","pharmacyUpsert","getSpecificPharmacy","pharmacyUpdate","fileUpload","Uploader","FILE_CATEGORY","FILE_TYPES","_","require","PharmacyTabs","props","btnLoading","setBtnLoading","form","validateFields","getData","setData","pharamcyData","setPharmacyData","total","setTotal","subscripData","setSubscripData","selectedTab","setSelectedTab","pdfVisible","setPdfVisible","jsonVisible","setJsonVisible","pdfData","setPdfData","jsonData","setJsonData","parentPhamracyData","find","parentId","storeData","name","id","fetchSubscritions","match","params","getPharmacy","fetch","method","url","baseURL","then","data","code","updatedList","filter","x","count","catch","err","error","sort","createdAt","where","isActive","response","message","modifiedList","list","map","current","handlePharmacyUpsert","value","obj","clone","formData","pdfPath","jsonPath","printer","printerName","machineId","email","size","emails","isPrimary","fax","faxes","mobiles","mobile","phone","countryCode","addresses","line1","line2","city","province","country","postalCode","_id","success","history","push","pharmacy","path","handleBackRedirect","handleTabChange","key","pharmacySettingParams","moduleId","PHARMACY","subModuleId","PHARMACY_SETTING","marginBottom","fontSize","marginLeft","marginTop","border","PDF","isUploadToS3","category","join","length","JSON"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,qCAAvB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,WAAP,MAAwB,mEAAxB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,MAAT,QAAuB,8CAAvB;AACA,SAASC,KAAT,QAAsB,qCAAtB;AACA,OAAOC,IAAP,IAAeC,OAAf,QAA8B,SAA9B;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,OAAO,0BAAP;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,oCAAnC;AACA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SACEC,gBADF,EAEEC,cAFF,EAGEC,mBAHF,EAIEC,cAJF,QAKO,0CALP;AAMA,SAASC,UAAT,QAA2B,wCAA3B;AACA,OAAOC,QAAP,IACEC,aADF,EAEEC,UAFF,QAGO,+CAHP;;AAIA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAE+B,IAAAA;AAAF,MAAWH,KAAjB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAqBD,IAA3B;AACA,QAAM,CAACE,OAAD,EAAUC,OAAV,IAAqBlC,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACmC,YAAD,EAAeC,eAAf,IAAkCpC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACqC,KAAD,EAAQC,QAAR,IAAoBtC,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACuC,YAAD,EAAeC,eAAf,IAAkCxC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACyC,WAAD,EAAcC,cAAd,IAAgC1C,QAAQ,CAAC,GAAD,CAA9C;AACA,QAAM,CAAC2C,UAAD,EAAaC,aAAb,IAA8B5C,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC6C,WAAD,EAAcC,cAAd,IAAgC9C,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAAC+C,OAAD,EAAUC,UAAV,IAAwBhD,QAAQ,EAAtC;AAGA,QAAM,CAACiD,QAAD,EAAWC,WAAX,IAA0BlD,QAAQ,EAAxC;;AACA,MAAImD,kBAAkB,GAAG1B,CAAC,CAAC2B,IAAF,CAAOjB,YAAP,EAAqB;AAAEkB,IAAAA,QAAQ,EAAE;AAAZ,GAArB,CAAzB;;AAEA,QAAMC,SAAS,GAAG,CAChB;AAAEC,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,EAAE,EAAE;AAA1B,GADgB,EAEhB;AAAED,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,EAAE,EAAE;AAAtB,GAFgB,CAAlB;AAKAvD,EAAAA,SAAS,CAAC,MAAM;AACdwD,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIAxD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2B,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBH,EAAvB,EAA2BI,WAAW;AACvC,GAFQ,EAEN,CAAChC,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBH,EAApB,CAFM,CAAT;AAIAvD,EAAAA,SAAS,CAAC,MAAM;AACd4D,IAAAA,KAAK;AACN,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,KAAK,GAAG,MAAM;AAClB,QAAI;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,QAA2B/C,gBAA/B;AACAZ,IAAAA,KAAK,CAAC;AAAEyD,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,KAAD,CAAL,CACGC,IADH,CACSC,IAAD,IAAU;AACd,UAAIA,IAAI,CAACA,IAAL,CAAUC,IAAV,KAAmB,IAAvB,EAA6B;AAC3B,YAAIC,WAAW,GAAGF,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeA,IAAf,CAAoBG,MAApB,CAA4BC,CAAD,IAAO,CAACA,CAAC,CAACjB,QAArC,CAAlB;AACAjB,QAAAA,eAAe,CAACgC,WAAD,CAAf;AACA9B,QAAAA,QAAQ,CAAC4B,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeK,KAAhB,CAAR;AACD;AACF,KAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACd/D,MAAAA,KAAK,CAACgE,KAAN,CAAYD,GAAZ;AACD,KAVH;AAWD,GAbD;;AAeA,QAAMhB,iBAAiB,GAAG,MAAM;AAC9B,QAAI;AAAEK,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,QAA2BvD,MAA/B;AACA,UAAMyD,IAAI,GAAG;AAAES,MAAAA,IAAI,EAAE;AAAEC,QAAAA,SAAS,EAAE,CAAC;AAAd,OAAR;AAA2BC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAAlC,KAAb;AACAzE,IAAAA,KAAK,CAAC;AAAEyD,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA,OAAf;AAAwBE,MAAAA;AAAxB,KAAD,CAAL,CACGD,IADH,CACSc,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACb,IAAT,CAAcC,IAAd,KAAuB,IAA3B,EAAiC;AAC/B3B,QAAAA,eAAe,CAACuC,QAAQ,CAACb,IAAT,CAAcA,IAAd,CAAmBA,IAApB,CAAf;AACD,OAFD,MAEO;AACLxD,QAAAA,KAAK,CAACgE,KAAN,CAAYK,QAAQ,CAACb,IAAT,CAAcc,OAA1B;AACD;AACF,KAPH,EAQGR,KARH,CAQUE,KAAD,IAAW;AAChBhE,MAAAA,KAAK,CAACgE,KAAN,CAAYA,KAAZ;AACD,KAVH;AAWD,GAdD;;AAgBA,QAAMO,YAAY,GAAIC,IAAD,IAAU;AAC7B,QAAID,YAAY,GAAGC,IAAI,CAACC,GAAL,CAAUC,OAAD,IAAa;AACvC,aAAOA,OAAP;AACD,KAFkB,CAAnB;AAGA,WAAOH,YAAP;AACD,GALD;;AAOA,QAAMI,oBAAoB,GAAG,MAAM;AACjCvD,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,IAAAA,cAAc,CAAC,CAAC0C,KAAD,EAAQY,KAAR,KAAkB;AAC/B,UAAI,CAACZ,KAAL,EAAY;AACV,YAAIa,GAAG,GAAG9D,CAAC,CAAC+D,KAAF,CAAQF,KAAR,CAAV;;AACA,YAAIC,GAAJ,EAAS;AACPA,UAAAA,GAAG,CAACE,QAAJ,GAAe;AACbC,YAAAA,OAAO,EAAE3C,OADI;AAEb4C,YAAAA,QAAQ,EAAE1C;AAFG,WAAf;AAID;;AAED,YAAIsC,GAAJ,EAAS;AACPA,UAAAA,GAAG,CAACK,OAAJ,GAAc;AACZrC,YAAAA,IAAI,EAAEgC,GAAG,CAACM,WADE;AAEZC,YAAAA,SAAS,EAAEP,GAAG,CAACO;AAFH,WAAd;AAID;;AAED,YAAIP,GAAG,CAACQ,KAAJ,IAAatE,CAAC,CAACuE,IAAF,CAAOT,GAAG,CAACQ,KAAX,IAAoB,CAArC,EAAwC;AACtCR,UAAAA,GAAG,CAACU,MAAJ,GAAa,CAAC;AAAEF,YAAAA,KAAK,EAAER,GAAG,CAACQ,KAAb;AAAoBG,YAAAA,SAAS,EAAE;AAA/B,WAAD,CAAb;AACD;;AACD,YAAIX,GAAG,CAACY,GAAJ,IAAW1E,CAAC,CAACuE,IAAF,CAAOT,GAAG,CAACY,GAAX,IAAkB,CAAjC,EAAoC;AAClCZ,UAAAA,GAAG,CAACa,KAAJ,GAAY,CAAC;AAAED,YAAAA,GAAG,EAAEZ,GAAG,CAACY,GAAX;AAAgBD,YAAAA,SAAS,EAAE;AAA3B,WAAD,CAAZ;AACD;;AACD,YAAIX,GAAJ,EAAS;AACPA,UAAAA,GAAG,CAACc,OAAJ,GAAc,CACZ;AACEC,YAAAA,MAAM,EAAEf,GAAG,CAACgB,KADd;AAEEC,YAAAA,WAAW,EAAE,IAFf;AAGEN,YAAAA,SAAS,EAAE;AAHb,WADY,CAAd;AAQAX,UAAAA,GAAG,CAACkB,SAAJ,GAAgB,CACd;AACEP,YAAAA,SAAS,EAAE,IADb;AAEEQ,YAAAA,KAAK,EAAEnB,GAAG,CAACmB,KAFb;AAGEC,YAAAA,KAAK,EAAEpB,GAAG,CAACmB,KAHb;AAIEE,YAAAA,IAAI,EAAErB,GAAG,CAACqB,IAJZ;AAKEC,YAAAA,QAAQ,EAAEtB,GAAG,CAACsB,QALhB;AAMEC,YAAAA,OAAO,EAAEvB,GAAG,CAACuB,OANf;AAOEC,YAAAA,UAAU,EAAExB,GAAG,CAACwB;AAPlB,WADc,CAAhB;AAWD;;AAED,eAAOxB,GAAG,CAACQ,KAAX;AACA,eAAOR,GAAG,CAACY,GAAX;AACA,eAAOZ,GAAG,CAACmB,KAAX;AACA,eAAOnB,GAAG,CAACoB,KAAX;AACA,eAAOpB,GAAG,CAACwB,UAAX;AACA,eAAOxB,GAAG,CAACsB,QAAX;AACA,eAAOtB,GAAG,CAACuB,OAAX;AACA,eAAOvB,GAAG,CAACqB,IAAX;AACA,eAAOrB,GAAG,CAACM,WAAX;AACA,eAAON,GAAG,CAACO,SAAX;;AAEA,YAAK,CAAC/C,OAAD,IAAYE,QAAb,IAA2BF,OAAO,IAAI,CAACE,QAA3C,EAAsD;AACpDvC,UAAAA,KAAK,CAACgE,KAAN,CAAa,qBAAoB,CAACzB,QAAD,GAAY,MAAZ,GAAqB,KAAM,QAA5D;AACD,SAFD,MAEO;AACL,cAAI;AAAEa,YAAAA,MAAF;AAAUC,YAAAA,GAAV;AAAeC,YAAAA;AAAf,cAA2B/B,OAAO,CAAC+E,GAAR,GAC3B5F,cAD2B,GAE3BF,cAFJ;AAGA6C,UAAAA,GAAG,GAAG9B,OAAO,CAAC+E,GAAR,GAAe,GAAEjD,GAAI,IAAG9B,OAAO,CAAC+E,GAAI,EAApC,GAAwCjD,GAA9C;AACA1D,UAAAA,KAAK,CAAC;AAAEyD,YAAAA,MAAF;AAAUC,YAAAA,GAAV;AAAeG,YAAAA,IAAI,EAAEqB,GAArB;AAA0BvB,YAAAA;AAA1B,WAAD,CAAL,CACGC,IADH,CACSc,QAAD,IAAc;AAClB,gBAAIA,QAAQ,IAAIA,QAAQ,CAACb,IAAT,CAAcC,IAAd,IAAsB,IAAtC,EAA4C;AAC1CzD,cAAAA,KAAK,CAACuG,OAAN,CAAclC,QAAQ,CAACb,IAAT,CAAcc,OAA5B;AACApD,cAAAA,KAAK,CAACsF,OAAN,CAAcC,IAAd,CAAmB3G,MAAM,CAAC4G,QAAP,CAAgBC,IAAnC;AACD;;AACDvF,YAAAA,aAAa,CAAC,KAAD,CAAb;AACD,WAPH,EAQG0C,KARH,CAQUE,KAAD,IAAW;AAChB5C,YAAAA,aAAa,CAAC,KAAD,CAAb;AACApB,YAAAA,KAAK,CAACgE,KAAN,CAAYA,KAAZ;AACD,WAXH;AAYD;AACF,OA3ED,MA2EO;AACL5C,QAAAA,aAAa,CAAC,KAAD,CAAb;AACApB,QAAAA,KAAK,CAACgE,KAAN,CAAY,iCAAZ;AACD;AACF,KAhFa,CAAd;AAiFD,GAnFD;;AAqFA,QAAMd,WAAW,GAAG,MAAM;AACxB,QAAI;AAAEE,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,QAA2B7C,mBAA/B;AACA4C,IAAAA,GAAG,GAAI,GAAEA,GAAI,IAAGnC,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBH,EAAG,EAAtC;AACAnD,IAAAA,KAAK,CAAC;AAAEyD,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,KAAD,CAAL,CACGC,IADH,CACSc,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACb,IAAT,CAAcC,IAAd,IAAsB,IAA1B,EAAgC;AAAA;;AAC9BnB,QAAAA,UAAU,wBAAC+B,QAAQ,CAACb,IAAT,CAAcA,IAAf,iFAAC,oBAAoBuB,QAArB,0DAAC,sBAA8BC,OAA/B,CAAV;AACAxC,QAAAA,WAAW,yBAAC6B,QAAQ,CAACb,IAAT,CAAcA,IAAf,kFAAC,qBAAoBuB,QAArB,0DAAC,sBAA8BE,QAA/B,CAAX;AACAzD,QAAAA,OAAO,CAAC6C,QAAQ,CAACb,IAAT,CAAcA,IAAf,CAAP;AACD;AACF,KAPH,EAQGM,KARH,CAQUE,KAAD,IAAW;AAChBhE,MAAAA,KAAK,CAACgE,KAAN,CAAYA,KAAZ;AACD,KAVH;AAWD,GAdD;;AAgBA,QAAM4C,kBAAkB,GAAG,MAAM;AAC/B1F,IAAAA,KAAK,CAACsF,OAAN,CAAcC,IAAd,CAAoB,GAAE3G,MAAM,CAAC4G,QAAP,CAAgBC,IAAK,EAA3C;AACD,GAFD;;AAIA,QAAME,eAAe,GAAIC,GAAD,IAAS;AAC/B9E,IAAAA,cAAc,CAAC8E,GAAD,CAAd;AACD,GAFD;;AAIA,MAAIC,qBAAqB,GAAG;AAC1BC,IAAAA,QAAQ,EAAE5G,MAAM,CAAC6G,QADS;AAE1BC,IAAAA,WAAW,EAAE7G,UAAU,CAAC8G;AAFE,GAA5B;AAIA,sBACE,uDACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,KADT;AAELC,MAAAA,QAAQ,EAAE,MAFL;AAGLC,MAAAA,UAAU,EAAE;AAHP,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIpG,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBH,EAAnB,GAAwB,MAAxB,GAAiC,KAArC,cAPF,CADF,eAUE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAEyE,MAAAA,SAAS,EAAE;AAAb,KADT;AAEE,IAAA,IAAI,EAAC,IAFP;AAGE,IAAA,OAAO,EAAE,MAAM;AACbX,MAAAA,kBAAkB;AACnB,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,CADF,eAqBE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,KAAK,EAAE;AAAEY,MAAAA,MAAM,EAAE;AAAV,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,gBAAgB,EAAEzF,WADpB;AAEE,IAAA,SAAS,EAAEA,WAFb;AAGE,IAAA,SAAS,EAAC,qBAHZ;AAIE,IAAA,QAAQ,EAAE8E,eAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAC,OAAb;AAAqB,IAAA,GAAG,EAAC,GAAzB;AAA6B,IAAA,SAAS,EAAC,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,WAAW,EAAEA,eADf;AAEE,IAAA,cAAc,EAAEpF,YAFlB;AAGE,IAAA,KAAK,EAAEmB,SAHT;AAIE,IAAA,IAAI,EAAEvB,IAJR;AAKE,IAAA,WAAW,EAAEE,OALf;AAME,IAAA,MAAM,EAAEL,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBH,EAN7B;AAOE,IAAA,QAAQ,EAAE8D,kBAPZ;AAQE,IAAA,MAAM,EAAEjC,oBARV,CASA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANF,EAmBGxE,gBAAgB,CAAC4G,qBAAD,EAAwB,IAAxB,CAAhB,gBACC,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAC,SAAb;AAAuB,IAAA,GAAG,EAAC,GAA3B;AAA+B,IAAA,SAAS,EAAC,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,YAAY,EAAE,MAAM;AAClB7E,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAHH;AAIE,IAAA,SAAS,EAAEG,OAJb;AAKE,IAAA,UAAU,EAAEE,QALd;AAME,IAAA,aAAa,EAAE,MAAM;AACnBH,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KARH;AASE,IAAA,IAAI,EAAEf,IATR;AAUE,IAAA,MAAM,EAAEsD,oBAVV;AAWE,IAAA,OAAO,EAAExD,UAXX;AAYE,IAAA,MAAM,EAAED,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBH,EAZ7B;AAaE,IAAA,QAAQ,EAAE8D,kBAbZ;AAcE,IAAA,YAAY,EAAE/E,YAdhB;AAeE,IAAA,SAAS,EAAEvB,cAAc,CAAC2G,QAf5B;AAgBE,IAAA,WAAW,EAAE1F,OAhBf;AAiBE,IAAA,UAAU,EAAE,IAjBd,CAkBA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,GAyBG,IA5CN,CADF,CADF,CArBF,CADF,CADF,EA4EGU,UAAU,iBACT,oBAAC,QAAD;AACE,IAAA,OAAO,EAAEA,UADX;AAEE,IAAA,cAAc,EAAE,MAAMC,aAAa,CAAC,KAAD,CAFrC;AAGE,IAAA,KAAK,EAAC,iBAHR;AAIE,IAAA,SAAS,EAAE,EAAE,GAAGvB;AAAL,KAJb;AAKE,IAAA,YAAY,EAAEG,UAAU,CAAC2G,GAL3B;AAME,IAAA,MAAM,EAAE,CAAC3G,UAAU,CAAC2G,GAAZ,CANV;AAOE,IAAA,SAAS,EAAE;AACTC,MAAAA,YAAY,EAAE,IADL;AAETC,MAAAA,QAAQ,EAAE,CAAC9G,aAAa,CAAC4G,GAAf,EAAoBG,IAApB,CAAyB,GAAzB;AAFD,KAPb;AAWE,IAAA,SAAS,EAAE,EAAE,GAAGjH;AAAL,KAXb;AAYE,IAAA,WAAW,EAAE,EAZf;AAaE,IAAA,OAAO,EAAGoD,GAAD,IAAS;AAChB/D,MAAAA,KAAK,CAACgE,KAAN,CAAYD,GAAZ;AACD,KAfH;AAgBE,IAAA,SAAS,EAAGM,QAAD,IAAc;AACvB,UAAIA,QAAQ,CAACZ,IAAT,KAAkB,IAAtB,EAA4B;AAC1BY,QAAAA,QAAQ,IACNA,QAAQ,CAACb,IADX,IAEEa,QAAQ,CAACb,IAAT,CAAcqE,MAFhB,IAGExD,QAAQ,CAACb,IAAT,CAAciB,GAAd,CAAmBjB,IAAD,IAAU;AAC1B,iBAAOlB,UAAU,CAACkB,IAAI,CAACmD,IAAN,CAAjB;AACD,SAFD,CAHF;AAOAzE,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,KA3BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7EJ,EA4GGC,WAAW,iBACV,oBAAC,QAAD;AACE,IAAA,OAAO,EAAEA,WADX;AAEE,IAAA,cAAc,EAAE,MAAMC,cAAc,CAAC,KAAD,CAFtC;AAGE,IAAA,KAAK,EAAC,kBAHR;AAIE,IAAA,SAAS,EAAE,EAAE,GAAGzB;AAAL,KAJb;AAKE,IAAA,MAAM,EAAE,CAACG,UAAU,CAACgH,IAAZ,CALV;AAME,IAAA,YAAY,EAAEhH,UAAU,CAACgH,IAN3B;AAOE,IAAA,MAAM,EAAE,CAACjH,aAAa,CAACiH,IAAf,EAAqBF,IAArB,CAA0B,GAA1B,CAPV;AAQE,IAAA,SAAS,EAAE;AACTF,MAAAA,YAAY,EAAE,IADL;AAETC,MAAAA,QAAQ,EAAE,CAAC9G,aAAa,CAACiH,IAAf,EAAqBF,IAArB,CAA0B,GAA1B;AAFD,KARb;AAYE,IAAA,WAAW,EAAE,EAZf;AAaE,IAAA,OAAO,EAAG7D,GAAD,IAAS;AAChB/D,MAAAA,KAAK,CAACgE,KAAN,CAAYD,GAAZ;AACD,KAfH;AAgBE,IAAA,SAAS,EAAGM,QAAD,IAAc;AACvB,UAAIA,QAAQ,CAACZ,IAAT,KAAkB,IAAtB,EAA4B;AAC1BY,QAAAA,QAAQ,IACNA,QAAQ,CAACb,IADX,IAEEa,QAAQ,CAACb,IAAT,CAAcqE,MAFhB,IAGExD,QAAQ,CAACb,IAAT,CAAciB,GAAd,CAAmBjB,IAAD,IAAU;AAC1B,iBAAOhB,WAAW,CAACgB,IAAI,CAACmD,IAAN,CAAlB;AACD,SAFD,CAHF;AAMAvE,QAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,KA1BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7GJ,CADF;AA6ID,CAtUD;;AAwUA,eAAe5C,UAAU,CAACK,UAAU,GAAGoB,YAAH,CAAX,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '../../../../components/common/index';\nimport UpsertForm from '../../Pharmacy/components/UpsertForm';\nimport axios from '../../../../services/api/config';\nimport SettingForm from '../../../../containers/Customers/Clientele/components/SettingForm';\nimport createForm from 'rc-form/lib/createForm';\nimport routes from '../../../../routes/constant';\nimport { getAll } from '../../../../services/api/routes/subscription';\nimport { Toast } from '../../../../components/common/Toast';\nimport Tabs, { TabPane } from 'rc-tabs';\nimport { canPerformAction } from '../../../../util/common';\nimport 'rc-tabs/assets/index.css';\nimport { MODULE, SUB_MODULE } from '../../../../constants/subscription';\nimport { CLIENTELE_TYPE } from '../../../../constants/Customer';\nimport {\n  pharmacyPaginate,\n  pharmacyUpsert,\n  getSpecificPharmacy,\n  pharmacyUpdate,\n} from '../../../../services/api/routes/customer';\nimport { fileUpload } from '../../../../services/api/routes/common';\nimport Uploader, {\n  FILE_CATEGORY,\n  FILE_TYPES,\n} from '../../../../components/common/Upload/Uploader';\nconst _ = require('lodash');\n\nconst PharmacyTabs = (props) => {\n  const [btnLoading, setBtnLoading] = useState(false);\n  const { form } = props;\n  const { validateFields } = form;\n  const [getData, setData] = useState({});\n  const [pharamcyData, setPharmacyData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [subscripData, setSubscripData] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('1');\n  const [pdfVisible, setPdfVisible] = useState(false);\n  const [jsonVisible, setJsonVisible] = useState(false);\n  const [pdfData, setPdfData] = useState();\n\n\n  const [jsonData, setJsonData] = useState();\n  let parentPhamracyData = _.find(pharamcyData, { parentId: null });\n\n  const storeData = [\n    { name: 'Burlington', id: 1 },\n    { name: 'London', id: 2 },\n  ];\n\n  useEffect(() => {\n    fetchSubscritions();\n  }, []);\n\n  useEffect(() => {\n    if (props.match.params.id) getPharmacy();\n  }, [props.match.params.id]);\n\n  useEffect(() => {\n    fetch();\n  }, []);\n\n  const fetch = () => {\n    let { method, url, baseURL } = pharmacyPaginate;\n    axios({ method, url, baseURL })\n      .then((data) => {\n        if (data.data.code === 'OK') {\n          let updatedList = data.data.data.data.filter((x) => !x.parentId);\n          setPharmacyData(updatedList);\n          setTotal(data.data.data.count);\n        }\n      })\n      .catch((err) => {\n        Toast.error(err);\n      });\n  };\n\n  const fetchSubscritions = () => {\n    let { method, url, baseURL } = getAll;\n    const data = { sort: { createdAt: -1 }, where: { isActive: true } };\n    axios({ method, url, baseURL, data })\n      .then((response) => {\n        if (response.data.code === 'OK') {\n          setSubscripData(response.data.data.data);\n        } else {\n          Toast.error(response.data.message);\n        }\n      })\n      .catch((error) => {\n        Toast.error(error);\n      });\n  };\n\n  const modifiedList = (list) => {\n    let modifiedList = list.map((current) => {\n      return current;\n    });\n    return modifiedList;\n  };\n\n  const handlePharmacyUpsert = () => {\n    setBtnLoading(true);\n    validateFields((error, value) => {\n      if (!error) {\n        let obj = _.clone(value);\n        if (obj) {\n          obj.formData = {\n            pdfPath: pdfData,\n            jsonPath: jsonData,\n          };\n        }\n\n        if (obj) {\n          obj.printer = {\n            name: obj.printerName,\n            machineId: obj.machineId,\n          };\n        }\n\n        if (obj.email && _.size(obj.email) > 0) {\n          obj.emails = [{ email: obj.email, isPrimary: true }];\n        }\n        if (obj.fax && _.size(obj.fax) > 0) {\n          obj.faxes = [{ fax: obj.fax, isPrimary: true }];\n        }\n        if (obj) {\n          obj.mobiles = [\n            {\n              mobile: obj.phone,\n              countryCode: '91',\n              isPrimary: true,\n            },\n          ];\n\n          obj.addresses = [\n            {\n              isPrimary: true,\n              line1: obj.line1,\n              line2: obj.line1,\n              city: obj.city,\n              province: obj.province,\n              country: obj.country,\n              postalCode: obj.postalCode,\n            },\n          ];\n        }\n\n        delete obj.email;\n        delete obj.fax;\n        delete obj.line1;\n        delete obj.line2;\n        delete obj.postalCode;\n        delete obj.province;\n        delete obj.country;\n        delete obj.city;\n        delete obj.printerName;\n        delete obj.machineId;\n\n        if ((!pdfData && jsonData) || (pdfData && !jsonData)) {\n          Toast.error(`Please upload the ${!jsonData ? 'JSON' : 'PDF'} file.`);\n        } else {\n          let { method, url, baseURL } = getData._id\n            ? pharmacyUpdate\n            : pharmacyUpsert;\n          url = getData._id ? `${url}/${getData._id}` : url;\n          axios({ method, url, data: obj, baseURL })\n            .then((response) => {\n              if (response && response.data.code == 'OK') {\n                Toast.success(response.data.message);\n                props.history.push(routes.pharmacy.path);\n              }\n              setBtnLoading(false);\n            })\n            .catch((error) => {\n              setBtnLoading(false);\n              Toast.error(error);\n            });\n        }\n      } else {\n        setBtnLoading(false);\n        Toast.error('Please fill required fields...!');\n      }\n    });\n  };\n\n  const getPharmacy = () => {\n    let { method, url, baseURL } = getSpecificPharmacy;\n    url = `${url}/${props.match.params.id}`;\n    axios({ method, url, baseURL })\n      .then((response) => {\n        if (response.data.code == 'OK') {\n          setPdfData(response.data.data?.formData?.pdfPath)\n          setJsonData(response.data.data?.formData?.jsonPath)\n          setData(response.data.data);\n        }\n      })\n      .catch((error) => {\n        Toast.error(error);\n      });\n  };\n\n  const handleBackRedirect = () => {\n    props.history.push(`${routes.pharmacy.path}`);\n  };\n\n  const handleTabChange = (key) => {\n    setSelectedTab(key);\n  };\n\n  let pharmacySettingParams = {\n    moduleId: MODULE.PHARMACY,\n    subModuleId: SUB_MODULE.PHARMACY_SETTING,\n  };\n  return (\n    <>\n      <div className='pmr_wrap'>\n        <div className='container'>\n          <div className='page_head'>\n            <span\n              style={{\n                marginBottom: '-1%',\n                fontSize: '20px',\n                marginLeft: '2px',\n              }}\n            >\n              <b>{props.match.params.id ? 'Edit' : 'Add'} Pharmacy</b>\n            </span>\n            <Button\n              style={{ marginTop: '5px' }}\n              size='lg'\n              onClick={() => {\n                handleBackRedirect();\n              }}\n            >\n              Back\n            </Button>\n          </div>\n          <div className='pmr_list_wrap'>\n            <div className='patient_order_wrap' style={{ border: 'none' }}>\n              <Tabs\n                defaultActiveKey={selectedTab}\n                activeKey={selectedTab}\n                className='permission_tab_wrap'\n                onChange={handleTabChange}\n              >\n                <TabPane tab='Basic' key='1' className='resi_treat'>\n                  <UpsertForm\n                    onTabChange={handleTabChange}\n                    parentPharmacy={pharamcyData}\n                    store={storeData}\n                    form={form}\n                    editPhamacy={getData}\n                    editId={props.match.params.id}\n                    onCancel={handleBackRedirect}\n                    onSave={handlePharmacyUpsert}\n                  // onTabVisible={tabVisible}\n                  />\n                </TabPane>\n                {canPerformAction(pharmacySettingParams, true) ? (\n                  <TabPane tab='Setting' key='2' className='resi_treat'>\n                    <SettingForm\n                      onPdfVisible={() => {\n                        setPdfVisible(true);\n                      }}\n                      onPdfData={pdfData}\n                      onJsonData={jsonData}\n                      onJsonVisible={() => {\n                        setJsonVisible(true);\n                      }}\n                      form={form}\n                      onSave={handlePharmacyUpsert}\n                      loading={btnLoading}\n                      editId={props.match.params.id}\n                      onCancel={handleBackRedirect}\n                      subscripData={subscripData}\n                      queryData={CLIENTELE_TYPE.PHARMACY}\n                      editPhamacy={getData}\n                      isPharmacy={true}\n                    // onTableVisible={(value) => {\n                    //   setTabVisible(value);\n                    // }}\n                    />\n                  </TabPane>\n                ) : null}\n              </Tabs>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {pdfVisible && (\n        <Uploader\n          visible={pdfVisible}\n          onRequestClose={() => setPdfVisible(false)}\n          title='Upload PDF file'\n          uploadUrl={{ ...fileUpload }}\n          allowedTypes={FILE_TYPES.PDF}\n          accept={[FILE_TYPES.PDF]}\n          extraData={{\n            isUploadToS3: true,\n            category: [FILE_CATEGORY.PDF].join(','),\n          }}\n          uploadUrl={{ ...fileUpload }}\n          maxSizeInMB={10}\n          onError={(err) => {\n            Toast.error(err);\n          }}\n          onSuccess={(response) => {\n            if (response.code === 'OK') {\n              response &&\n                response.data &&\n                response.data.length &&\n                response.data.map((data) => {\n                  return setPdfData(data.path);\n                });\n\n              setPdfVisible(false);\n            }\n          }}\n        />\n      )}\n\n      {jsonVisible && (\n        <Uploader\n          visible={jsonVisible}\n          onRequestClose={() => setJsonVisible(false)}\n          title='Upload JSON file'\n          uploadUrl={{ ...fileUpload }}\n          accept={[FILE_TYPES.JSON]}\n          allowedTypes={FILE_TYPES.JSON}\n          accept={[FILE_CATEGORY.JSON].join(',')}\n          extraData={{\n            isUploadToS3: true,\n            category: [FILE_CATEGORY.JSON].join(','),\n          }}\n          maxSizeInMB={10}\n          onError={(err) => {\n            Toast.error(err);\n          }}\n          onSuccess={(response) => {\n            if (response.code === 'OK') {\n              response &&\n                response.data &&\n                response.data.length &&\n                response.data.map((data) => {\n                  return setJsonData(data.path);\n                });\n              setJsonVisible(false);\n            }\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default withRouter(createForm()(PharmacyTabs));\n"]},"metadata":{},"sourceType":"module"}